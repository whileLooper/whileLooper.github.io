{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"3a2741e0142ea6692c4b0eaaf9b5decba956e5b9","modified":1502398685000},{"_id":"themes/next/.DS_Store","hash":"90e479304140038652dca978c6dafadae0218208","modified":1502460607000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1502378832000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1502378832000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1502378832000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1502378832000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1502378832000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1502378832000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1502378832000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1502378832000},{"_id":"themes/next/.travis.yml","hash":"1a69a0b3ae010b10080069332829205573c64371","modified":1502378832000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1502378832000},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1502378832000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1502378832000},{"_id":"themes/next/_config.yml","hash":"15de8f24f47f1f14e1e28f38de55b7424dceefdd","modified":1502473831000},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1502378832000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1502378832000},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1502378832000},{"_id":"source/_posts/.DS_Store","hash":"eab62de077478a1a00fea78fc2bdeee28cad44e0","modified":1502380133000},{"_id":"source/_posts/2016-10-05-unit-test.md","hash":"2141483029b3d65631485ac47bec1fd6c0450ed9","modified":1502473755000},{"_id":"source/_posts/2016-10-06-javascript-unit-test.markdown","hash":"04ab511e241bf528527327a1224a509c0141e6e9","modified":1502380133000},{"_id":"source/_posts/2016-10-13-game-of-life.md","hash":"377334fd3fb5e21bc4e89e23b1f8cb5334780737","modified":1502380133000},{"_id":"source/_posts/2016-10-25-sublimelinter-trick.md","hash":"12af5f08bcd58aab7b8b14758474a795bc28714f","modified":1502380133000},{"_id":"source/_posts/2016-11-09-component-vs-directive.md","hash":"bd034d42249a18cefc3f2d41b47e519cf085ea8f","modified":1502380133000},{"_id":"source/_posts/2016-11-10-charting-library.md","hash":"964ebb9dbc652e080204cb4fe5bfcace1a840a8a","modified":1502380133000},{"_id":"source/_posts/2016-11-16-directive-for-charting-library.md","hash":"81fc1f80b0e147ae9513e801b301242a1b8b203a","modified":1502380133000},{"_id":"source/_posts/2017-01-20-ci-deploy.md","hash":"14454a474826ea28b82a6ec442afb493b1948ba4","modified":1502463686000},{"_id":"source/_posts/2017-02-20-custom-filter-pipe.md","hash":"5f0356ed958969b36f61337cbf98da9a0ce2e1b3","modified":1502463353000},{"_id":"source/_posts/2017-08-10-stop_and_continue.md","hash":"b7e2871c19f31adc9f81f299c059a3740ea271ca","modified":1502463690000},{"_id":"source/tags/index.md","hash":"e5045126346af40d7342e1fd309e1fa1ec0d296a","modified":1502463601000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1502378832000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1502378832000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1502378826000},{"_id":"themes/next/.git/index","hash":"cda17a2e6fa4448eb21368e00d317f06dd35cd34","modified":1502398076000},{"_id":"themes/next/.git/packed-refs","hash":"b015773cdd9759648cb59f7af6c67d1064073e15","modified":1502378832000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1502378832000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b56c01cdfc6ee7ffea8a8a9fa149263f368caef6","modified":1502378832000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"37bd0ec1d655c601946fc5f5ac2fe8ed1e529b77","modified":1502378832000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1502378832000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1502378832000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1502378832000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1502378832000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1502378832000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1502378832000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1502378832000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1502378832000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1502378832000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1502378832000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1502378832000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1502378832000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1502378832000},{"_id":"themes/next/layout/_layout.swig","hash":"e3c40f48ffbe19e7a2a54e72c8bb273630c37633","modified":1502378832000},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1502378832000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1502378832000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1502378832000},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1502378832000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1502378832000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1502378832000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1502378832000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1502378832000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1502378832000},{"_id":"themes/next/source/.DS_Store","hash":"19ec9d90721df1654611141e7477ce091095b864","modified":1502460607000},{"_id":"themes/next/source/favicon.ico","hash":"23202e1403b4ab7842ef6d46c4fb6aa0e00f832f","modified":1502464969000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1502378832000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1502378832000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1502378832000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502378832000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1502378826000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1502378826000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1502378826000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1502378826000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1502378826000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1502378826000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1502378826000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1502378826000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1502378826000},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1502378826000},{"_id":"themes/next/.git/logs/HEAD","hash":"5e6b3e728c55f924a402685c1b9f6281466111ba","modified":1502378832000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1502378832000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1502378832000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1502378832000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1502378832000},{"_id":"themes/next/layout/_macro/post.swig","hash":"911363776867d9523a3e322cdf591d49cd166403","modified":1502378832000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1502378832000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"faa7886ccf986890cd776f4e9d70cb89fe9fda5f","modified":1502378832000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1502378832000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ce7094ee05878161e7568a6dfae5b56ff3fbd6e1","modified":1502378832000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1502378832000},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1502378832000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1502378832000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1502378832000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1502378832000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1502378832000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1502378832000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1502378832000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1502378832000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1502378832000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1502378832000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1502378832000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1502378832000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1502378832000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1502378832000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1502378832000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1502378832000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1502378832000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1502378832000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1502378832000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1502378832000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1502378832000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1502378832000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1502378832000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1502378832000},{"_id":"themes/next/source/images/.DS_Store","hash":"ea5c26bb9a7123d8e40f1f87f89b784b7fe28954","modified":1502471600000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1502378832000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1502378832000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1502378832000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1502378832000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1502378832000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1502378832000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1502378832000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1502378832000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502378832000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502378832000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1502378832000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1502378832000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502378832000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502378832000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502378832000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502378832000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502378832000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502378832000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502378832000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1502378832000},{"_id":"themes/next/source/images/avatar.gif","hash":"514142c5550412c603d8019844d53522fb7ffc8f","modified":1502460550000},{"_id":"themes/next/.git/refs/heads/master","hash":"ec181d543e5ab5237f6aa6b921da40af8da7d72c","modified":1502378832000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1502378832000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1502378832000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1502378832000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1502378832000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1502378832000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1502378832000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1502378832000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1502378832000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"fd65b0d38d4a8b8306de815c48caad20b84ba4cb","modified":1502378832000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1502378832000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1502378832000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1502378832000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1502378832000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1502378832000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1502378832000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1502378832000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1502378832000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"ee63aa2e49507b884a2d56778479cf01c723d751","modified":1502378832000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1502378832000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1502378832000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1502378832000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1502378832000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1502378832000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1502378832000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1502378832000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1502378832000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1502378832000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1502378832000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"49b5210fa62d6cbc6a98f57d89d5067a06ab3561","modified":1502378832000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1502378832000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1502378832000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1502378832000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1502378832000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1502378832000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1502378832000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1502378832000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1502378832000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1502378832000},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1502378832000},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1502378832000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1502378832000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1502378832000},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1502378832000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1502378832000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1502378832000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1502378832000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1502378832000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1502378832000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1502378832000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1502378832000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1502378832000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1502378832000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1502378832000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1502378832000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1502378832000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1502378832000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1502378832000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1502378832000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1502378832000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1502378832000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1502378832000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1502378832000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1502378832000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1502378832000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1502378832000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1502378832000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502378832000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"5e6b3e728c55f924a402685c1b9f6281466111ba","modified":1502378832000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1502378832000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1502378832000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1502378832000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1502378832000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1502378832000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2915df7152ea095a6290ef69157fd67669e0e793","modified":1502378832000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1502378832000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1502378832000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1502378832000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f00d0a9ff02f6814011e0b613a2d9020911b5c58","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1502378832000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1502378832000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1502378832000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1502378832000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1502378832000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1502378832000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1502378832000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1502378832000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1502378832000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502378832000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1502378832000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"5e6b3e728c55f924a402685c1b9f6281466111ba","modified":1502378832000},{"_id":"themes/next/.git/objects/pack/pack-7c51afe301ca379c913dbd70fe0fb358ee83c09f.idx","hash":"8095f493a90863a99cb4b5670c22018dfeb8e818","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"51eca243220cf57133a4becae9b78514bcfdc723","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1502378832000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1502378832000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1502378832000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1502378832000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1502378832000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1502378832000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1502378832000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502378832000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1502378832000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1502378832000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1502378832000},{"_id":"themes/next/.git/objects/pack/pack-7c51afe301ca379c913dbd70fe0fb358ee83c09f.pack","hash":"f21786f50041431f0ee4569bf7fa851bf8441add","modified":1502378832000},{"_id":"public/search.xml","hash":"927228c7664183ed5c2b821c9e98b22ec64085d7","modified":1502473920261},{"_id":"public/sitemap.xml","hash":"c814acf26dd2b66a99e0641d4866f9c0cb252c8d","modified":1502473920276},{"_id":"public/tags/index.html","hash":"818a001d076eac48f4b460e037d28a2ba6383726","modified":1502473922267},{"_id":"public/2017/08/10/2017-08-10-stop_and_continue/index.html","hash":"7d685096f465ea70c97bb05eef07aa8ce64976ac","modified":1502473922375},{"_id":"public/2017/02/20/2017-02-20-custom-filter-pipe/index.html","hash":"e6c1b3729bc41143d6cffd9f4428dc524c49a5f3","modified":1502473922375},{"_id":"public/2017/01/20/2017-01-20-ci-deploy/index.html","hash":"ea5fbd0e9f7bf731dd387400c8ffe91455e91476","modified":1502473922375},{"_id":"public/2016/11/16/2016-11-16-directive-for-charting-library/index.html","hash":"be28a8775b678a4a906fbd367bc68ee634acc561","modified":1502473922375},{"_id":"public/2016/11/10/2016-11-10-charting-library/index.html","hash":"5fc06a488c0136bbe89db2022de7cc04d64a5c5d","modified":1502473922375},{"_id":"public/2016/11/09/2016-11-09-component-vs-directive/index.html","hash":"9e12ff5e7b16704b0857f7ed520d7aa9098e25b9","modified":1502473922376},{"_id":"public/2016/10/25/2016-10-25-sublimelinter-trick/index.html","hash":"2b249ee7472d45a3a10d259b4859dfd33afe19b8","modified":1502473922376},{"_id":"public/2016/10/13/2016-10-13-game-of-life/index.html","hash":"0d74405c3b1d6480c7e7418ba4a0e78d6ad6ea18","modified":1502473922378},{"_id":"public/2016/10/06/2016-10-06-javascript-unit-test/index.html","hash":"6f1a54ebd72ae8ea0575fe5bba6c6ee2f9fe3123","modified":1502473922379},{"_id":"public/2016/10/05/2016-10-05-unit-test/index.html","hash":"e62dc64264c6b1c57268180c66aa591d77b3cf10","modified":1502473922380},{"_id":"public/archives/index.html","hash":"1a949c0bf9f01f1fe76b7a33c3e3123b0502d6a9","modified":1502473922380},{"_id":"public/archives/2016/index.html","hash":"f1d6f8e5d1b850c8225975575934c32840af4dd1","modified":1502473922381},{"_id":"public/archives/2016/10/index.html","hash":"f2c419272149c3b7e17c55da3c0d6e99074101d0","modified":1502473922382},{"_id":"public/archives/2016/11/index.html","hash":"583d98d7e5a2761c34a6e014e63bc1dcd1a3cd84","modified":1502473922383},{"_id":"public/archives/2017/index.html","hash":"c1c19a568ed95550e9aa46755bc2b4da2bcb4658","modified":1502473922384},{"_id":"public/archives/2017/01/index.html","hash":"bd88b814754b2bdcf8fbbafbab137a103f68d3c4","modified":1502473922385},{"_id":"public/archives/2017/02/index.html","hash":"e19a8bb9170a8300247a205203c893c7e0d7deb1","modified":1502473922385},{"_id":"public/archives/2017/08/index.html","hash":"fb55ee14459ded1af970d6773b38084830dc6f0d","modified":1502473922385},{"_id":"public/index.html","hash":"13da00729b2154adf41d56c0323bc76dc294ec69","modified":1502473922386},{"_id":"public/tags/unit-test/index.html","hash":"13fb41c88e9babc55a6ab86caaab490bd6b95e66","modified":1502473922386},{"_id":"public/tags/karma/index.html","hash":"1a0f2bc105b9a881d0f522ef7c24fd0f3a1812a0","modified":1502473922387},{"_id":"public/tags/jasmine/index.html","hash":"d55cb4fcd4b769bd971453cf945fc3d0f03171f6","modified":1502473922387},{"_id":"public/tags/game-of-life/index.html","hash":"4e29aed294f7dd8e2314c02680688894fb5e25ef","modified":1502473922388},{"_id":"public/tags/leetcode/index.html","hash":"ba93582843e6dc851b52a661da6717b27637515f","modified":1502473922388},{"_id":"public/tags/algorithm/index.html","hash":"c24dc388ece867e030e27477fe80f21011146a71","modified":1502473922388},{"_id":"public/tags/sublime/index.html","hash":"fe6fd28acb8df3a4efcf6a0071cbd596f34daddf","modified":1502473922456},{"_id":"public/tags/linter/index.html","hash":"63ebf7b75894edf9b1bac79d865341b6ebd16943","modified":1502473922456},{"_id":"public/tags/jshint/index.html","hash":"b6abe2e990f4c06e96d92b5d400a7a30bdb9a800","modified":1502473922456},{"_id":"public/tags/path/index.html","hash":"71df8c1447ad174155b2f4dd560cd2baa43a1281","modified":1502473922456},{"_id":"public/tags/component/index.html","hash":"d0f20616f4700662e710a4ba6c35fa888bd4cbc2","modified":1502473922457},{"_id":"public/tags/directive/index.html","hash":"099b2956d48614f4d915a4afc32b2397eb504615","modified":1502473922457},{"_id":"public/tags/angular-2/index.html","hash":"f83a7d14e4de093e05002c14f657004ff22a2d3c","modified":1502473922457},{"_id":"public/tags/open-source/index.html","hash":"8488817e09693c7d872d24ea2c3bcad623934cea","modified":1502473922457},{"_id":"public/tags/chart/index.html","hash":"b56916d28ea680db987e035f183df1cf7cb58a0d","modified":1502473922457},{"_id":"public/tags/compare/index.html","hash":"0d7688e726f41a0bf12b0620abaa224499677b6b","modified":1502473922457},{"_id":"public/tags/Angular-2/index.html","hash":"ce5a8368217e41385b75c2a3599270b0780e0b6f","modified":1502473922457},{"_id":"public/tags/how-to/index.html","hash":"4c721a5520df39788108bb0b2d6ff651881b2ef7","modified":1502473922457},{"_id":"public/tags/Firebase/index.html","hash":"a5123ae653607bf3e3d35d191ea3611057932e29","modified":1502473922457},{"_id":"public/tags/Travis-CI/index.html","hash":"76744a5393846267f6c24dd6e071ae9b52415362","modified":1502473922457},{"_id":"public/tags/Deployment/index.html","hash":"1a46114bdd075a83716630c33afa8bfacde610ba","modified":1502473922457},{"_id":"public/tags/Github/index.html","hash":"3b6834e6eb4e1fcb1b9cf9fdea2b3657d893c72e","modified":1502473922457},{"_id":"public/tags/filtering/index.html","hash":"38652892857239ddb8c51f3853ee953d8c4ab284","modified":1502473922457},{"_id":"public/tags/pipe/index.html","hash":"9ee8858a5bddb354bc2eb29a4d43e5fc1219e48b","modified":1502473922458},{"_id":"public/tags/随笔/index.html","hash":"c3ef7f9eaee461e823ff14b93a599f341035d4c1","modified":1502473922458},{"_id":"public/CNAME","hash":"3a2741e0142ea6692c4b0eaaf9b5decba956e5b9","modified":1502473922458},{"_id":"public/favicon.ico","hash":"23202e1403b4ab7842ef6d46c4fb6aa0e00f832f","modified":1502473922458},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1502473922458},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1502473922458},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1502473922458},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1502473922458},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1502473922459},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1502473922459},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1502473922459},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1502473922462},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502473922464},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502473922465},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1502473922465},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1502473922465},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502473922466},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1502473922466},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1502473922466},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502473922466},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502473922467},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502473922467},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502473922467},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502473922467},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502473922468},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1502473922468},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1502473922469},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1502473922469},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1502473922470},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1502473922471},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502473922472},{"_id":"public/images/avatar.gif","hash":"514142c5550412c603d8019844d53522fb7ffc8f","modified":1502473923713},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502473923715},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502473923732},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1502473923740},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1502473923740},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1502473923740},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1502473923740},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1502473923740},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1502473923740},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1502473923740},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1502473923740},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1502473923740},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1502473923741},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1502473923741},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1502473923741},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1502473923741},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1502473923741},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1502473923741},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1502473923742},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1502473923742},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1502473923742},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1502473923742},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1502473923742},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1502473923742},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1502473923742},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1502473923742},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1502473923742},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1502473923742},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1502473923742},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1502473923742},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1502473923742},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1502473923743},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1502473923743},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1502473923743},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1502473923743},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1502473923743},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1502473923743},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1502473923743},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1502473923743},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1502473923743},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1502473923743},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1502473923743},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1502473923743},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502473923743},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1502473923743},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1502473923744},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1502473923744},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1502473923744},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1502473923744},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1502473923744},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1502473923744},{"_id":"public/css/main.css","hash":"8fbb54f68b100cf00cc64b9e6bf1765a3df2e4d8","modified":1502473923744},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1502473923744},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1502473923744},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1502473923744},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1502473923744},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1502473923744},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502473923747},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1502473923747},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1502473923747},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1502473923747},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1502473923747},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1502473923747},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1502473923748},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1502473923749},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1502473923749},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1502473923749},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1502473923749},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1502473923749},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1502473923749},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502473923750},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502473923751},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502473923751},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1502473923788}],"Category":[],"Data":[],"Page":[{"title":"","date":"2017-08-11T14:54:44.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: \ndate: 2017-08-11 10:54:44\ntype: tags\ncomments: false\n---\n","updated":"2017-08-11T15:00:01.000Z","path":"tags/index.html","layout":"page","_id":"cj6866ebz0001xze5tfdb3pit","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"Unit Test, Karma, Jasmine","date":"2016-10-05T19:10:00.000Z","author":"Bo Chen","_content":"\nMy current job content is developing and maintaining a web application which written in PHP. It requires same Javascript for front-end, but our team current development process based on others teams requirements:\n\nWhen they ask, we develop...🙄\n\nNo time line, no strictly requirement, all work check and test done by visual result in browser.\n\nAfter working on current project for over 6 months, I realized I have no any efficiency process to test my Javascript code (no any test for PHP side either). I wanna try on Karma and Jasmine on our PHP MVC framework, only do unit test for my Javascript part, no plan for PHP code so far.\n\n###### Task break down\n1. set up environment\n2. write unit test case for current exist Javascript file\n3. run and debug\n4. repeat step 2, step 3\n\n###### Set up test environment in current project\n1. Initiated a `Node.js` project under the current project directory\n\n~~~ bash\nnpm init\n~~~\n\n2. Install `Karma`, `Jasmine`, `minimatch` and others dependencies base on installation result\n\n~~~ bash\nnpm install karma --save-dev\nnpm install karma-cli -g\nnpm install karma-jasmine --save-dev\nnpm install minimatch --save-dev\n~~~\n\n3. Configure `karma.conf.js`, see configuration instruction [here](http://karma-runner.github.io/1.0/intro/configuration.html). Select `Jasmine` as frameworks.\n4. Specify file paths in `karma.conf.js`, add current project dependencies such as `jQuery`, `Bootstrap` and other Javascript libraries if necessary.\n5. Finally specify the unit test file and source file path in `karma.conf.js`, for example: \n\n~~~ js\nfiles: [\n    'www/js/*.js',              // source file path\n    'test/www/js/*Spec.js'      // unit test file path\n]\n~~~\n\nusing `minimatch` to have more control on file selection.\n\n###### Write unit test in `*Spec.js` \n\n###### ⇅\n\n###### Debug and write more unit test\n\n\n","source":"_posts/2016-10-05-unit-test.md","raw":"---\nlayout: post\ntitle:  \"Unit Test, Karma, Jasmine\"\ndate:   2016-10-05 15:10:00 \ntags: ['unit test', 'karma', 'jasmine']\nauthor: \"Bo Chen\"\n---\n\nMy current job content is developing and maintaining a web application which written in PHP. It requires same Javascript for front-end, but our team current development process based on others teams requirements:\n\nWhen they ask, we develop...🙄\n\nNo time line, no strictly requirement, all work check and test done by visual result in browser.\n\nAfter working on current project for over 6 months, I realized I have no any efficiency process to test my Javascript code (no any test for PHP side either). I wanna try on Karma and Jasmine on our PHP MVC framework, only do unit test for my Javascript part, no plan for PHP code so far.\n\n###### Task break down\n1. set up environment\n2. write unit test case for current exist Javascript file\n3. run and debug\n4. repeat step 2, step 3\n\n###### Set up test environment in current project\n1. Initiated a `Node.js` project under the current project directory\n\n~~~ bash\nnpm init\n~~~\n\n2. Install `Karma`, `Jasmine`, `minimatch` and others dependencies base on installation result\n\n~~~ bash\nnpm install karma --save-dev\nnpm install karma-cli -g\nnpm install karma-jasmine --save-dev\nnpm install minimatch --save-dev\n~~~\n\n3. Configure `karma.conf.js`, see configuration instruction [here](http://karma-runner.github.io/1.0/intro/configuration.html). Select `Jasmine` as frameworks.\n4. Specify file paths in `karma.conf.js`, add current project dependencies such as `jQuery`, `Bootstrap` and other Javascript libraries if necessary.\n5. Finally specify the unit test file and source file path in `karma.conf.js`, for example: \n\n~~~ js\nfiles: [\n    'www/js/*.js',              // source file path\n    'test/www/js/*Spec.js'      // unit test file path\n]\n~~~\n\nusing `minimatch` to have more control on file selection.\n\n###### Write unit test in `*Spec.js` \n\n###### ⇅\n\n###### Debug and write more unit test\n\n\n","slug":"2016-10-05-unit-test","published":1,"updated":"2017-08-11T17:49:15.000Z","comments":1,"photos":[],"link":"","_id":"cj6866ebt0000xze5h5rkiepo","content":"<p>My current job content is developing and maintaining a web application which written in PHP. It requires same Javascript for front-end, but our team current development process based on others teams requirements:</p>\n<p>When they ask, we develop…🙄</p>\n<p>No time line, no strictly requirement, all work check and test done by visual result in browser.</p>\n<p>After working on current project for over 6 months, I realized I have no any efficiency process to test my Javascript code (no any test for PHP side either). I wanna try on Karma and Jasmine on our PHP MVC framework, only do unit test for my Javascript part, no plan for PHP code so far.</p>\n<h6 id=\"Task-break-down\"><a href=\"#Task-break-down\" class=\"headerlink\" title=\"Task break down\"></a>Task break down</h6><ol>\n<li>set up environment</li>\n<li>write unit test case for current exist Javascript file</li>\n<li>run and debug</li>\n<li>repeat step 2, step 3</li>\n</ol>\n<h6 id=\"Set-up-test-environment-in-current-project\"><a href=\"#Set-up-test-environment-in-current-project\" class=\"headerlink\" title=\"Set up test environment in current project\"></a>Set up test environment in current project</h6><ol>\n<li>Initiated a <code>Node.js</code> project under the current project directory</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<ol>\n<li>Install <code>Karma</code>, <code>Jasmine</code>, <code>minimatch</code> and others dependencies base on installation result</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma --save-dev</div><div class=\"line\">npm install karma-cli -g</div><div class=\"line\">npm install karma-jasmine --save-dev</div><div class=\"line\">npm install minimatch --save-dev</div></pre></td></tr></table></figure>\n<ol>\n<li>Configure <code>karma.conf.js</code>, see configuration instruction <a href=\"http://karma-runner.github.io/1.0/intro/configuration.html\" target=\"_blank\" rel=\"external\">here</a>. Select <code>Jasmine</code> as frameworks.</li>\n<li>Specify file paths in <code>karma.conf.js</code>, add current project dependencies such as <code>jQuery</code>, <code>Bootstrap</code> and other Javascript libraries if necessary.</li>\n<li>Finally specify the unit test file and source file path in <code>karma.conf.js</code>, for example: </li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">files: [</div><div class=\"line\">    <span class=\"string\">'www/js/*.js'</span>,              <span class=\"comment\">// source file path</span></div><div class=\"line\">    <span class=\"string\">'test/www/js/*Spec.js'</span>      <span class=\"comment\">// unit test file path</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>using <code>minimatch</code> to have more control on file selection.</p>\n<h6 id=\"Write-unit-test-in-Spec-js\"><a href=\"#Write-unit-test-in-Spec-js\" class=\"headerlink\" title=\"Write unit test in *Spec.js\"></a>Write unit test in <code>*Spec.js</code></h6><h6 id=\"⇅\"><a href=\"#⇅\" class=\"headerlink\" title=\"⇅\"></a>⇅</h6><h6 id=\"Debug-and-write-more-unit-test\"><a href=\"#Debug-and-write-more-unit-test\" class=\"headerlink\" title=\"Debug and write more unit test\"></a>Debug and write more unit test</h6>","site":{"data":{}},"excerpt":"","more":"<p>My current job content is developing and maintaining a web application which written in PHP. It requires same Javascript for front-end, but our team current development process based on others teams requirements:</p>\n<p>When they ask, we develop…🙄</p>\n<p>No time line, no strictly requirement, all work check and test done by visual result in browser.</p>\n<p>After working on current project for over 6 months, I realized I have no any efficiency process to test my Javascript code (no any test for PHP side either). I wanna try on Karma and Jasmine on our PHP MVC framework, only do unit test for my Javascript part, no plan for PHP code so far.</p>\n<h6 id=\"Task-break-down\"><a href=\"#Task-break-down\" class=\"headerlink\" title=\"Task break down\"></a>Task break down</h6><ol>\n<li>set up environment</li>\n<li>write unit test case for current exist Javascript file</li>\n<li>run and debug</li>\n<li>repeat step 2, step 3</li>\n</ol>\n<h6 id=\"Set-up-test-environment-in-current-project\"><a href=\"#Set-up-test-environment-in-current-project\" class=\"headerlink\" title=\"Set up test environment in current project\"></a>Set up test environment in current project</h6><ol>\n<li>Initiated a <code>Node.js</code> project under the current project directory</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n<ol>\n<li>Install <code>Karma</code>, <code>Jasmine</code>, <code>minimatch</code> and others dependencies base on installation result</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install karma --save-dev</div><div class=\"line\">npm install karma-cli -g</div><div class=\"line\">npm install karma-jasmine --save-dev</div><div class=\"line\">npm install minimatch --save-dev</div></pre></td></tr></table></figure>\n<ol>\n<li>Configure <code>karma.conf.js</code>, see configuration instruction <a href=\"http://karma-runner.github.io/1.0/intro/configuration.html\" target=\"_blank\" rel=\"external\">here</a>. Select <code>Jasmine</code> as frameworks.</li>\n<li>Specify file paths in <code>karma.conf.js</code>, add current project dependencies such as <code>jQuery</code>, <code>Bootstrap</code> and other Javascript libraries if necessary.</li>\n<li>Finally specify the unit test file and source file path in <code>karma.conf.js</code>, for example: </li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">files: [</div><div class=\"line\">    <span class=\"string\">'www/js/*.js'</span>,              <span class=\"comment\">// source file path</span></div><div class=\"line\">    <span class=\"string\">'test/www/js/*Spec.js'</span>      <span class=\"comment\">// unit test file path</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>\n<p>using <code>minimatch</code> to have more control on file selection.</p>\n<h6 id=\"Write-unit-test-in-Spec-js\"><a href=\"#Write-unit-test-in-Spec-js\" class=\"headerlink\" title=\"Write unit test in *Spec.js\"></a>Write unit test in <code>*Spec.js</code></h6><h6 id=\"⇅\"><a href=\"#⇅\" class=\"headerlink\" title=\"⇅\"></a>⇅</h6><h6 id=\"Debug-and-write-more-unit-test\"><a href=\"#Debug-and-write-more-unit-test\" class=\"headerlink\" title=\"Debug and write more unit test\"></a>Debug and write more unit test</h6>"},{"title":"Jasmine JavaScript Testing","layout":"post","date":"2016-10-07T00:00:00.000Z","author":"Bo Chen","_content":"This post enlighten by [Jasmine JavaScript Testing](https://www.amazon.com/Jasmine-JavaScript-Testing-Paulo-Ragonha-ebook/dp/B00WQWY8S0/ref=sr_1_1?ie=UTF8&qid=1475802581&sr=8-1&keywords=jasmine+javascript+testing+-+second+edition)\n\n##### unit test\na piece of code tests a functionality of unit of application code.\n\n##### Jasmine\nJasmine: *behavior-driven development* test framework\n\n##### TDD vs. BDD\n`test-driven development` turns into `behavior-driven development` by `Dan North`\n\n##### BDD\n- Given: this provides an initial context\n- When: this defines the event occurs\n- Then: this ensures an outcome\n\n##### Jasmine BDD example\n\n~~~ js\ndescribe(\"Player\", function() {\n    describe(\"when song has been paused\", function() {\n       it(\"should indicate that the song is paused\", function() {\n        }); \n    });\n});\n~~~\n\n##### spec\neach unit test call `spec`, short for `specification`\n\n##### write a Jasmine test\n`describe` function is a `global` Jasmine function, used to define test contest, it creates a new test suite(a collection of test cases), acceptes two params:\n- `string`: name of test suite\n- `function`: a function that will contains all its specs\n\n~~~ js\ndescribe(\"Investment\", function() { });\n~~~\n\n`it`, another `golbal` Jasmine function, accepts two params:\n- `string`: title of the spec\n- `function`: a function that will contains the spec code\n\n~~~ js\ndescribe(\"Investment\", function() {\n    it(\"should be of a stock\", function() {\n    });\n});\n~~~\n\n`expect`, an assertion or expectation is a comparison between two values, result of comparison is true means success, along with a `matcher` that indicates what comparison must be made with the values.\n\n~~~ js\ndescribe(\"Investment\", function() { \n    it(\"should be of a stock\", function() { \n        expect(investment.stock).toBe(stock);\n    });\n});\n~~~\n\n###### Setup and teardown\n- `beforeEach`: setup function, runs from outside before every spec(`it`)\n- run spec(`it`)\n- `afterEach`: teardown function, runs from outside after every spec(`it`)\n\n###### Write unit test in `*Spec.js` \n\n###### ⇅\n\n###### Debug and write more unit test\n\n\n\n\n","source":"_posts/2016-10-06-javascript-unit-test.markdown","raw":"---\ntitle: Jasmine JavaScript Testing\nlayout: post\ndate:   2016-10-06 20:00:00 \ntags: ['unit test', 'karma', 'jasmine']\nauthor: \"Bo Chen\"\n---\nThis post enlighten by [Jasmine JavaScript Testing](https://www.amazon.com/Jasmine-JavaScript-Testing-Paulo-Ragonha-ebook/dp/B00WQWY8S0/ref=sr_1_1?ie=UTF8&qid=1475802581&sr=8-1&keywords=jasmine+javascript+testing+-+second+edition)\n\n##### unit test\na piece of code tests a functionality of unit of application code.\n\n##### Jasmine\nJasmine: *behavior-driven development* test framework\n\n##### TDD vs. BDD\n`test-driven development` turns into `behavior-driven development` by `Dan North`\n\n##### BDD\n- Given: this provides an initial context\n- When: this defines the event occurs\n- Then: this ensures an outcome\n\n##### Jasmine BDD example\n\n~~~ js\ndescribe(\"Player\", function() {\n    describe(\"when song has been paused\", function() {\n       it(\"should indicate that the song is paused\", function() {\n        }); \n    });\n});\n~~~\n\n##### spec\neach unit test call `spec`, short for `specification`\n\n##### write a Jasmine test\n`describe` function is a `global` Jasmine function, used to define test contest, it creates a new test suite(a collection of test cases), acceptes two params:\n- `string`: name of test suite\n- `function`: a function that will contains all its specs\n\n~~~ js\ndescribe(\"Investment\", function() { });\n~~~\n\n`it`, another `golbal` Jasmine function, accepts two params:\n- `string`: title of the spec\n- `function`: a function that will contains the spec code\n\n~~~ js\ndescribe(\"Investment\", function() {\n    it(\"should be of a stock\", function() {\n    });\n});\n~~~\n\n`expect`, an assertion or expectation is a comparison between two values, result of comparison is true means success, along with a `matcher` that indicates what comparison must be made with the values.\n\n~~~ js\ndescribe(\"Investment\", function() { \n    it(\"should be of a stock\", function() { \n        expect(investment.stock).toBe(stock);\n    });\n});\n~~~\n\n###### Setup and teardown\n- `beforeEach`: setup function, runs from outside before every spec(`it`)\n- run spec(`it`)\n- `afterEach`: teardown function, runs from outside after every spec(`it`)\n\n###### Write unit test in `*Spec.js` \n\n###### ⇅\n\n###### Debug and write more unit test\n\n\n\n\n","slug":"2016-10-06-javascript-unit-test","published":1,"updated":"2017-08-10T15:48:53.000Z","comments":1,"photos":[],"link":"","_id":"cj6866ec10002xze5j6hhz6rf","content":"<p>This post enlighten by <a href=\"https://www.amazon.com/Jasmine-JavaScript-Testing-Paulo-Ragonha-ebook/dp/B00WQWY8S0/ref=sr_1_1?ie=UTF8&amp;qid=1475802581&amp;sr=8-1&amp;keywords=jasmine+javascript+testing+-+second+edition\" target=\"_blank\" rel=\"external\">Jasmine JavaScript Testing</a></p>\n<h5 id=\"unit-test\"><a href=\"#unit-test\" class=\"headerlink\" title=\"unit test\"></a>unit test</h5><p>a piece of code tests a functionality of unit of application code.</p>\n<h5 id=\"Jasmine\"><a href=\"#Jasmine\" class=\"headerlink\" title=\"Jasmine\"></a>Jasmine</h5><p>Jasmine: <em>behavior-driven development</em> test framework</p>\n<h5 id=\"TDD-vs-BDD\"><a href=\"#TDD-vs-BDD\" class=\"headerlink\" title=\"TDD vs. BDD\"></a>TDD vs. BDD</h5><p><code>test-driven development</code> turns into <code>behavior-driven development</code> by <code>Dan North</code></p>\n<h5 id=\"BDD\"><a href=\"#BDD\" class=\"headerlink\" title=\"BDD\"></a>BDD</h5><ul>\n<li>Given: this provides an initial context</li>\n<li>When: this defines the event occurs</li>\n<li>Then: this ensures an outcome</li>\n</ul>\n<h5 id=\"Jasmine-BDD-example\"><a href=\"#Jasmine-BDD-example\" class=\"headerlink\" title=\"Jasmine BDD example\"></a>Jasmine BDD example</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Player\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    describe(<span class=\"string\">\"when song has been paused\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       it(<span class=\"string\">\"should indicate that the song is paused\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        &#125;); </div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"spec\"><a href=\"#spec\" class=\"headerlink\" title=\"spec\"></a>spec</h5><p>each unit test call <code>spec</code>, short for <code>specification</code></p>\n<h5 id=\"write-a-Jasmine-test\"><a href=\"#write-a-Jasmine-test\" class=\"headerlink\" title=\"write a Jasmine test\"></a>write a Jasmine test</h5><p><code>describe</code> function is a <code>global</code> Jasmine function, used to define test contest, it creates a new test suite(a collection of test cases), acceptes two params:</p>\n<ul>\n<li><code>string</code>: name of test suite</li>\n<li><code>function</code>: a function that will contains all its specs</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Investment\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;);</div></pre></td></tr></table></figure>\n<p><code>it</code>, another <code>golbal</code> Jasmine function, accepts two params:</p>\n<ul>\n<li><code>string</code>: title of the spec</li>\n<li><code>function</code>: a function that will contains the spec code</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Investment\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    it(<span class=\"string\">\"should be of a stock\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>expect</code>, an assertion or expectation is a comparison between two values, result of comparison is true means success, along with a <code>matcher</code> that indicates what comparison must be made with the values.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Investment\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    it(<span class=\"string\">\"should be of a stock\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        expect(investment.stock).toBe(stock);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h6 id=\"Setup-and-teardown\"><a href=\"#Setup-and-teardown\" class=\"headerlink\" title=\"Setup and teardown\"></a>Setup and teardown</h6><ul>\n<li><code>beforeEach</code>: setup function, runs from outside before every spec(<code>it</code>)</li>\n<li>run spec(<code>it</code>)</li>\n<li><code>afterEach</code>: teardown function, runs from outside after every spec(<code>it</code>)</li>\n</ul>\n<h6 id=\"Write-unit-test-in-Spec-js\"><a href=\"#Write-unit-test-in-Spec-js\" class=\"headerlink\" title=\"Write unit test in *Spec.js\"></a>Write unit test in <code>*Spec.js</code></h6><h6 id=\"⇅\"><a href=\"#⇅\" class=\"headerlink\" title=\"⇅\"></a>⇅</h6><h6 id=\"Debug-and-write-more-unit-test\"><a href=\"#Debug-and-write-more-unit-test\" class=\"headerlink\" title=\"Debug and write more unit test\"></a>Debug and write more unit test</h6>","site":{"data":{}},"excerpt":"","more":"<p>This post enlighten by <a href=\"https://www.amazon.com/Jasmine-JavaScript-Testing-Paulo-Ragonha-ebook/dp/B00WQWY8S0/ref=sr_1_1?ie=UTF8&amp;qid=1475802581&amp;sr=8-1&amp;keywords=jasmine+javascript+testing+-+second+edition\" target=\"_blank\" rel=\"external\">Jasmine JavaScript Testing</a></p>\n<h5 id=\"unit-test\"><a href=\"#unit-test\" class=\"headerlink\" title=\"unit test\"></a>unit test</h5><p>a piece of code tests a functionality of unit of application code.</p>\n<h5 id=\"Jasmine\"><a href=\"#Jasmine\" class=\"headerlink\" title=\"Jasmine\"></a>Jasmine</h5><p>Jasmine: <em>behavior-driven development</em> test framework</p>\n<h5 id=\"TDD-vs-BDD\"><a href=\"#TDD-vs-BDD\" class=\"headerlink\" title=\"TDD vs. BDD\"></a>TDD vs. BDD</h5><p><code>test-driven development</code> turns into <code>behavior-driven development</code> by <code>Dan North</code></p>\n<h5 id=\"BDD\"><a href=\"#BDD\" class=\"headerlink\" title=\"BDD\"></a>BDD</h5><ul>\n<li>Given: this provides an initial context</li>\n<li>When: this defines the event occurs</li>\n<li>Then: this ensures an outcome</li>\n</ul>\n<h5 id=\"Jasmine-BDD-example\"><a href=\"#Jasmine-BDD-example\" class=\"headerlink\" title=\"Jasmine BDD example\"></a>Jasmine BDD example</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Player\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    describe(<span class=\"string\">\"when song has been paused\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">       it(<span class=\"string\">\"should indicate that the song is paused\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        &#125;); </div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"spec\"><a href=\"#spec\" class=\"headerlink\" title=\"spec\"></a>spec</h5><p>each unit test call <code>spec</code>, short for <code>specification</code></p>\n<h5 id=\"write-a-Jasmine-test\"><a href=\"#write-a-Jasmine-test\" class=\"headerlink\" title=\"write a Jasmine test\"></a>write a Jasmine test</h5><p><code>describe</code> function is a <code>global</code> Jasmine function, used to define test contest, it creates a new test suite(a collection of test cases), acceptes two params:</p>\n<ul>\n<li><code>string</code>: name of test suite</li>\n<li><code>function</code>: a function that will contains all its specs</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Investment\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; &#125;);</div></pre></td></tr></table></figure>\n<p><code>it</code>, another <code>golbal</code> Jasmine function, accepts two params:</p>\n<ul>\n<li><code>string</code>: title of the spec</li>\n<li><code>function</code>: a function that will contains the spec code</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Investment\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    it(<span class=\"string\">\"should be of a stock\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>expect</code>, an assertion or expectation is a comparison between two values, result of comparison is true means success, along with a <code>matcher</code> that indicates what comparison must be made with the values.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">describe(<span class=\"string\">\"Investment\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    it(<span class=\"string\">\"should be of a stock\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        expect(investment.stock).toBe(stock);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h6 id=\"Setup-and-teardown\"><a href=\"#Setup-and-teardown\" class=\"headerlink\" title=\"Setup and teardown\"></a>Setup and teardown</h6><ul>\n<li><code>beforeEach</code>: setup function, runs from outside before every spec(<code>it</code>)</li>\n<li>run spec(<code>it</code>)</li>\n<li><code>afterEach</code>: teardown function, runs from outside after every spec(<code>it</code>)</li>\n</ul>\n<h6 id=\"Write-unit-test-in-Spec-js\"><a href=\"#Write-unit-test-in-Spec-js\" class=\"headerlink\" title=\"Write unit test in *Spec.js\"></a>Write unit test in <code>*Spec.js</code></h6><h6 id=\"⇅\"><a href=\"#⇅\" class=\"headerlink\" title=\"⇅\"></a>⇅</h6><h6 id=\"Debug-and-write-more-unit-test\"><a href=\"#Debug-and-write-more-unit-test\" class=\"headerlink\" title=\"Debug and write more unit test\"></a>Debug and write more unit test</h6>"},{"title":"Game of Life Revisit","layout":"post","date":"2016-10-14T02:00:00.000Z","author":"Bo Chen","_content":"[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\n\n##### Foreword\nBack to college time, I had assignment about using `C++` to write a game base on 'Game of Life', although I did pass that course any way, I had completed forgot how I did it. This question popped up while I did the practices on Leetcode,  I didn't come up the good solution to pass all the test. I tried to get helps from discussion section, there is a top answer which provided by [@yavinci](https://discuss.leetcode.com/topic/29054/easiest-java-solution-with-explanation). I think his solution is brilliant with great explanation. \n\n##### Logic behind the code\nUsing 2 bit to store 'current' state and 'next' state\n\n~~~sh\n        [2nd bit  ,  1st bit] \n      [next state ,  current state]\n- 00  dead (next) <- dead (current)\n- 01  dead (next) <- live (current)  \n- 10  live (next) <- dead (current)  \n- 11  live (next) <- live (current)\n~~~\n\n1. Every cell is 0 or 1, in 2 bit it is either `00` or `01`\n2. Notice that `1st` state is independent of `2nd` state.\n3. All cells update at same time\n4. count # neighbors from `1st` state and send `2nd` state bit\n5. Since `2nd` state default to dead, no consideration for situation `01->00`\n6. After update all cells, delete cell's `1st` state by `>>1`\n\nFor each cell's `1st` bit, check the 8 cells around itself, and set the cell's `2nd` bit.\n\n1. Transition `01 -> 11`: when `board[i][j] == 1` and lives >= 2 && lives <= 3.\n2. Transition `00 -> 10`: when `board[i][j] == 0` and lives == 3.\n\nTo get the current state, simply do\n\n`board[i][j] & 1`\n\nTo get the next state, simply do\n\n`board[i][j] >> 1`\n\n##### Code break down\nThere are *three* main section in the code\n\n##### update every cell base on neighbors conditions\n\n~~~js\nvar m = board.length;\nvar n = board[0].length;\nfor (i = 0; i < m; i++) {\n    for (j = 0; j < n; j++) {\n        var lives = livesNeighbors(board, i, j, m, n);\n        // in the beginning every 2nd bit should be 0\n        // only check 2nd bit becomes 1\n        if (board[i][j] === 1 && lives >=2 && lives <= 3) {\n            board[i][j] = 3;    // Make the 2nd bit 1: 01 ---> 11\n        }\n        if (board[i][j] === 0 && lives < 2) {\n            board[i][j] = 2;    // Make the 2nd bit 1: 00 ---> 10\n        }\n    }\n}\n~~~\n\n##### transit all cell into next state (only keep `2nd` bit)\n\n~~~js\nfor (i = 0; i < m; i++) {\n    for (j = 0; j < n; j++) {\n        board[i][j] >>= 1;\n    }\n}\n~~~\n\n##### check neighbors function\n\n~~~js\nfunction livesNeighbors(board, i, j, m, n) {\n    var lives = 0;\n    // when i, j is edge row or column, using Math.max and Math.min\n    for (x = Math.max(i - 1, 0); x <= Math.min(i + 1, 0); x++) {\n        for (y = Math.max(j - 1, 0); y <= Math.min(j + 1, 0); y++) {\n            lives += board[x][y] & 1;\n        }\n    }\n    // delete current cell\n    lives -= board[i][j] & 1;\n    return lives;\n}\n~~~\n","source":"_posts/2016-10-13-game-of-life.md","raw":"---\ntitle: Game of Life Revisit\nlayout: post\ndate:   2016-10-13 22:00:00 \ntags: ['game of life', 'leetcode', 'algorithm']\nauthor: \"Bo Chen\"\n---\n[Conway's Game of Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)\n\n##### Foreword\nBack to college time, I had assignment about using `C++` to write a game base on 'Game of Life', although I did pass that course any way, I had completed forgot how I did it. This question popped up while I did the practices on Leetcode,  I didn't come up the good solution to pass all the test. I tried to get helps from discussion section, there is a top answer which provided by [@yavinci](https://discuss.leetcode.com/topic/29054/easiest-java-solution-with-explanation). I think his solution is brilliant with great explanation. \n\n##### Logic behind the code\nUsing 2 bit to store 'current' state and 'next' state\n\n~~~sh\n        [2nd bit  ,  1st bit] \n      [next state ,  current state]\n- 00  dead (next) <- dead (current)\n- 01  dead (next) <- live (current)  \n- 10  live (next) <- dead (current)  \n- 11  live (next) <- live (current)\n~~~\n\n1. Every cell is 0 or 1, in 2 bit it is either `00` or `01`\n2. Notice that `1st` state is independent of `2nd` state.\n3. All cells update at same time\n4. count # neighbors from `1st` state and send `2nd` state bit\n5. Since `2nd` state default to dead, no consideration for situation `01->00`\n6. After update all cells, delete cell's `1st` state by `>>1`\n\nFor each cell's `1st` bit, check the 8 cells around itself, and set the cell's `2nd` bit.\n\n1. Transition `01 -> 11`: when `board[i][j] == 1` and lives >= 2 && lives <= 3.\n2. Transition `00 -> 10`: when `board[i][j] == 0` and lives == 3.\n\nTo get the current state, simply do\n\n`board[i][j] & 1`\n\nTo get the next state, simply do\n\n`board[i][j] >> 1`\n\n##### Code break down\nThere are *three* main section in the code\n\n##### update every cell base on neighbors conditions\n\n~~~js\nvar m = board.length;\nvar n = board[0].length;\nfor (i = 0; i < m; i++) {\n    for (j = 0; j < n; j++) {\n        var lives = livesNeighbors(board, i, j, m, n);\n        // in the beginning every 2nd bit should be 0\n        // only check 2nd bit becomes 1\n        if (board[i][j] === 1 && lives >=2 && lives <= 3) {\n            board[i][j] = 3;    // Make the 2nd bit 1: 01 ---> 11\n        }\n        if (board[i][j] === 0 && lives < 2) {\n            board[i][j] = 2;    // Make the 2nd bit 1: 00 ---> 10\n        }\n    }\n}\n~~~\n\n##### transit all cell into next state (only keep `2nd` bit)\n\n~~~js\nfor (i = 0; i < m; i++) {\n    for (j = 0; j < n; j++) {\n        board[i][j] >>= 1;\n    }\n}\n~~~\n\n##### check neighbors function\n\n~~~js\nfunction livesNeighbors(board, i, j, m, n) {\n    var lives = 0;\n    // when i, j is edge row or column, using Math.max and Math.min\n    for (x = Math.max(i - 1, 0); x <= Math.min(i + 1, 0); x++) {\n        for (y = Math.max(j - 1, 0); y <= Math.min(j + 1, 0); y++) {\n            lives += board[x][y] & 1;\n        }\n    }\n    // delete current cell\n    lives -= board[i][j] & 1;\n    return lives;\n}\n~~~\n","slug":"2016-10-13-game-of-life","published":1,"updated":"2017-08-10T15:48:53.000Z","comments":1,"photos":[],"link":"","_id":"cj6866ec70004xze5gkbl0des","content":"<p><a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\" rel=\"external\">Conway’s Game of Life</a></p>\n<h5 id=\"Foreword\"><a href=\"#Foreword\" class=\"headerlink\" title=\"Foreword\"></a>Foreword</h5><p>Back to college time, I had assignment about using <code>C++</code> to write a game base on ‘Game of Life’, although I did pass that course any way, I had completed forgot how I did it. This question popped up while I did the practices on Leetcode,  I didn’t come up the good solution to pass all the test. I tried to get helps from discussion section, there is a top answer which provided by <a href=\"https://discuss.leetcode.com/topic/29054/easiest-java-solution-with-explanation\" target=\"_blank\" rel=\"external\">@yavinci</a>. I think his solution is brilliant with great explanation. </p>\n<h5 id=\"Logic-behind-the-code\"><a href=\"#Logic-behind-the-code\" class=\"headerlink\" title=\"Logic behind the code\"></a>Logic behind the code</h5><p>Using 2 bit to store ‘current’ state and ‘next’ state</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">        [2nd bit  ,  1st bit] </div><div class=\"line\">      [next state ,  current state]</div><div class=\"line\">- 00  dead (next) &lt;- dead (current)</div><div class=\"line\">- 01  dead (next) &lt;- live (current)  </div><div class=\"line\">- 10  live (next) &lt;- dead (current)  </div><div class=\"line\">- 11  live (next) &lt;- live (current)</div></pre></td></tr></table></figure>\n<ol>\n<li>Every cell is 0 or 1, in 2 bit it is either <code>00</code> or <code>01</code></li>\n<li>Notice that <code>1st</code> state is independent of <code>2nd</code> state.</li>\n<li>All cells update at same time</li>\n<li>count # neighbors from <code>1st</code> state and send <code>2nd</code> state bit</li>\n<li>Since <code>2nd</code> state default to dead, no consideration for situation <code>01-&gt;00</code></li>\n<li>After update all cells, delete cell’s <code>1st</code> state by <code>&gt;&gt;1</code></li>\n</ol>\n<p>For each cell’s <code>1st</code> bit, check the 8 cells around itself, and set the cell’s <code>2nd</code> bit.</p>\n<ol>\n<li>Transition <code>01 -&gt; 11</code>: when <code>board[i][j] == 1</code> and lives &gt;= 2 &amp;&amp; lives &lt;= 3.</li>\n<li>Transition <code>00 -&gt; 10</code>: when <code>board[i][j] == 0</code> and lives == 3.</li>\n</ol>\n<p>To get the current state, simply do</p>\n<p><code>board[i][j] &amp; 1</code></p>\n<p>To get the next state, simply do</p>\n<p><code>board[i][j] &gt;&gt; 1</code></p>\n<h5 id=\"Code-break-down\"><a href=\"#Code-break-down\" class=\"headerlink\" title=\"Code break down\"></a>Code break down</h5><p>There are <em>three</em> main section in the code</p>\n<h5 id=\"update-every-cell-base-on-neighbors-conditions\"><a href=\"#update-every-cell-base-on-neighbors-conditions\" class=\"headerlink\" title=\"update every cell base on neighbors conditions\"></a>update every cell base on neighbors conditions</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> m = board.length;</div><div class=\"line\"><span class=\"keyword\">var</span> n = board[<span class=\"number\">0</span>].length;</div><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lives = livesNeighbors(board, i, j, m, n);</div><div class=\"line\">        <span class=\"comment\">// in the beginning every 2nd bit should be 0</span></div><div class=\"line\">        <span class=\"comment\">// only check 2nd bit becomes 1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (board[i][j] === <span class=\"number\">1</span> &amp;&amp; lives &gt;=<span class=\"number\">2</span> &amp;&amp; lives &lt;= <span class=\"number\">3</span>) &#123;</div><div class=\"line\">            board[i][j] = <span class=\"number\">3</span>;    <span class=\"comment\">// Make the 2nd bit 1: 01 ---&gt; 11</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (board[i][j] === <span class=\"number\">0</span> &amp;&amp; lives &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            board[i][j] = <span class=\"number\">2</span>;    <span class=\"comment\">// Make the 2nd bit 1: 00 ---&gt; 10</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"transit-all-cell-into-next-state-only-keep-2nd-bit\"><a href=\"#transit-all-cell-into-next-state-only-keep-2nd-bit\" class=\"headerlink\" title=\"transit all cell into next state (only keep 2nd bit)\"></a>transit all cell into next state (only keep <code>2nd</code> bit)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">        board[i][j] &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"check-neighbors-function\"><a href=\"#check-neighbors-function\" class=\"headerlink\" title=\"check neighbors function\"></a>check neighbors function</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">livesNeighbors</span>(<span class=\"params\">board, i, j, m, n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> lives = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">// when i, j is edge row or column, using Math.max and Math.min</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (x = <span class=\"built_in\">Math</span>.max(i - <span class=\"number\">1</span>, <span class=\"number\">0</span>); x &lt;= <span class=\"built_in\">Math</span>.min(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>); x++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (y = <span class=\"built_in\">Math</span>.max(j - <span class=\"number\">1</span>, <span class=\"number\">0</span>); y &lt;= <span class=\"built_in\">Math</span>.min(j + <span class=\"number\">1</span>, <span class=\"number\">0</span>); y++) &#123;</div><div class=\"line\">            lives += board[x][y] &amp; <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// delete current cell</span></div><div class=\"line\">    lives -= board[i][j] &amp; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> lives;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\" rel=\"external\">Conway’s Game of Life</a></p>\n<h5 id=\"Foreword\"><a href=\"#Foreword\" class=\"headerlink\" title=\"Foreword\"></a>Foreword</h5><p>Back to college time, I had assignment about using <code>C++</code> to write a game base on ‘Game of Life’, although I did pass that course any way, I had completed forgot how I did it. This question popped up while I did the practices on Leetcode,  I didn’t come up the good solution to pass all the test. I tried to get helps from discussion section, there is a top answer which provided by <a href=\"https://discuss.leetcode.com/topic/29054/easiest-java-solution-with-explanation\" target=\"_blank\" rel=\"external\">@yavinci</a>. I think his solution is brilliant with great explanation. </p>\n<h5 id=\"Logic-behind-the-code\"><a href=\"#Logic-behind-the-code\" class=\"headerlink\" title=\"Logic behind the code\"></a>Logic behind the code</h5><p>Using 2 bit to store ‘current’ state and ‘next’ state</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">        [2nd bit  ,  1st bit] </div><div class=\"line\">      [next state ,  current state]</div><div class=\"line\">- 00  dead (next) &lt;- dead (current)</div><div class=\"line\">- 01  dead (next) &lt;- live (current)  </div><div class=\"line\">- 10  live (next) &lt;- dead (current)  </div><div class=\"line\">- 11  live (next) &lt;- live (current)</div></pre></td></tr></table></figure>\n<ol>\n<li>Every cell is 0 or 1, in 2 bit it is either <code>00</code> or <code>01</code></li>\n<li>Notice that <code>1st</code> state is independent of <code>2nd</code> state.</li>\n<li>All cells update at same time</li>\n<li>count # neighbors from <code>1st</code> state and send <code>2nd</code> state bit</li>\n<li>Since <code>2nd</code> state default to dead, no consideration for situation <code>01-&gt;00</code></li>\n<li>After update all cells, delete cell’s <code>1st</code> state by <code>&gt;&gt;1</code></li>\n</ol>\n<p>For each cell’s <code>1st</code> bit, check the 8 cells around itself, and set the cell’s <code>2nd</code> bit.</p>\n<ol>\n<li>Transition <code>01 -&gt; 11</code>: when <code>board[i][j] == 1</code> and lives &gt;= 2 &amp;&amp; lives &lt;= 3.</li>\n<li>Transition <code>00 -&gt; 10</code>: when <code>board[i][j] == 0</code> and lives == 3.</li>\n</ol>\n<p>To get the current state, simply do</p>\n<p><code>board[i][j] &amp; 1</code></p>\n<p>To get the next state, simply do</p>\n<p><code>board[i][j] &gt;&gt; 1</code></p>\n<h5 id=\"Code-break-down\"><a href=\"#Code-break-down\" class=\"headerlink\" title=\"Code break down\"></a>Code break down</h5><p>There are <em>three</em> main section in the code</p>\n<h5 id=\"update-every-cell-base-on-neighbors-conditions\"><a href=\"#update-every-cell-base-on-neighbors-conditions\" class=\"headerlink\" title=\"update every cell base on neighbors conditions\"></a>update every cell base on neighbors conditions</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> m = board.length;</div><div class=\"line\"><span class=\"keyword\">var</span> n = board[<span class=\"number\">0</span>].length;</div><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> lives = livesNeighbors(board, i, j, m, n);</div><div class=\"line\">        <span class=\"comment\">// in the beginning every 2nd bit should be 0</span></div><div class=\"line\">        <span class=\"comment\">// only check 2nd bit becomes 1</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (board[i][j] === <span class=\"number\">1</span> &amp;&amp; lives &gt;=<span class=\"number\">2</span> &amp;&amp; lives &lt;= <span class=\"number\">3</span>) &#123;</div><div class=\"line\">            board[i][j] = <span class=\"number\">3</span>;    <span class=\"comment\">// Make the 2nd bit 1: 01 ---&gt; 11</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (board[i][j] === <span class=\"number\">0</span> &amp;&amp; lives &lt; <span class=\"number\">2</span>) &#123;</div><div class=\"line\">            board[i][j] = <span class=\"number\">2</span>;    <span class=\"comment\">// Make the 2nd bit 1: 00 ---&gt; 10</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"transit-all-cell-into-next-state-only-keep-2nd-bit\"><a href=\"#transit-all-cell-into-next-state-only-keep-2nd-bit\" class=\"headerlink\" title=\"transit all cell into next state (only keep 2nd bit)\"></a>transit all cell into next state (only keep <code>2nd</code> bit)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</div><div class=\"line\">        board[i][j] &gt;&gt;= <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"check-neighbors-function\"><a href=\"#check-neighbors-function\" class=\"headerlink\" title=\"check neighbors function\"></a>check neighbors function</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">livesNeighbors</span>(<span class=\"params\">board, i, j, m, n</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> lives = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">// when i, j is edge row or column, using Math.max and Math.min</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (x = <span class=\"built_in\">Math</span>.max(i - <span class=\"number\">1</span>, <span class=\"number\">0</span>); x &lt;= <span class=\"built_in\">Math</span>.min(i + <span class=\"number\">1</span>, <span class=\"number\">0</span>); x++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (y = <span class=\"built_in\">Math</span>.max(j - <span class=\"number\">1</span>, <span class=\"number\">0</span>); y &lt;= <span class=\"built_in\">Math</span>.min(j + <span class=\"number\">1</span>, <span class=\"number\">0</span>); y++) &#123;</div><div class=\"line\">            lives += board[x][y] &amp; <span class=\"number\">1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// delete current cell</span></div><div class=\"line\">    lives -= board[i][j] &amp; <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> lives;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"SublimeLinter path configure","layout":"post","date":"2016-10-25T20:00:00.000Z","author":"Bo Chen","_content":"\nAfter install sublimeLinter package\n\ninstalled plugin such as sublimeLinter-php, sublimeLinter-jshint\n\nin Mac OSX, need to configuration user setting file: \n\n~~~js\npath: [\n    '/Users/ put your account name here /local/bin/'\n    ]\n~~~\n","source":"_posts/2016-10-25-sublimelinter-trick.md","raw":"---\ntitle: SublimeLinter path configure\nlayout: post\ndate:   2016-10-25 16:00:00 \ntags: ['sublime', 'linter', 'jshint', 'path']\nauthor: \"Bo Chen\"\n---\n\nAfter install sublimeLinter package\n\ninstalled plugin such as sublimeLinter-php, sublimeLinter-jshint\n\nin Mac OSX, need to configuration user setting file: \n\n~~~js\npath: [\n    '/Users/ put your account name here /local/bin/'\n    ]\n~~~\n","slug":"2016-10-25-sublimelinter-trick","published":1,"updated":"2017-08-10T15:48:53.000Z","comments":1,"photos":[],"link":"","_id":"cj6866ecb0005xze5nl69hd9s","content":"<p>After install sublimeLinter package</p>\n<p>installed plugin such as sublimeLinter-php, sublimeLinter-jshint</p>\n<p>in Mac OSX, need to configuration user setting file: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">path: [</div><div class=\"line\">    <span class=\"string\">'/Users/ put your account name here /local/bin/'</span></div><div class=\"line\">    ]</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>After install sublimeLinter package</p>\n<p>installed plugin such as sublimeLinter-php, sublimeLinter-jshint</p>\n<p>in Mac OSX, need to configuration user setting file: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">path: [</div><div class=\"line\">    <span class=\"string\">'/Users/ put your account name here /local/bin/'</span></div><div class=\"line\">    ]</div></pre></td></tr></table></figure>\n"},{"title":"Component vs Directive in Angular 2","layout":"post","date":"2016-11-09T21:00:00.000Z","author":"Bo Chen","_content":"\n#### Overview (source: [angular.io](https://angular.io/docs/ts/latest/guide/attribute-directives.html))\nLet's look at the documentations from Angular.io, there are total three kinds of directives in Angular 2:\n\n* **Component** - directives with a template\n* **Structural directives** - change the DOM layout by adding and removing DOM elements, such as `*ngIf`, `*ngFor`\n* **Attribute directives** - change the appearance or behavior of an element\n\nComponent actually is one kind of directives in Angular 2, it is a directive with template. This post is going to focus on **Component** and **Attribute Directives**. Let me dive into each kind of directives, and find out what are their characteristics.\n\n#### Component (source: [angular.io](https://angular.io/docs/ts/latest/quickstart.html#!#root-component))\nEvery Angular application has at least one component: the root component, also can has children component.\n\n~~~ts\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'my-app',\n  template: '<h1>Hello Angular!</h1>'\n})\nexport class AppComponent { }\n~~~\n\nEach component comes with:\n\n* **An Import statement** import { Component }\n* **@Component decorator** that associates metadata with component class:\n    * a *selector* \n    * a *template*\n    * etc\n\n* **Input and Output Properties**\n* **Lifecycle**\n* **Providers**\n* **Host Element** - a component can interact with its hos DOM:\n    * listen to host events\n    * update host's properties\n    * invoke methods on host DOM\n\n* Components are **Self-describing**:\n    * knows how to **interact** with host\n    * know to **render** itself\n    * **configure** dependency injection\n    * well-**defined** input and output properties\n\nBase on self-describing characteristic, any component can be bootstrapped as an application, can be loaded into router outlet, or be used in some other component directly.\n\n#### Directives (source: [angular.io](https://angular.io/docs/ts/latest/guide/attribute-directives.html))\nMore precisely, it is attribute directives, it is used to change appearance and add behavior to DOM\n\nExample:\n\n~~~ts\nimport { Directive, ElementRef, Input, Renderer } from '@angular/core';\n@Directive({ selector: '[myHighlight]' })\nexport class HighlightDirective {\n    constructor(el: ElementRef, renderer: Renderer) {\n       renderer.setElementStyle(el.nativeElement, 'backgroundColor', 'yellow');\n    }\n}\n~~~\n\nThe import statement specifies symbols from the Angular core:\n\n1. **Directive** provides the functionality of the @Directive decorator.\n2. **ElementRef** injects into the directive's constructor so the code can access the DOM element. [api](https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html)\n3. **Input** allows data to flow from the binding expression into the directive.\n4. **Renderer** allows the code to change the DOM element's style. [api](https://angular.io/docs/ts/latest/api/core/index/Renderer-class.html)\n\n`selector: '[myHighlight]'` is a CSS selector to identify the HTML in the template associate with directives, usage:\n\n~~~html\n<p myHighlight>Highlight me!</p>\n~~~\n\nIt is hard to explain all the detail about directive, I prefer to read over the documentation from [angular.io](https://angular.io/docs/ts/latest/guide/attribute-directives.html). By creating a example directive will help you understand what attribute directives is.\n\n#### Overall Comparison (source: [CODEANDYOU](http://www.codeandyou.com/2016/01/difference-between-component-and-directive-in-Angular2.html))\n\n| Component  | Directive |\n| ------------- | ------------- |\n| For register component we use @Component meta-data annotation.  | For register directives we use @Directive meta-data annotation. |\n| Component is a directive which use shadow DOM to create encapsulate visual behavior called components.  Components are typically used to create UI widgets.  | Directives is used to add behavior to an existing DOM element.  |\n| Component is used to break up the application into smaller components.  | Directive is use to design re-usable components.  |\n| Only one component can be present per DOM element.  | Many directive can be used in a per DOM element.  |\n| @View decorator or template URL template are mandatory in the component.  | Directive don’t have View.  |\n| Component is used to define pipes.  | You can’t define Pipes in directive.  |\n| viewEncapsulation can be define in components because they have views.  | viewEncapsulation can be define in components because they have views.  |\n\n\n\n","source":"_posts/2016-11-09-component-vs-directive.md","raw":"---\ntitle: Component vs Directive in Angular 2\nlayout: post\ndate:   2016-11-09 16:00:00 \ntags: ['component', 'directive', 'angular 2']\nauthor: \"Bo Chen\"\n---\n\n#### Overview (source: [angular.io](https://angular.io/docs/ts/latest/guide/attribute-directives.html))\nLet's look at the documentations from Angular.io, there are total three kinds of directives in Angular 2:\n\n* **Component** - directives with a template\n* **Structural directives** - change the DOM layout by adding and removing DOM elements, such as `*ngIf`, `*ngFor`\n* **Attribute directives** - change the appearance or behavior of an element\n\nComponent actually is one kind of directives in Angular 2, it is a directive with template. This post is going to focus on **Component** and **Attribute Directives**. Let me dive into each kind of directives, and find out what are their characteristics.\n\n#### Component (source: [angular.io](https://angular.io/docs/ts/latest/quickstart.html#!#root-component))\nEvery Angular application has at least one component: the root component, also can has children component.\n\n~~~ts\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'my-app',\n  template: '<h1>Hello Angular!</h1>'\n})\nexport class AppComponent { }\n~~~\n\nEach component comes with:\n\n* **An Import statement** import { Component }\n* **@Component decorator** that associates metadata with component class:\n    * a *selector* \n    * a *template*\n    * etc\n\n* **Input and Output Properties**\n* **Lifecycle**\n* **Providers**\n* **Host Element** - a component can interact with its hos DOM:\n    * listen to host events\n    * update host's properties\n    * invoke methods on host DOM\n\n* Components are **Self-describing**:\n    * knows how to **interact** with host\n    * know to **render** itself\n    * **configure** dependency injection\n    * well-**defined** input and output properties\n\nBase on self-describing characteristic, any component can be bootstrapped as an application, can be loaded into router outlet, or be used in some other component directly.\n\n#### Directives (source: [angular.io](https://angular.io/docs/ts/latest/guide/attribute-directives.html))\nMore precisely, it is attribute directives, it is used to change appearance and add behavior to DOM\n\nExample:\n\n~~~ts\nimport { Directive, ElementRef, Input, Renderer } from '@angular/core';\n@Directive({ selector: '[myHighlight]' })\nexport class HighlightDirective {\n    constructor(el: ElementRef, renderer: Renderer) {\n       renderer.setElementStyle(el.nativeElement, 'backgroundColor', 'yellow');\n    }\n}\n~~~\n\nThe import statement specifies symbols from the Angular core:\n\n1. **Directive** provides the functionality of the @Directive decorator.\n2. **ElementRef** injects into the directive's constructor so the code can access the DOM element. [api](https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html)\n3. **Input** allows data to flow from the binding expression into the directive.\n4. **Renderer** allows the code to change the DOM element's style. [api](https://angular.io/docs/ts/latest/api/core/index/Renderer-class.html)\n\n`selector: '[myHighlight]'` is a CSS selector to identify the HTML in the template associate with directives, usage:\n\n~~~html\n<p myHighlight>Highlight me!</p>\n~~~\n\nIt is hard to explain all the detail about directive, I prefer to read over the documentation from [angular.io](https://angular.io/docs/ts/latest/guide/attribute-directives.html). By creating a example directive will help you understand what attribute directives is.\n\n#### Overall Comparison (source: [CODEANDYOU](http://www.codeandyou.com/2016/01/difference-between-component-and-directive-in-Angular2.html))\n\n| Component  | Directive |\n| ------------- | ------------- |\n| For register component we use @Component meta-data annotation.  | For register directives we use @Directive meta-data annotation. |\n| Component is a directive which use shadow DOM to create encapsulate visual behavior called components.  Components are typically used to create UI widgets.  | Directives is used to add behavior to an existing DOM element.  |\n| Component is used to break up the application into smaller components.  | Directive is use to design re-usable components.  |\n| Only one component can be present per DOM element.  | Many directive can be used in a per DOM element.  |\n| @View decorator or template URL template are mandatory in the component.  | Directive don’t have View.  |\n| Component is used to define pipes.  | You can’t define Pipes in directive.  |\n| viewEncapsulation can be define in components because they have views.  | viewEncapsulation can be define in components because they have views.  |\n\n\n\n","slug":"2016-11-09-component-vs-directive","published":1,"updated":"2017-08-10T15:48:53.000Z","comments":1,"photos":[],"link":"","_id":"cj6866ecf0006xze5sosc2b2q","content":"<h4 id=\"Overview-source-angular-io\"><a href=\"#Overview-source-angular-io\" class=\"headerlink\" title=\"Overview (source: angular.io)\"></a>Overview (source: <a href=\"https://angular.io/docs/ts/latest/guide/attribute-directives.html\" target=\"_blank\" rel=\"external\">angular.io</a>)</h4><p>Let’s look at the documentations from Angular.io, there are total three kinds of directives in Angular 2:</p>\n<ul>\n<li><strong>Component</strong> - directives with a template</li>\n<li><strong>Structural directives</strong> - change the DOM layout by adding and removing DOM elements, such as <code>*ngIf</code>, <code>*ngFor</code></li>\n<li><strong>Attribute directives</strong> - change the appearance or behavior of an element</li>\n</ul>\n<p>Component actually is one kind of directives in Angular 2, it is a directive with template. This post is going to focus on <strong>Component</strong> and <strong>Attribute Directives</strong>. Let me dive into each kind of directives, and find out what are their characteristics.</p>\n<h4 id=\"Component-source-angular-io\"><a href=\"#Component-source-angular-io\" class=\"headerlink\" title=\"Component (source: angular.io)\"></a>Component (source: <a href=\"https://angular.io/docs/ts/latest/quickstart.html#!#root-component\" target=\"_blank\" rel=\"external\">angular.io</a>)</h4><p>Every Angular application has at least one component: the root component, also can has children component.</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'my-app'</span>,</div><div class=\"line\">  template: <span class=\"string\">'&lt;h1&gt;Hello Angular!&lt;/h1&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123; &#125;</div></pre></td></tr></table></figure>\n<p>Each component comes with:</p>\n<ul>\n<li><strong>An Import statement</strong> import { Component }</li>\n<li><p><strong>@Component decorator</strong> that associates metadata with component class:</p>\n<ul>\n<li>a <em>selector</em> </li>\n<li>a <em>template</em></li>\n<li>etc</li>\n</ul>\n</li>\n<li><p><strong>Input and Output Properties</strong></p>\n</li>\n<li><strong>Lifecycle</strong></li>\n<li><strong>Providers</strong></li>\n<li><p><strong>Host Element</strong> - a component can interact with its hos DOM:</p>\n<ul>\n<li>listen to host events</li>\n<li>update host’s properties</li>\n<li>invoke methods on host DOM</li>\n</ul>\n</li>\n<li><p>Components are <strong>Self-describing</strong>:</p>\n<ul>\n<li>knows how to <strong>interact</strong> with host</li>\n<li>know to <strong>render</strong> itself</li>\n<li><strong>configure</strong> dependency injection</li>\n<li>well-<strong>defined</strong> input and output properties</li>\n</ul>\n</li>\n</ul>\n<p>Base on self-describing characteristic, any component can be bootstrapped as an application, can be loaded into router outlet, or be used in some other component directly.</p>\n<h4 id=\"Directives-source-angular-io\"><a href=\"#Directives-source-angular-io\" class=\"headerlink\" title=\"Directives (source: angular.io)\"></a>Directives (source: <a href=\"https://angular.io/docs/ts/latest/guide/attribute-directives.html\" target=\"_blank\" rel=\"external\">angular.io</a>)</h4><p>More precisely, it is attribute directives, it is used to change appearance and add behavior to DOM</p>\n<p>Example:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Directive, ElementRef, Input, Renderer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"meta\">@Directive</span>(&#123; selector: <span class=\"string\">'[myHighlight]'</span> &#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HighlightDirective &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">el: ElementRef, renderer: Renderer</span>) &#123;</div><div class=\"line\">       renderer.setElementStyle(el.nativeElement, <span class=\"string\">'backgroundColor'</span>, <span class=\"string\">'yellow'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The import statement specifies symbols from the Angular core:</p>\n<ol>\n<li><strong>Directive</strong> provides the functionality of the @Directive decorator.</li>\n<li><strong>ElementRef</strong> injects into the directive’s constructor so the code can access the DOM element. <a href=\"https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html\" target=\"_blank\" rel=\"external\">api</a></li>\n<li><strong>Input</strong> allows data to flow from the binding expression into the directive.</li>\n<li><strong>Renderer</strong> allows the code to change the DOM element’s style. <a href=\"https://angular.io/docs/ts/latest/api/core/index/Renderer-class.html\" target=\"_blank\" rel=\"external\">api</a></li>\n</ol>\n<p><code>selector: &#39;[myHighlight]&#39;</code> is a CSS selector to identify the HTML in the template associate with directives, usage:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">myHighlight</span>&gt;</span>Highlight me!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It is hard to explain all the detail about directive, I prefer to read over the documentation from <a href=\"https://angular.io/docs/ts/latest/guide/attribute-directives.html\" target=\"_blank\" rel=\"external\">angular.io</a>. By creating a example directive will help you understand what attribute directives is.</p>\n<h4 id=\"Overall-Comparison-source-CODEANDYOU\"><a href=\"#Overall-Comparison-source-CODEANDYOU\" class=\"headerlink\" title=\"Overall Comparison (source: CODEANDYOU)\"></a>Overall Comparison (source: <a href=\"http://www.codeandyou.com/2016/01/difference-between-component-and-directive-in-Angular2.html\" target=\"_blank\" rel=\"external\">CODEANDYOU</a>)</h4><table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Directive</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>For register component we use @Component meta-data annotation.</td>\n<td>For register directives we use @Directive meta-data annotation.</td>\n</tr>\n<tr>\n<td>Component is a directive which use shadow DOM to create encapsulate visual behavior called components.  Components are typically used to create UI widgets.</td>\n<td>Directives is used to add behavior to an existing DOM element.</td>\n</tr>\n<tr>\n<td>Component is used to break up the application into smaller components.</td>\n<td>Directive is use to design re-usable components.</td>\n</tr>\n<tr>\n<td>Only one component can be present per DOM element.</td>\n<td>Many directive can be used in a per DOM element.</td>\n</tr>\n<tr>\n<td>@View decorator or template URL template are mandatory in the component.</td>\n<td>Directive don’t have View.</td>\n</tr>\n<tr>\n<td>Component is used to define pipes.</td>\n<td>You can’t define Pipes in directive.</td>\n</tr>\n<tr>\n<td>viewEncapsulation can be define in components because they have views.</td>\n<td>viewEncapsulation can be define in components because they have views.</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Overview-source-angular-io\"><a href=\"#Overview-source-angular-io\" class=\"headerlink\" title=\"Overview (source: angular.io)\"></a>Overview (source: <a href=\"https://angular.io/docs/ts/latest/guide/attribute-directives.html\" target=\"_blank\" rel=\"external\">angular.io</a>)</h4><p>Let’s look at the documentations from Angular.io, there are total three kinds of directives in Angular 2:</p>\n<ul>\n<li><strong>Component</strong> - directives with a template</li>\n<li><strong>Structural directives</strong> - change the DOM layout by adding and removing DOM elements, such as <code>*ngIf</code>, <code>*ngFor</code></li>\n<li><strong>Attribute directives</strong> - change the appearance or behavior of an element</li>\n</ul>\n<p>Component actually is one kind of directives in Angular 2, it is a directive with template. This post is going to focus on <strong>Component</strong> and <strong>Attribute Directives</strong>. Let me dive into each kind of directives, and find out what are their characteristics.</p>\n<h4 id=\"Component-source-angular-io\"><a href=\"#Component-source-angular-io\" class=\"headerlink\" title=\"Component (source: angular.io)\"></a>Component (source: <a href=\"https://angular.io/docs/ts/latest/quickstart.html#!#root-component\" target=\"_blank\" rel=\"external\">angular.io</a>)</h4><p>Every Angular application has at least one component: the root component, also can has children component.</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">  selector: <span class=\"string\">'my-app'</span>,</div><div class=\"line\">  template: <span class=\"string\">'&lt;h1&gt;Hello Angular!&lt;/h1&gt;'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> AppComponent &#123; &#125;</div></pre></td></tr></table></figure>\n<p>Each component comes with:</p>\n<ul>\n<li><strong>An Import statement</strong> import { Component }</li>\n<li><p><strong>@Component decorator</strong> that associates metadata with component class:</p>\n<ul>\n<li>a <em>selector</em> </li>\n<li>a <em>template</em></li>\n<li>etc</li>\n</ul>\n</li>\n<li><p><strong>Input and Output Properties</strong></p>\n</li>\n<li><strong>Lifecycle</strong></li>\n<li><strong>Providers</strong></li>\n<li><p><strong>Host Element</strong> - a component can interact with its hos DOM:</p>\n<ul>\n<li>listen to host events</li>\n<li>update host’s properties</li>\n<li>invoke methods on host DOM</li>\n</ul>\n</li>\n<li><p>Components are <strong>Self-describing</strong>:</p>\n<ul>\n<li>knows how to <strong>interact</strong> with host</li>\n<li>know to <strong>render</strong> itself</li>\n<li><strong>configure</strong> dependency injection</li>\n<li>well-<strong>defined</strong> input and output properties</li>\n</ul>\n</li>\n</ul>\n<p>Base on self-describing characteristic, any component can be bootstrapped as an application, can be loaded into router outlet, or be used in some other component directly.</p>\n<h4 id=\"Directives-source-angular-io\"><a href=\"#Directives-source-angular-io\" class=\"headerlink\" title=\"Directives (source: angular.io)\"></a>Directives (source: <a href=\"https://angular.io/docs/ts/latest/guide/attribute-directives.html\" target=\"_blank\" rel=\"external\">angular.io</a>)</h4><p>More precisely, it is attribute directives, it is used to change appearance and add behavior to DOM</p>\n<p>Example:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Directive, ElementRef, Input, Renderer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"meta\">@Directive</span>(&#123; selector: <span class=\"string\">'[myHighlight]'</span> &#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> HighlightDirective &#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">el: ElementRef, renderer: Renderer</span>) &#123;</div><div class=\"line\">       renderer.setElementStyle(el.nativeElement, <span class=\"string\">'backgroundColor'</span>, <span class=\"string\">'yellow'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The import statement specifies symbols from the Angular core:</p>\n<ol>\n<li><strong>Directive</strong> provides the functionality of the @Directive decorator.</li>\n<li><strong>ElementRef</strong> injects into the directive’s constructor so the code can access the DOM element. <a href=\"https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html\" target=\"_blank\" rel=\"external\">api</a></li>\n<li><strong>Input</strong> allows data to flow from the binding expression into the directive.</li>\n<li><strong>Renderer</strong> allows the code to change the DOM element’s style. <a href=\"https://angular.io/docs/ts/latest/api/core/index/Renderer-class.html\" target=\"_blank\" rel=\"external\">api</a></li>\n</ol>\n<p><code>selector: &#39;[myHighlight]&#39;</code> is a CSS selector to identify the HTML in the template associate with directives, usage:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">myHighlight</span>&gt;</span>Highlight me!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>It is hard to explain all the detail about directive, I prefer to read over the documentation from <a href=\"https://angular.io/docs/ts/latest/guide/attribute-directives.html\" target=\"_blank\" rel=\"external\">angular.io</a>. By creating a example directive will help you understand what attribute directives is.</p>\n<h4 id=\"Overall-Comparison-source-CODEANDYOU\"><a href=\"#Overall-Comparison-source-CODEANDYOU\" class=\"headerlink\" title=\"Overall Comparison (source: CODEANDYOU)\"></a>Overall Comparison (source: <a href=\"http://www.codeandyou.com/2016/01/difference-between-component-and-directive-in-Angular2.html\" target=\"_blank\" rel=\"external\">CODEANDYOU</a>)</h4><table>\n<thead>\n<tr>\n<th>Component</th>\n<th>Directive</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>For register component we use @Component meta-data annotation.</td>\n<td>For register directives we use @Directive meta-data annotation.</td>\n</tr>\n<tr>\n<td>Component is a directive which use shadow DOM to create encapsulate visual behavior called components.  Components are typically used to create UI widgets.</td>\n<td>Directives is used to add behavior to an existing DOM element.</td>\n</tr>\n<tr>\n<td>Component is used to break up the application into smaller components.</td>\n<td>Directive is use to design re-usable components.</td>\n</tr>\n<tr>\n<td>Only one component can be present per DOM element.</td>\n<td>Many directive can be used in a per DOM element.</td>\n</tr>\n<tr>\n<td>@View decorator or template URL template are mandatory in the component.</td>\n<td>Directive don’t have View.</td>\n</tr>\n<tr>\n<td>Component is used to define pipes.</td>\n<td>You can’t define Pipes in directive.</td>\n</tr>\n<tr>\n<td>viewEncapsulation can be define in components because they have views.</td>\n<td>viewEncapsulation can be define in components because they have views.</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Open Source Charting Libraries Comparison","layout":"post","date":"2016-11-10T15:00:00.000Z","author":"Bo Chen","_content":"For current working project, our team is looking for a global charting library in our dashboard project.\n\n##### coming soon...","source":"_posts/2016-11-10-charting-library.md","raw":"---\ntitle: Open Source Charting Libraries Comparison\nlayout: post\ndate:   2016-11-10 10:00:00 \ntags: ['open source', 'chart', 'compare']\nauthor: \"Bo Chen\"\n---\nFor current working project, our team is looking for a global charting library in our dashboard project.\n\n##### coming soon...","slug":"2016-11-10-charting-library","published":1,"updated":"2017-08-10T15:48:53.000Z","comments":1,"photos":[],"link":"","_id":"cj6866eci0008xze5o34ng1zy","content":"<p>For current working project, our team is looking for a global charting library in our dashboard project.</p>\n<h5 id=\"coming-soon…\"><a href=\"#coming-soon…\" class=\"headerlink\" title=\"coming soon…\"></a>coming soon…</h5>","site":{"data":{}},"excerpt":"","more":"<p>For current working project, our team is looking for a global charting library in our dashboard project.</p>\n<h5 id=\"coming-soon…\"><a href=\"#coming-soon…\" class=\"headerlink\" title=\"coming soon…\"></a>coming soon…</h5>"},{"title":"Write a directive for charting library in Angular 2","layout":"post","date":"2016-11-16T15:00:00.000Z","author":"Bo Chen","_content":"\n#### Goal\nWriting a Angular 2 attribute directive for one of popular charting libraries.\n\nFor example, **Flot directive** usage:\n\n`*.component.html`\n\n~~~html\n<div flot-chart\n    [data]=\"data\"\n    [options]=\"options\" style=\"width: 100%; height: 260px;\"></div>\n~~~\n\n`*.component.ts`\n\n~~~ts\nimport { Component } from '@angular/core';\n@Component({\n    moduleId: module.id,\n    selector: 'something-cmp',\n    templateUrl: './*.component.html'\n})\n\nexport class SomethingComponent {\n    this.data: any;\n\n    constructor() {\n        this.data = sampleData // setting data with correct format\n    }\n}\n~~~\n\n`*.module.ts`\n\n~~~ts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SomeComponent } from './path/to/SomeCompont';\nimport { FlotModule } from './path/to/FlotModule/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlotModule\n    ],\n    declarations: [\n        SomeComponent\n    ],\n    exports: [\n        SomeComponent\n    ]\n})\n~~~\n\n---\n\n#### Install Library\nThis part is not import in this article, everyone's project is different, all depends on different environment. Depending on the certain situation to choose a charting library, the concept is same for most of libraries.\n\nFor my current working situation, I need to use several different charting libraries, most of them are open source, free to use :\n\n1. [jQuery](https://jquery.com/)  `npm install --save jquery`\n2. [jquery-flot](https://www.npmjs.com/package/jquery-flot)  `npm install --save jquery-flot`\n3. [D3](https://d3js.org/)  `npm install --save d3`\n4. [C3](http://c3js.org/)  `npm install --save c3`\n5. nvD3, MetricsGraphics.js, etc...\n\n---\n\n#### Project Directory\nCreate a folder to holds all directive for global usage:\n\n~~~sh\n_ src\n  |_ app\n    |_ chart_libraries\n      |_ flot\n        |_ flot.directive.ts\n        |_ flot.module.ts\n        |_ index.ts\n      |_ D3\n        |_ ...\n      |_ C3\n        |_ ...\n      ...\n~~~\n\n---\n\n#### Create Directive for *Flot*\n\n##### Create directive.ts for Flot Directive\n\n`flot.directive.ts`\n\n~~~ts\nimport { Directive, ElementRef, Input } from '@angular/core';\ndeclare var jQuery: any;\n\n@Directive ({\n  selector: '[flot-chart]'\n})\n\nexport class FlotChart {\n    $el: any\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(el: ElementRef) {\n        this.$el = jQuery(el.nativeElement);\n    }\n\n    render(): void {\n        // set any default options you want for flot chart\n        jQuery.plot(this.$el, this.data, this.options || {\n            series: {\n              lines: {\n                show: true,\n                lineWidth: 1,\n                fill: false,\n                fillColor: { colors: [{ opacity: .001 }, { opacity: .5}] }\n              },\n              points: {\n                show: false,\n                fill: true\n              },\n              shadowSize: 0\n            },\n            xaxis: {\n              mode: 'time',\n              timezone: 'browser'\n            },\n            legend: false,\n            grid: {\n              show: false,\n              margin: 0,\n              labelMargin: 0,\n              axisMargin: 0,\n              hoverable: true,\n              clickable: true,\n              tickColor: 'rgba(255,255,255,1)',\n              borderWidth: 0\n            }\n        });\n    }\n\n    ngOnInit(): void {\n        this.render();\n    }\n}\n~~~\n\n`declare var jQuery: any` is declaring the jQuery variable so that jQuery function can be used in this directive file, in order to `declare var` please set up inside the `webpack`.\n\n`selector: '[flot-chart]'` inside the `@Directive` is very import, this is our HTML attribute selector, so that we can put this selector into HTML elements to use this directive.\n\n`this.$el = jQuery(el.nativeElement)` is assigned current directive host DOM to `$el`. read more documentation about [ElementRef](https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html)\n\n##### Create module.ts for Flot Directive\n\n`flot.module.ts`\n\n~~~ts\nimport { NgModule }      from '@angular/core';\n\nimport 'jquery-flot';\nimport 'jquery.flot.animator/jquery.flot.animator';\nimport 'jquery-flot/jquery.flot.time.js';\n\nimport { FlotChart } from './flot.directive';\n\n@NgModule({\n  declarations: [\n    FlotChart\n  ],\n  exports: [\n    FlotChart\n  ]\n})\nexport class FlotChartModule {\n}\n~~~\n\nImport all the Flot dependencies inside the module file, so that Flot can be properly use without errors.\n","source":"_posts/2016-11-16-directive-for-charting-library.md","raw":"---\ntitle: Write a directive for charting library in Angular 2\nlayout: post\ndate:   2016-11-16 10:00:00 \ntags: ['Angular 2', 'directive', 'chart', 'how to']\nauthor: \"Bo Chen\"\n---\n\n#### Goal\nWriting a Angular 2 attribute directive for one of popular charting libraries.\n\nFor example, **Flot directive** usage:\n\n`*.component.html`\n\n~~~html\n<div flot-chart\n    [data]=\"data\"\n    [options]=\"options\" style=\"width: 100%; height: 260px;\"></div>\n~~~\n\n`*.component.ts`\n\n~~~ts\nimport { Component } from '@angular/core';\n@Component({\n    moduleId: module.id,\n    selector: 'something-cmp',\n    templateUrl: './*.component.html'\n})\n\nexport class SomethingComponent {\n    this.data: any;\n\n    constructor() {\n        this.data = sampleData // setting data with correct format\n    }\n}\n~~~\n\n`*.module.ts`\n\n~~~ts\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SomeComponent } from './path/to/SomeCompont';\nimport { FlotModule } from './path/to/FlotModule/index';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FlotModule\n    ],\n    declarations: [\n        SomeComponent\n    ],\n    exports: [\n        SomeComponent\n    ]\n})\n~~~\n\n---\n\n#### Install Library\nThis part is not import in this article, everyone's project is different, all depends on different environment. Depending on the certain situation to choose a charting library, the concept is same for most of libraries.\n\nFor my current working situation, I need to use several different charting libraries, most of them are open source, free to use :\n\n1. [jQuery](https://jquery.com/)  `npm install --save jquery`\n2. [jquery-flot](https://www.npmjs.com/package/jquery-flot)  `npm install --save jquery-flot`\n3. [D3](https://d3js.org/)  `npm install --save d3`\n4. [C3](http://c3js.org/)  `npm install --save c3`\n5. nvD3, MetricsGraphics.js, etc...\n\n---\n\n#### Project Directory\nCreate a folder to holds all directive for global usage:\n\n~~~sh\n_ src\n  |_ app\n    |_ chart_libraries\n      |_ flot\n        |_ flot.directive.ts\n        |_ flot.module.ts\n        |_ index.ts\n      |_ D3\n        |_ ...\n      |_ C3\n        |_ ...\n      ...\n~~~\n\n---\n\n#### Create Directive for *Flot*\n\n##### Create directive.ts for Flot Directive\n\n`flot.directive.ts`\n\n~~~ts\nimport { Directive, ElementRef, Input } from '@angular/core';\ndeclare var jQuery: any;\n\n@Directive ({\n  selector: '[flot-chart]'\n})\n\nexport class FlotChart {\n    $el: any\n    @Input() data: any;\n    @Input() options: any;\n\n    constructor(el: ElementRef) {\n        this.$el = jQuery(el.nativeElement);\n    }\n\n    render(): void {\n        // set any default options you want for flot chart\n        jQuery.plot(this.$el, this.data, this.options || {\n            series: {\n              lines: {\n                show: true,\n                lineWidth: 1,\n                fill: false,\n                fillColor: { colors: [{ opacity: .001 }, { opacity: .5}] }\n              },\n              points: {\n                show: false,\n                fill: true\n              },\n              shadowSize: 0\n            },\n            xaxis: {\n              mode: 'time',\n              timezone: 'browser'\n            },\n            legend: false,\n            grid: {\n              show: false,\n              margin: 0,\n              labelMargin: 0,\n              axisMargin: 0,\n              hoverable: true,\n              clickable: true,\n              tickColor: 'rgba(255,255,255,1)',\n              borderWidth: 0\n            }\n        });\n    }\n\n    ngOnInit(): void {\n        this.render();\n    }\n}\n~~~\n\n`declare var jQuery: any` is declaring the jQuery variable so that jQuery function can be used in this directive file, in order to `declare var` please set up inside the `webpack`.\n\n`selector: '[flot-chart]'` inside the `@Directive` is very import, this is our HTML attribute selector, so that we can put this selector into HTML elements to use this directive.\n\n`this.$el = jQuery(el.nativeElement)` is assigned current directive host DOM to `$el`. read more documentation about [ElementRef](https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html)\n\n##### Create module.ts for Flot Directive\n\n`flot.module.ts`\n\n~~~ts\nimport { NgModule }      from '@angular/core';\n\nimport 'jquery-flot';\nimport 'jquery.flot.animator/jquery.flot.animator';\nimport 'jquery-flot/jquery.flot.time.js';\n\nimport { FlotChart } from './flot.directive';\n\n@NgModule({\n  declarations: [\n    FlotChart\n  ],\n  exports: [\n    FlotChart\n  ]\n})\nexport class FlotChartModule {\n}\n~~~\n\nImport all the Flot dependencies inside the module file, so that Flot can be properly use without errors.\n","slug":"2016-11-16-directive-for-charting-library","published":1,"updated":"2017-08-10T15:48:53.000Z","comments":1,"photos":[],"link":"","_id":"cj6866ecn0009xze59uix4k4i","content":"<h4 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h4><p>Writing a Angular 2 attribute directive for one of popular charting libraries.</p>\n<p>For example, <strong>Flot directive</strong> usage:</p>\n<p><code>*.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">flot-chart</span></span></div><div class=\"line\"><span class=\"tag\">    [<span class=\"attr\">data</span>]=<span class=\"string\">\"data\"</span></span></div><div class=\"line\"><span class=\"tag\">    [<span class=\"attr\">options</span>]=<span class=\"string\">\"options\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%; height: 260px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>*.component.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">    moduleId: <span class=\"built_in\">module</span>.id,</div><div class=\"line\">    selector: <span class=\"string\">'something-cmp'</span>,</div><div class=\"line\">    templateUrl: <span class=\"string\">'./*.component.html'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SomethingComponent &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.data: <span class=\"built_in\">any</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = sampleData <span class=\"comment\">// setting data with correct format</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>*.module.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; SomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./path/to/SomeCompont'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FlotModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./path/to/FlotModule/index'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">    imports: [</div><div class=\"line\">        CommonModule,</div><div class=\"line\">        FlotModule</div><div class=\"line\">    ],</div><div class=\"line\">    declarations: [</div><div class=\"line\">        SomeComponent</div><div class=\"line\">    ],</div><div class=\"line\">    exports: [</div><div class=\"line\">        SomeComponent</div><div class=\"line\">    ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Install-Library\"><a href=\"#Install-Library\" class=\"headerlink\" title=\"Install Library\"></a>Install Library</h4><p>This part is not import in this article, everyone’s project is different, all depends on different environment. Depending on the certain situation to choose a charting library, the concept is same for most of libraries.</p>\n<p>For my current working situation, I need to use several different charting libraries, most of them are open source, free to use :</p>\n<ol>\n<li><a href=\"https://jquery.com/\" target=\"_blank\" rel=\"external\">jQuery</a>  <code>npm install --save jquery</code></li>\n<li><a href=\"https://www.npmjs.com/package/jquery-flot\" target=\"_blank\" rel=\"external\">jquery-flot</a>  <code>npm install --save jquery-flot</code></li>\n<li><a href=\"https://d3js.org/\" target=\"_blank\" rel=\"external\">D3</a>  <code>npm install --save d3</code></li>\n<li><a href=\"http://c3js.org/\" target=\"_blank\" rel=\"external\">C3</a>  <code>npm install --save c3</code></li>\n<li>nvD3, MetricsGraphics.js, etc…</li>\n</ol>\n<hr>\n<h4 id=\"Project-Directory\"><a href=\"#Project-Directory\" class=\"headerlink\" title=\"Project Directory\"></a>Project Directory</h4><p>Create a folder to holds all directive for global usage:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">_ src</div><div class=\"line\">  |_ app</div><div class=\"line\">    |_ chart_libraries</div><div class=\"line\">      |_ flot</div><div class=\"line\">        |_ flot.directive.ts</div><div class=\"line\">        |_ flot.module.ts</div><div class=\"line\">        |_ index.ts</div><div class=\"line\">      |_ D3</div><div class=\"line\">        |_ ...</div><div class=\"line\">      |_ C3</div><div class=\"line\">        |_ ...</div><div class=\"line\">      ...</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Create-Directive-for-Flot\"><a href=\"#Create-Directive-for-Flot\" class=\"headerlink\" title=\"Create Directive for Flot\"></a>Create Directive for <em>Flot</em></h4><h5 id=\"Create-directive-ts-for-Flot-Directive\"><a href=\"#Create-directive-ts-for-Flot-Directive\" class=\"headerlink\" title=\"Create directive.ts for Flot Directive\"></a>Create directive.ts for Flot Directive</h5><p><code>flot.directive.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Directive, ElementRef, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">var</span> jQuery: <span class=\"built_in\">any</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Directive</span> (&#123;</div><div class=\"line\">  selector: <span class=\"string\">'[flot-chart]'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> FlotChart &#123;</div><div class=\"line\">    $el: <span class=\"built_in\">any</span></div><div class=\"line\">    <span class=\"meta\">@Input</span>() data: <span class=\"built_in\">any</span>;</div><div class=\"line\">    <span class=\"meta\">@Input</span>() options: <span class=\"built_in\">any</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">el: ElementRef</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$el = jQuery(el.nativeElement);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// set any default options you want for flot chart</span></div><div class=\"line\">        jQuery.plot(<span class=\"keyword\">this</span>.$el, <span class=\"keyword\">this</span>.data, <span class=\"keyword\">this</span>.options || &#123;</div><div class=\"line\">            series: &#123;</div><div class=\"line\">              lines: &#123;</div><div class=\"line\">                show: <span class=\"literal\">true</span>,</div><div class=\"line\">                lineWidth: <span class=\"number\">1</span>,</div><div class=\"line\">                fill: <span class=\"literal\">false</span>,</div><div class=\"line\">                fillColor: &#123; colors: [&#123; opacity: <span class=\"number\">.001</span> &#125;, &#123; opacity: <span class=\"number\">.5</span>&#125;] &#125;</div><div class=\"line\">              &#125;,</div><div class=\"line\">              points: &#123;</div><div class=\"line\">                show: <span class=\"literal\">false</span>,</div><div class=\"line\">                fill: <span class=\"literal\">true</span></div><div class=\"line\">              &#125;,</div><div class=\"line\">              shadowSize: <span class=\"number\">0</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            xaxis: &#123;</div><div class=\"line\">              mode: <span class=\"string\">'time'</span>,</div><div class=\"line\">              timezone: <span class=\"string\">'browser'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            legend: <span class=\"literal\">false</span>,</div><div class=\"line\">            grid: &#123;</div><div class=\"line\">              show: <span class=\"literal\">false</span>,</div><div class=\"line\">              margin: <span class=\"number\">0</span>,</div><div class=\"line\">              labelMargin: <span class=\"number\">0</span>,</div><div class=\"line\">              axisMargin: <span class=\"number\">0</span>,</div><div class=\"line\">              hoverable: <span class=\"literal\">true</span>,</div><div class=\"line\">              clickable: <span class=\"literal\">true</span>,</div><div class=\"line\">              tickColor: <span class=\"string\">'rgba(255,255,255,1)'</span>,</div><div class=\"line\">              borderWidth: <span class=\"number\">0</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ngOnInit(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.render();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>declare var jQuery: any</code> is declaring the jQuery variable so that jQuery function can be used in this directive file, in order to <code>declare var</code> please set up inside the <code>webpack</code>.</p>\n<p><code>selector: &#39;[flot-chart]&#39;</code> inside the <code>@Directive</code> is very import, this is our HTML attribute selector, so that we can put this selector into HTML elements to use this directive.</p>\n<p><code>this.$el = jQuery(el.nativeElement)</code> is assigned current directive host DOM to <code>$el</code>. read more documentation about <a href=\"https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html\" target=\"_blank\" rel=\"external\">ElementRef</a></p>\n<h5 id=\"Create-module-ts-for-Flot-Directive\"><a href=\"#Create-module-ts-for-Flot-Directive\" class=\"headerlink\" title=\"Create module.ts for Flot Directive\"></a>Create module.ts for Flot Directive</h5><p><code>flot.module.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125;      <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'jquery-flot'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'jquery.flot.animator/jquery.flot.animator'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'jquery-flot/jquery.flot.time.js'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FlotChart &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./flot.directive'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  declarations: [</div><div class=\"line\">    FlotChart</div><div class=\"line\">  ],</div><div class=\"line\">  exports: [</div><div class=\"line\">    FlotChart</div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> FlotChartModule &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Import all the Flot dependencies inside the module file, so that Flot can be properly use without errors.</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h4><p>Writing a Angular 2 attribute directive for one of popular charting libraries.</p>\n<p>For example, <strong>Flot directive</strong> usage:</p>\n<p><code>*.component.html</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">flot-chart</span></span></div><div class=\"line\"><span class=\"tag\">    [<span class=\"attr\">data</span>]=<span class=\"string\">\"data\"</span></span></div><div class=\"line\"><span class=\"tag\">    [<span class=\"attr\">options</span>]=<span class=\"string\">\"options\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%; height: 260px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>*.component.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"meta\">@Component</span>(&#123;</div><div class=\"line\">    moduleId: <span class=\"built_in\">module</span>.id,</div><div class=\"line\">    selector: <span class=\"string\">'something-cmp'</span>,</div><div class=\"line\">    templateUrl: <span class=\"string\">'./*.component.html'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> SomethingComponent &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.data: <span class=\"built_in\">any</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.data = sampleData <span class=\"comment\">// setting data with correct format</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>*.module.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/common'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; SomeComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./path/to/SomeCompont'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FlotModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./path/to/FlotModule/index'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">    imports: [</div><div class=\"line\">        CommonModule,</div><div class=\"line\">        FlotModule</div><div class=\"line\">    ],</div><div class=\"line\">    declarations: [</div><div class=\"line\">        SomeComponent</div><div class=\"line\">    ],</div><div class=\"line\">    exports: [</div><div class=\"line\">        SomeComponent</div><div class=\"line\">    ]</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Install-Library\"><a href=\"#Install-Library\" class=\"headerlink\" title=\"Install Library\"></a>Install Library</h4><p>This part is not import in this article, everyone’s project is different, all depends on different environment. Depending on the certain situation to choose a charting library, the concept is same for most of libraries.</p>\n<p>For my current working situation, I need to use several different charting libraries, most of them are open source, free to use :</p>\n<ol>\n<li><a href=\"https://jquery.com/\" target=\"_blank\" rel=\"external\">jQuery</a>  <code>npm install --save jquery</code></li>\n<li><a href=\"https://www.npmjs.com/package/jquery-flot\" target=\"_blank\" rel=\"external\">jquery-flot</a>  <code>npm install --save jquery-flot</code></li>\n<li><a href=\"https://d3js.org/\" target=\"_blank\" rel=\"external\">D3</a>  <code>npm install --save d3</code></li>\n<li><a href=\"http://c3js.org/\" target=\"_blank\" rel=\"external\">C3</a>  <code>npm install --save c3</code></li>\n<li>nvD3, MetricsGraphics.js, etc…</li>\n</ol>\n<hr>\n<h4 id=\"Project-Directory\"><a href=\"#Project-Directory\" class=\"headerlink\" title=\"Project Directory\"></a>Project Directory</h4><p>Create a folder to holds all directive for global usage:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">_ src</div><div class=\"line\">  |_ app</div><div class=\"line\">    |_ chart_libraries</div><div class=\"line\">      |_ flot</div><div class=\"line\">        |_ flot.directive.ts</div><div class=\"line\">        |_ flot.module.ts</div><div class=\"line\">        |_ index.ts</div><div class=\"line\">      |_ D3</div><div class=\"line\">        |_ ...</div><div class=\"line\">      |_ C3</div><div class=\"line\">        |_ ...</div><div class=\"line\">      ...</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Create-Directive-for-Flot\"><a href=\"#Create-Directive-for-Flot\" class=\"headerlink\" title=\"Create Directive for Flot\"></a>Create Directive for <em>Flot</em></h4><h5 id=\"Create-directive-ts-for-Flot-Directive\"><a href=\"#Create-directive-ts-for-Flot-Directive\" class=\"headerlink\" title=\"Create directive.ts for Flot Directive\"></a>Create directive.ts for Flot Directive</h5><p><code>flot.directive.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Directive, ElementRef, Input &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">var</span> jQuery: <span class=\"built_in\">any</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@Directive</span> (&#123;</div><div class=\"line\">  selector: <span class=\"string\">'[flot-chart]'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> FlotChart &#123;</div><div class=\"line\">    $el: <span class=\"built_in\">any</span></div><div class=\"line\">    <span class=\"meta\">@Input</span>() data: <span class=\"built_in\">any</span>;</div><div class=\"line\">    <span class=\"meta\">@Input</span>() options: <span class=\"built_in\">any</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(<span class=\"params\">el: ElementRef</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.$el = jQuery(el.nativeElement);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    render(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// set any default options you want for flot chart</span></div><div class=\"line\">        jQuery.plot(<span class=\"keyword\">this</span>.$el, <span class=\"keyword\">this</span>.data, <span class=\"keyword\">this</span>.options || &#123;</div><div class=\"line\">            series: &#123;</div><div class=\"line\">              lines: &#123;</div><div class=\"line\">                show: <span class=\"literal\">true</span>,</div><div class=\"line\">                lineWidth: <span class=\"number\">1</span>,</div><div class=\"line\">                fill: <span class=\"literal\">false</span>,</div><div class=\"line\">                fillColor: &#123; colors: [&#123; opacity: <span class=\"number\">.001</span> &#125;, &#123; opacity: <span class=\"number\">.5</span>&#125;] &#125;</div><div class=\"line\">              &#125;,</div><div class=\"line\">              points: &#123;</div><div class=\"line\">                show: <span class=\"literal\">false</span>,</div><div class=\"line\">                fill: <span class=\"literal\">true</span></div><div class=\"line\">              &#125;,</div><div class=\"line\">              shadowSize: <span class=\"number\">0</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            xaxis: &#123;</div><div class=\"line\">              mode: <span class=\"string\">'time'</span>,</div><div class=\"line\">              timezone: <span class=\"string\">'browser'</span></div><div class=\"line\">            &#125;,</div><div class=\"line\">            legend: <span class=\"literal\">false</span>,</div><div class=\"line\">            grid: &#123;</div><div class=\"line\">              show: <span class=\"literal\">false</span>,</div><div class=\"line\">              margin: <span class=\"number\">0</span>,</div><div class=\"line\">              labelMargin: <span class=\"number\">0</span>,</div><div class=\"line\">              axisMargin: <span class=\"number\">0</span>,</div><div class=\"line\">              hoverable: <span class=\"literal\">true</span>,</div><div class=\"line\">              clickable: <span class=\"literal\">true</span>,</div><div class=\"line\">              tickColor: <span class=\"string\">'rgba(255,255,255,1)'</span>,</div><div class=\"line\">              borderWidth: <span class=\"number\">0</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    ngOnInit(): <span class=\"built_in\">void</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.render();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>declare var jQuery: any</code> is declaring the jQuery variable so that jQuery function can be used in this directive file, in order to <code>declare var</code> please set up inside the <code>webpack</code>.</p>\n<p><code>selector: &#39;[flot-chart]&#39;</code> inside the <code>@Directive</code> is very import, this is our HTML attribute selector, so that we can put this selector into HTML elements to use this directive.</p>\n<p><code>this.$el = jQuery(el.nativeElement)</code> is assigned current directive host DOM to <code>$el</code>. read more documentation about <a href=\"https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html\" target=\"_blank\" rel=\"external\">ElementRef</a></p>\n<h5 id=\"Create-module-ts-for-Flot-Directive\"><a href=\"#Create-module-ts-for-Flot-Directive\" class=\"headerlink\" title=\"Create module.ts for Flot Directive\"></a>Create module.ts for Flot Directive</h5><p><code>flot.module.ts</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125;      <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'jquery-flot'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'jquery.flot.animator/jquery.flot.animator'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'jquery-flot/jquery.flot.time.js'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; FlotChart &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./flot.directive'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</div><div class=\"line\">  declarations: [</div><div class=\"line\">    FlotChart</div><div class=\"line\">  ],</div><div class=\"line\">  exports: [</div><div class=\"line\">    FlotChart</div><div class=\"line\">  ]</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> FlotChartModule &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Import all the Flot dependencies inside the module file, so that Flot can be properly use without errors.</p>\n"},{"title":"Continuous Integration","layout":"post","date":"2017-01-21T02:37:00.000Z","author":"Bo Chen","_content":"\n### What is CI (continuous integration)\n\nContinuous integration refers to the build and unit testing stages of the software release process. \nEvery revision that is committed triggers an automated build and test.\n\n![CI](/images/posts/2017/continuous_integration.png)\n---\n\n### Travis CI + Github + Firebase + Angular 2\n\n1. Firebase init in project\n2. Writing code in local repo\n3. Pushing to Github repo\n4. Building code production in Travis CI\n5. Deploying production code to Firebase hosting\n\n---\n\n#### Firebase init\n\nBefore using [Google Firebase](https://firebase.google.com/), need to apply for \nfirebase account.\n\nThere are many features which Firebase provides for us, such as Authentication, \nDatabase, Storage, Hosting... \n\nIn this blog, only need to use Hosting feature, which is free.\n\nDo the Firebase initialization in the existing project directory\n\n~~~sh\nnpm install --save firebase-tools\n\nfirebase init\n~~~\n\nFollowing the `firebase init` instruction to config your project, \nfor my case, I'm building an Angular2 project, so I choose `dist` as my public \ndirectory.\n\nAfter the initialization, need an access token for CI as environment variable.\n[Using with CI Systems](https://github.com/firebase/firebase-tools#using-with-ci-systems)\n\nthen do a deploy test:\n\n~~~sh\nfirebase deploy\n~~~\n\n---\n\n#### Using Travis CI\nGreate documentation the complete beginner [here](https://docs.travis-ci.com/user/for-beginners)\n\n- Connecting Github account to Travis CI\n- Choosing Github project repo to async\n- Setting Firebase Token as the environment variable in Travis\n- Writing a `travis.yml` config file in your project directory \n[Customizing the Build](https://docs.travis-ci.com/user/customizing-the-build/)\n\nIn order to deploy project from Travis, inside the `travis.yml`, add:\n\n~~~yml\nafter_success:\n  - firebase deploy --token ${FIREBASE_TOKEN}\n~~~\n\nwrite script to build your project:\n\n~~~yml\nscript:\n  - npm install\n  - npm run build:prod\n~~~\n\n---\n\n#### Push change to Github, build prod on Travis CI, Deploy to Firebase\nDone!\n\nEverything is automated!\n\nAwesome! 😎\n\n\n","source":"_posts/2017-01-20-ci-deploy.md","raw":"---\ntitle: Continuous Integration\nlayout: post\ndate:   2017-01-20 21:37:00\ntags: ['Angular 2', 'Firebase', 'Travis CI', 'Deployment', 'Github']\nauthor: \"Bo Chen\"\n---\n\n### What is CI (continuous integration)\n\nContinuous integration refers to the build and unit testing stages of the software release process. \nEvery revision that is committed triggers an automated build and test.\n\n![CI](/images/posts/2017/continuous_integration.png)\n---\n\n### Travis CI + Github + Firebase + Angular 2\n\n1. Firebase init in project\n2. Writing code in local repo\n3. Pushing to Github repo\n4. Building code production in Travis CI\n5. Deploying production code to Firebase hosting\n\n---\n\n#### Firebase init\n\nBefore using [Google Firebase](https://firebase.google.com/), need to apply for \nfirebase account.\n\nThere are many features which Firebase provides for us, such as Authentication, \nDatabase, Storage, Hosting... \n\nIn this blog, only need to use Hosting feature, which is free.\n\nDo the Firebase initialization in the existing project directory\n\n~~~sh\nnpm install --save firebase-tools\n\nfirebase init\n~~~\n\nFollowing the `firebase init` instruction to config your project, \nfor my case, I'm building an Angular2 project, so I choose `dist` as my public \ndirectory.\n\nAfter the initialization, need an access token for CI as environment variable.\n[Using with CI Systems](https://github.com/firebase/firebase-tools#using-with-ci-systems)\n\nthen do a deploy test:\n\n~~~sh\nfirebase deploy\n~~~\n\n---\n\n#### Using Travis CI\nGreate documentation the complete beginner [here](https://docs.travis-ci.com/user/for-beginners)\n\n- Connecting Github account to Travis CI\n- Choosing Github project repo to async\n- Setting Firebase Token as the environment variable in Travis\n- Writing a `travis.yml` config file in your project directory \n[Customizing the Build](https://docs.travis-ci.com/user/customizing-the-build/)\n\nIn order to deploy project from Travis, inside the `travis.yml`, add:\n\n~~~yml\nafter_success:\n  - firebase deploy --token ${FIREBASE_TOKEN}\n~~~\n\nwrite script to build your project:\n\n~~~yml\nscript:\n  - npm install\n  - npm run build:prod\n~~~\n\n---\n\n#### Push change to Github, build prod on Travis CI, Deploy to Firebase\nDone!\n\nEverything is automated!\n\nAwesome! 😎\n\n\n","slug":"2017-01-20-ci-deploy","published":1,"updated":"2017-08-11T15:01:26.000Z","comments":1,"photos":[],"link":"","_id":"cj6866eco000bxze53d7yfewu","content":"<h3 id=\"What-is-CI-continuous-integration\"><a href=\"#What-is-CI-continuous-integration\" class=\"headerlink\" title=\"What is CI (continuous integration)\"></a>What is CI (continuous integration)</h3><p>Continuous integration refers to the build and unit testing stages of the software release process.<br>Every revision that is committed triggers an automated build and test.</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/images/posts/2017/continuous_integration.png\" alt=\"CI\"></h2><h3 id=\"Travis-CI-Github-Firebase-Angular-2\"><a href=\"#Travis-CI-Github-Firebase-Angular-2\" class=\"headerlink\" title=\"Travis CI + Github + Firebase + Angular 2\"></a>Travis CI + Github + Firebase + Angular 2</h3><ol>\n<li>Firebase init in project</li>\n<li>Writing code in local repo</li>\n<li>Pushing to Github repo</li>\n<li>Building code production in Travis CI</li>\n<li>Deploying production code to Firebase hosting</li>\n</ol>\n<hr>\n<h4 id=\"Firebase-init\"><a href=\"#Firebase-init\" class=\"headerlink\" title=\"Firebase init\"></a>Firebase init</h4><p>Before using <a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"external\">Google Firebase</a>, need to apply for<br>firebase account.</p>\n<p>There are many features which Firebase provides for us, such as Authentication,<br>Database, Storage, Hosting… </p>\n<p>In this blog, only need to use Hosting feature, which is free.</p>\n<p>Do the Firebase initialization in the existing project directory</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save firebase-tools</div><div class=\"line\"></div><div class=\"line\">firebase init</div></pre></td></tr></table></figure>\n<p>Following the <code>firebase init</code> instruction to config your project,<br>for my case, I’m building an Angular2 project, so I choose <code>dist</code> as my public<br>directory.</p>\n<p>After the initialization, need an access token for CI as environment variable.<br><a href=\"https://github.com/firebase/firebase-tools#using-with-ci-systems\" target=\"_blank\" rel=\"external\">Using with CI Systems</a></p>\n<p>then do a deploy test:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">firebase deploy</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Using-Travis-CI\"><a href=\"#Using-Travis-CI\" class=\"headerlink\" title=\"Using Travis CI\"></a>Using Travis CI</h4><p>Greate documentation the complete beginner <a href=\"https://docs.travis-ci.com/user/for-beginners\" target=\"_blank\" rel=\"external\">here</a></p>\n<ul>\n<li>Connecting Github account to Travis CI</li>\n<li>Choosing Github project repo to async</li>\n<li>Setting Firebase Token as the environment variable in Travis</li>\n<li>Writing a <code>travis.yml</code> config file in your project directory<br><a href=\"https://docs.travis-ci.com/user/customizing-the-build/\" target=\"_blank\" rel=\"external\">Customizing the Build</a></li>\n</ul>\n<p>In order to deploy project from Travis, inside the <code>travis.yml</code>, add:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">after_success:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">firebase</span> <span class=\"string\">deploy</span> <span class=\"bullet\">--token</span> <span class=\"string\">$&#123;FIREBASE_TOKEN&#125;</span></div></pre></td></tr></table></figure>\n<p>write script to build your project:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"attr\">build:prod</span></div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Push-change-to-Github-build-prod-on-Travis-CI-Deploy-to-Firebase\"><a href=\"#Push-change-to-Github-build-prod-on-Travis-CI-Deploy-to-Firebase\" class=\"headerlink\" title=\"Push change to Github, build prod on Travis CI, Deploy to Firebase\"></a>Push change to Github, build prod on Travis CI, Deploy to Firebase</h4><p>Done!</p>\n<p>Everything is automated!</p>\n<p>Awesome! 😎</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"What-is-CI-continuous-integration\"><a href=\"#What-is-CI-continuous-integration\" class=\"headerlink\" title=\"What is CI (continuous integration)\"></a>What is CI (continuous integration)</h3><p>Continuous integration refers to the build and unit testing stages of the software release process.<br>Every revision that is committed triggers an automated build and test.</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"/images/posts/2017/continuous_integration.png\" alt=\"CI\"></h2><h3 id=\"Travis-CI-Github-Firebase-Angular-2\"><a href=\"#Travis-CI-Github-Firebase-Angular-2\" class=\"headerlink\" title=\"Travis CI + Github + Firebase + Angular 2\"></a>Travis CI + Github + Firebase + Angular 2</h3><ol>\n<li>Firebase init in project</li>\n<li>Writing code in local repo</li>\n<li>Pushing to Github repo</li>\n<li>Building code production in Travis CI</li>\n<li>Deploying production code to Firebase hosting</li>\n</ol>\n<hr>\n<h4 id=\"Firebase-init\"><a href=\"#Firebase-init\" class=\"headerlink\" title=\"Firebase init\"></a>Firebase init</h4><p>Before using <a href=\"https://firebase.google.com/\" target=\"_blank\" rel=\"external\">Google Firebase</a>, need to apply for<br>firebase account.</p>\n<p>There are many features which Firebase provides for us, such as Authentication,<br>Database, Storage, Hosting… </p>\n<p>In this blog, only need to use Hosting feature, which is free.</p>\n<p>Do the Firebase initialization in the existing project directory</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save firebase-tools</div><div class=\"line\"></div><div class=\"line\">firebase init</div></pre></td></tr></table></figure>\n<p>Following the <code>firebase init</code> instruction to config your project,<br>for my case, I’m building an Angular2 project, so I choose <code>dist</code> as my public<br>directory.</p>\n<p>After the initialization, need an access token for CI as environment variable.<br><a href=\"https://github.com/firebase/firebase-tools#using-with-ci-systems\" target=\"_blank\" rel=\"external\">Using with CI Systems</a></p>\n<p>then do a deploy test:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">firebase deploy</div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Using-Travis-CI\"><a href=\"#Using-Travis-CI\" class=\"headerlink\" title=\"Using Travis CI\"></a>Using Travis CI</h4><p>Greate documentation the complete beginner <a href=\"https://docs.travis-ci.com/user/for-beginners\" target=\"_blank\" rel=\"external\">here</a></p>\n<ul>\n<li>Connecting Github account to Travis CI</li>\n<li>Choosing Github project repo to async</li>\n<li>Setting Firebase Token as the environment variable in Travis</li>\n<li>Writing a <code>travis.yml</code> config file in your project directory<br><a href=\"https://docs.travis-ci.com/user/customizing-the-build/\" target=\"_blank\" rel=\"external\">Customizing the Build</a></li>\n</ul>\n<p>In order to deploy project from Travis, inside the <code>travis.yml</code>, add:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">after_success:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">firebase</span> <span class=\"string\">deploy</span> <span class=\"bullet\">--token</span> <span class=\"string\">$&#123;FIREBASE_TOKEN&#125;</span></div></pre></td></tr></table></figure>\n<p>write script to build your project:</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">script:</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></div><div class=\"line\"><span class=\"bullet\">  -</span> <span class=\"string\">npm</span> <span class=\"string\">run</span> <span class=\"attr\">build:prod</span></div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"Push-change-to-Github-build-prod-on-Travis-CI-Deploy-to-Firebase\"><a href=\"#Push-change-to-Github-build-prod-on-Travis-CI-Deploy-to-Firebase\" class=\"headerlink\" title=\"Push change to Github, build prod on Travis CI, Deploy to Firebase\"></a>Push change to Github, build prod on Travis CI, Deploy to Firebase</h4><p>Done!</p>\n<p>Everything is automated!</p>\n<p>Awesome! 😎</p>\n"},{"title":"Write a Custom Filtering Pipe","layout":"post","date":"2017-02-20T23:00:00.000Z","author":"Bo Chen","_content":"\n#### Goal\nWrite your own custom filtering pipe\n\nThis pipe is be able: \n - filtering data by a single input string \n - filtering data by a single string with multi condition separating by space\n - treat all input as string\n\n#### What is pipe in Angular 2\nPipes transform displayed values within a template.\n\nBasically pipe is one kind of musk, transform data displayed in Agular 2 HTML template.\n\nAngular comes with many build in pipes already, for basic usage: `DatePipe`, `UpperCasePipe`,\n`LowerCasePipe`, `CurrencyPipe` and `PercentPipe`.\n\nBut for some cases, we need specific pipes for specific scenarios.\n\nFor example, currently I need a pipe can filter table data for me, with this pipe, \nI'm be able to filter table data by specific input, to narrow down the table data.\n\n#### Custom Pipes\nWe can write our own custom pipes, by creating a pipe class, and imported this pipe module.\n\n\n~~~js\nimport { Pipe, PipeTransform } from '@angular/core';\n\n// # Filter Array of Objects\n\n@Pipe ({ name: 'filter' })\nexport class FilterArrayPipe implements PipeTransform  {\n  transform(value: Array<any>, arg1: any) {\n    let result: any;\n\n    // split input arg into array by space\n    if (!arg1 || arg1.trim() === '') return value;\n\n    // split input arg into array, filter out not valid string\n    let argArr = arg1.split(' ').filter((item) => { return item !== ''; });\n\n    // base on input arg array side return value\n    if (argArr.length === 0) {\n      return value;\n    } else if (argArr.length === 1) {\n      /**\n       * one input string, through through data if match, return data\n       */\n\n      let filter = argArr[0];\n      result = value.filter((item) => {\n        let str = JSON.stringify(item);\n        if (str.toLowerCase().indexOf(filter.toLowerCase()) !== -1) {\n          return true;\n        }else {\n          return false;\n        }\n      });\n\n    } else if (argArr.length > 1) {\n      /**\n       * filter with multi column features\n       */\n      let i = 0;  // pointer for arg array\n      let data = value;\n\n      // literate arg array, keep filter result\n      while (i < argArr.length) {\n        result = data.filter((item) => {\n          let str = JSON.stringify(item);\n          if (str.toLowerCase().indexOf(argArr[i].toLowerCase()) !== -1) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n\n        // update target array\n        data = result;\n        i++;\n      }\n    }\n\n    return result;\n  }\n}\n~~~\n\nThis pipe definition reveals the following key points:\n\n- To tell Angular this pipe's name is `filter`, apply `{ name: 'filter' }` in @Pipe decorator.\n\n- A pipe is a class decorated with pipe metadata, in my pipe module, meadata is `value`\n\n- The pipe class implements the `PipeTransform` interface's transform method that accepts an input value followed by optional parameters and returns the transformed value. Basically we writting all the logic\nin this method.\n\n- There will be one additional argument to the transform method for each parameter passed to the pipe. Your pipe has one such parameter: the exponent. Also we can create as many argument as we want.\n\nFor example:\n\n~~~js\ntransform(value: any, arg1: any, arg2: any, arg3: any) {\n\n}\n~~~\n\nusage:\n\n~~~html\n<div *ngFor=\"let item of data | filter: arg1 : arg2 : arg3\">\n  {{item}}\n</div>\n~~~\n\n- To tell Angular that this is a pipe, you apply the @Pipe decorator, which you import from the core Angular library. The @Pipe decorator allows you to define the pipe name that you'll use within template expressions.\nIt must be a valid JavaScript identifier.\n\n#### Import Pipes module in app\n\nAt last, don't forget to **import** it in the module in order to use it.\n","source":"_posts/2017-02-20-custom-filter-pipe.md","raw":"---\ntitle: Write a Custom Filtering Pipe\nlayout: post\ndate:   2017-02-20 18:00:00 \ntags: \n  - Angular 2\n  - filtering\n  - pipe\n  - how to\nauthor: \"Bo Chen\"\n---\n\n#### Goal\nWrite your own custom filtering pipe\n\nThis pipe is be able: \n - filtering data by a single input string \n - filtering data by a single string with multi condition separating by space\n - treat all input as string\n\n#### What is pipe in Angular 2\nPipes transform displayed values within a template.\n\nBasically pipe is one kind of musk, transform data displayed in Agular 2 HTML template.\n\nAngular comes with many build in pipes already, for basic usage: `DatePipe`, `UpperCasePipe`,\n`LowerCasePipe`, `CurrencyPipe` and `PercentPipe`.\n\nBut for some cases, we need specific pipes for specific scenarios.\n\nFor example, currently I need a pipe can filter table data for me, with this pipe, \nI'm be able to filter table data by specific input, to narrow down the table data.\n\n#### Custom Pipes\nWe can write our own custom pipes, by creating a pipe class, and imported this pipe module.\n\n\n~~~js\nimport { Pipe, PipeTransform } from '@angular/core';\n\n// # Filter Array of Objects\n\n@Pipe ({ name: 'filter' })\nexport class FilterArrayPipe implements PipeTransform  {\n  transform(value: Array<any>, arg1: any) {\n    let result: any;\n\n    // split input arg into array by space\n    if (!arg1 || arg1.trim() === '') return value;\n\n    // split input arg into array, filter out not valid string\n    let argArr = arg1.split(' ').filter((item) => { return item !== ''; });\n\n    // base on input arg array side return value\n    if (argArr.length === 0) {\n      return value;\n    } else if (argArr.length === 1) {\n      /**\n       * one input string, through through data if match, return data\n       */\n\n      let filter = argArr[0];\n      result = value.filter((item) => {\n        let str = JSON.stringify(item);\n        if (str.toLowerCase().indexOf(filter.toLowerCase()) !== -1) {\n          return true;\n        }else {\n          return false;\n        }\n      });\n\n    } else if (argArr.length > 1) {\n      /**\n       * filter with multi column features\n       */\n      let i = 0;  // pointer for arg array\n      let data = value;\n\n      // literate arg array, keep filter result\n      while (i < argArr.length) {\n        result = data.filter((item) => {\n          let str = JSON.stringify(item);\n          if (str.toLowerCase().indexOf(argArr[i].toLowerCase()) !== -1) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n\n        // update target array\n        data = result;\n        i++;\n      }\n    }\n\n    return result;\n  }\n}\n~~~\n\nThis pipe definition reveals the following key points:\n\n- To tell Angular this pipe's name is `filter`, apply `{ name: 'filter' }` in @Pipe decorator.\n\n- A pipe is a class decorated with pipe metadata, in my pipe module, meadata is `value`\n\n- The pipe class implements the `PipeTransform` interface's transform method that accepts an input value followed by optional parameters and returns the transformed value. Basically we writting all the logic\nin this method.\n\n- There will be one additional argument to the transform method for each parameter passed to the pipe. Your pipe has one such parameter: the exponent. Also we can create as many argument as we want.\n\nFor example:\n\n~~~js\ntransform(value: any, arg1: any, arg2: any, arg3: any) {\n\n}\n~~~\n\nusage:\n\n~~~html\n<div *ngFor=\"let item of data | filter: arg1 : arg2 : arg3\">\n  {{item}}\n</div>\n~~~\n\n- To tell Angular that this is a pipe, you apply the @Pipe decorator, which you import from the core Angular library. The @Pipe decorator allows you to define the pipe name that you'll use within template expressions.\nIt must be a valid JavaScript identifier.\n\n#### Import Pipes module in app\n\nAt last, don't forget to **import** it in the module in order to use it.\n","slug":"2017-02-20-custom-filter-pipe","published":1,"updated":"2017-08-11T14:55:53.000Z","comments":1,"photos":[],"link":"","_id":"cj6866ecq000cxze5s2kx3dpv","content":"<h4 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h4><p>Write your own custom filtering pipe</p>\n<p>This pipe is be able: </p>\n<ul>\n<li>filtering data by a single input string </li>\n<li>filtering data by a single string with multi condition separating by space</li>\n<li>treat all input as string</li>\n</ul>\n<h4 id=\"What-is-pipe-in-Angular-2\"><a href=\"#What-is-pipe-in-Angular-2\" class=\"headerlink\" title=\"What is pipe in Angular 2\"></a>What is pipe in Angular 2</h4><p>Pipes transform displayed values within a template.</p>\n<p>Basically pipe is one kind of musk, transform data displayed in Agular 2 HTML template.</p>\n<p>Angular comes with many build in pipes already, for basic usage: <code>DatePipe</code>, <code>UpperCasePipe</code>,<br><code>LowerCasePipe</code>, <code>CurrencyPipe</code> and <code>PercentPipe</code>.</p>\n<p>But for some cases, we need specific pipes for specific scenarios.</p>\n<p>For example, currently I need a pipe can filter table data for me, with this pipe,<br>I’m be able to filter table data by specific input, to narrow down the table data.</p>\n<h4 id=\"Custom-Pipes\"><a href=\"#Custom-Pipes\" class=\"headerlink\" title=\"Custom Pipes\"></a>Custom Pipes</h4><p>We can write our own custom pipes, by creating a pipe class, and imported this pipe module.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Pipe, PipeTransform &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// # Filter Array of Objects</span></div><div class=\"line\"></div><div class=\"line\">@Pipe (&#123; <span class=\"attr\">name</span>: <span class=\"string\">'filter'</span> &#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterArrayPipe</span> <span class=\"title\">implements</span> <span class=\"title\">PipeTransform</span>  </span>&#123;</div><div class=\"line\">  transform(value: <span class=\"built_in\">Array</span>&lt;any&gt;, <span class=\"attr\">arg1</span>: any) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result: any;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// split input arg into array by space</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!arg1 || arg1.trim() === <span class=\"string\">''</span>) <span class=\"keyword\">return</span> value;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// split input arg into array, filter out not valid string</span></div><div class=\"line\">    <span class=\"keyword\">let</span> argArr = arg1.split(<span class=\"string\">' '</span>).filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> item !== <span class=\"string\">''</span>; &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// base on input arg array side return value</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (argArr.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (argArr.length === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">       * one input string, through through data if match, return data</span></div><div class=\"line\"><span class=\"comment\">       */</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">let</span> filter = argArr[<span class=\"number\">0</span>];</div><div class=\"line\">      result = value.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> str = <span class=\"built_in\">JSON</span>.stringify(item);</div><div class=\"line\">        <span class=\"keyword\">if</span> (str.toLowerCase().indexOf(filter.toLowerCase()) !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (argArr.length &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">       * filter with multi column features</span></div><div class=\"line\"><span class=\"comment\">       */</span></div><div class=\"line\">      <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;  <span class=\"comment\">// pointer for arg array</span></div><div class=\"line\">      <span class=\"keyword\">let</span> data = value;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// literate arg array, keep filter result</span></div><div class=\"line\">      <span class=\"keyword\">while</span> (i &lt; argArr.length) &#123;</div><div class=\"line\">        result = data.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">let</span> str = <span class=\"built_in\">JSON</span>.stringify(item);</div><div class=\"line\">          <span class=\"keyword\">if</span> (str.toLowerCase().indexOf(argArr[i].toLowerCase()) !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// update target array</span></div><div class=\"line\">        data = result;</div><div class=\"line\">        i++;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This pipe definition reveals the following key points:</p>\n<ul>\n<li><p>To tell Angular this pipe’s name is <code>filter</code>, apply <code>{ name: &#39;filter&#39; }</code> in @Pipe decorator.</p>\n</li>\n<li><p>A pipe is a class decorated with pipe metadata, in my pipe module, meadata is <code>value</code></p>\n</li>\n<li><p>The pipe class implements the <code>PipeTransform</code> interface’s transform method that accepts an input value followed by optional parameters and returns the transformed value. Basically we writting all the logic<br>in this method.</p>\n</li>\n<li><p>There will be one additional argument to the transform method for each parameter passed to the pipe. Your pipe has one such parameter: the exponent. Also we can create as many argument as we want.</p>\n</li>\n</ul>\n<p>For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">transform(value: any, <span class=\"attr\">arg1</span>: any, <span class=\"attr\">arg2</span>: any, <span class=\"attr\">arg3</span>: any) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>usage:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let item of data | filter: arg1 : arg2 : arg3\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123;item&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>To tell Angular that this is a pipe, you apply the @Pipe decorator, which you import from the core Angular library. The @Pipe decorator allows you to define the pipe name that you’ll use within template expressions.<br>It must be a valid JavaScript identifier.</li>\n</ul>\n<h4 id=\"Import-Pipes-module-in-app\"><a href=\"#Import-Pipes-module-in-app\" class=\"headerlink\" title=\"Import Pipes module in app\"></a>Import Pipes module in app</h4><p>At last, don’t forget to <strong>import</strong> it in the module in order to use it.</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Goal\"><a href=\"#Goal\" class=\"headerlink\" title=\"Goal\"></a>Goal</h4><p>Write your own custom filtering pipe</p>\n<p>This pipe is be able: </p>\n<ul>\n<li>filtering data by a single input string </li>\n<li>filtering data by a single string with multi condition separating by space</li>\n<li>treat all input as string</li>\n</ul>\n<h4 id=\"What-is-pipe-in-Angular-2\"><a href=\"#What-is-pipe-in-Angular-2\" class=\"headerlink\" title=\"What is pipe in Angular 2\"></a>What is pipe in Angular 2</h4><p>Pipes transform displayed values within a template.</p>\n<p>Basically pipe is one kind of musk, transform data displayed in Agular 2 HTML template.</p>\n<p>Angular comes with many build in pipes already, for basic usage: <code>DatePipe</code>, <code>UpperCasePipe</code>,<br><code>LowerCasePipe</code>, <code>CurrencyPipe</code> and <code>PercentPipe</code>.</p>\n<p>But for some cases, we need specific pipes for specific scenarios.</p>\n<p>For example, currently I need a pipe can filter table data for me, with this pipe,<br>I’m be able to filter table data by specific input, to narrow down the table data.</p>\n<h4 id=\"Custom-Pipes\"><a href=\"#Custom-Pipes\" class=\"headerlink\" title=\"Custom Pipes\"></a>Custom Pipes</h4><p>We can write our own custom pipes, by creating a pipe class, and imported this pipe module.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Pipe, PipeTransform &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@angular/core'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// # Filter Array of Objects</span></div><div class=\"line\"></div><div class=\"line\">@Pipe (&#123; <span class=\"attr\">name</span>: <span class=\"string\">'filter'</span> &#125;)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FilterArrayPipe</span> <span class=\"title\">implements</span> <span class=\"title\">PipeTransform</span>  </span>&#123;</div><div class=\"line\">  transform(value: <span class=\"built_in\">Array</span>&lt;any&gt;, <span class=\"attr\">arg1</span>: any) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result: any;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// split input arg into array by space</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!arg1 || arg1.trim() === <span class=\"string\">''</span>) <span class=\"keyword\">return</span> value;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// split input arg into array, filter out not valid string</span></div><div class=\"line\">    <span class=\"keyword\">let</span> argArr = arg1.split(<span class=\"string\">' '</span>).filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> item !== <span class=\"string\">''</span>; &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// base on input arg array side return value</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (argArr.length === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (argArr.length === <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">       * one input string, through through data if match, return data</span></div><div class=\"line\"><span class=\"comment\">       */</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">let</span> filter = argArr[<span class=\"number\">0</span>];</div><div class=\"line\">      result = value.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> str = <span class=\"built_in\">JSON</span>.stringify(item);</div><div class=\"line\">        <span class=\"keyword\">if</span> (str.toLowerCase().indexOf(filter.toLowerCase()) !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (argArr.length &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\">       * filter with multi column features</span></div><div class=\"line\"><span class=\"comment\">       */</span></div><div class=\"line\">      <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;  <span class=\"comment\">// pointer for arg array</span></div><div class=\"line\">      <span class=\"keyword\">let</span> data = value;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// literate arg array, keep filter result</span></div><div class=\"line\">      <span class=\"keyword\">while</span> (i &lt; argArr.length) &#123;</div><div class=\"line\">        result = data.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</div><div class=\"line\">          <span class=\"keyword\">let</span> str = <span class=\"built_in\">JSON</span>.stringify(item);</div><div class=\"line\">          <span class=\"keyword\">if</span> (str.toLowerCase().indexOf(argArr[i].toLowerCase()) !== <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// update target array</span></div><div class=\"line\">        data = result;</div><div class=\"line\">        i++;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> result;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>This pipe definition reveals the following key points:</p>\n<ul>\n<li><p>To tell Angular this pipe’s name is <code>filter</code>, apply <code>{ name: &#39;filter&#39; }</code> in @Pipe decorator.</p>\n</li>\n<li><p>A pipe is a class decorated with pipe metadata, in my pipe module, meadata is <code>value</code></p>\n</li>\n<li><p>The pipe class implements the <code>PipeTransform</code> interface’s transform method that accepts an input value followed by optional parameters and returns the transformed value. Basically we writting all the logic<br>in this method.</p>\n</li>\n<li><p>There will be one additional argument to the transform method for each parameter passed to the pipe. Your pipe has one such parameter: the exponent. Also we can create as many argument as we want.</p>\n</li>\n</ul>\n<p>For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">transform(value: any, <span class=\"attr\">arg1</span>: any, <span class=\"attr\">arg2</span>: any, <span class=\"attr\">arg3</span>: any) &#123;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>usage:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngFor</span>=<span class=\"string\">\"let item of data | filter: arg1 : arg2 : arg3\"</span>&gt;</span></div><div class=\"line\">  &#123;&#123;item&#125;&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>To tell Angular that this is a pipe, you apply the @Pipe decorator, which you import from the core Angular library. The @Pipe decorator allows you to define the pipe name that you’ll use within template expressions.<br>It must be a valid JavaScript identifier.</li>\n</ul>\n<h4 id=\"Import-Pipes-module-in-app\"><a href=\"#Import-Pipes-module-in-app\" class=\"headerlink\" title=\"Import Pipes module in app\"></a>Import Pipes module in app</h4><p>At last, don’t forget to <strong>import</strong> it in the module in order to use it.</p>\n"},{"title":"关于断和续","layout":"post","date":"2017-08-10T20:00:00.000Z","author":"Bo Chen","notebook":"Blog","_content":"### 前言\n\n空了半年的博客\n\n上个月过完了自己的28岁生日，终于用上了“年近30”\n\n开始随着时间的累积，值得记录的事物越来越多\n\n越发的觉得记录的重要性\n\n学着写点什么\n\n坚持把记录变成一种生活方式\n\n### 断\n\n从什么时候开始断说起\n\n2017年2月初，最后一篇博客\n\n工作上开始全力投入到项目从php 到Angular 2 的migration\n\n团队的人员分配问题，前端开发只有我和一个印度小哥（有过angular.js经验）\n\n投入绝大部分时间，精力\n\n学习了全新的框架和语言 （Angular2, TypeScript）\n\n遇到过许多难题和挑战，也都一一解决\n\n工作中没空写博客\n\n下班后也没心思去写博客\n\n导致断了记录的习惯\n\n### 续\n\n近期项目也稳定了快2个月了\n\n印度小哥上周刚走，由于跟Macys的合同最多只有18个月，必须离开公司\n\n前端又恢复到了2个半开发者，其中半个，韩国阿加西，前后端同时作业\n\nsummer 是公司的slow season\n\n活不多，闲暇的时候开始想写博客\n\n每次写博客的时候都在纠结，到底打中文还是打英文呢\n\n我的中英文都是半斤八两，错误连篇\n\n反正也没人看，就自己看的舒服，怎么舒服怎么写，中英文都有 yeah！~~\n\n为了有动力更新， 换个新的主题先\n\nHexo， NexT\n\n走起\n\n\n\n\n\n\n\n\n","source":"_posts/2017-08-10-stop_and_continue.md","raw":"---\ntitle: 关于断和续\nlayout: post\ndate:   2017-08-10 16:00:00 \nauthor: \"Bo Chen\"\ntags: 随笔\nnotebook: Blog\n---\n### 前言\n\n空了半年的博客\n\n上个月过完了自己的28岁生日，终于用上了“年近30”\n\n开始随着时间的累积，值得记录的事物越来越多\n\n越发的觉得记录的重要性\n\n学着写点什么\n\n坚持把记录变成一种生活方式\n\n### 断\n\n从什么时候开始断说起\n\n2017年2月初，最后一篇博客\n\n工作上开始全力投入到项目从php 到Angular 2 的migration\n\n团队的人员分配问题，前端开发只有我和一个印度小哥（有过angular.js经验）\n\n投入绝大部分时间，精力\n\n学习了全新的框架和语言 （Angular2, TypeScript）\n\n遇到过许多难题和挑战，也都一一解决\n\n工作中没空写博客\n\n下班后也没心思去写博客\n\n导致断了记录的习惯\n\n### 续\n\n近期项目也稳定了快2个月了\n\n印度小哥上周刚走，由于跟Macys的合同最多只有18个月，必须离开公司\n\n前端又恢复到了2个半开发者，其中半个，韩国阿加西，前后端同时作业\n\nsummer 是公司的slow season\n\n活不多，闲暇的时候开始想写博客\n\n每次写博客的时候都在纠结，到底打中文还是打英文呢\n\n我的中英文都是半斤八两，错误连篇\n\n反正也没人看，就自己看的舒服，怎么舒服怎么写，中英文都有 yeah！~~\n\n为了有动力更新， 换个新的主题先\n\nHexo， NexT\n\n走起\n\n\n\n\n\n\n\n\n","slug":"2017-08-10-stop_and_continue","published":1,"updated":"2017-08-11T15:01:30.000Z","comments":1,"photos":[],"link":"","_id":"cj6866ect000exze5me9fh9k2","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>空了半年的博客</p>\n<p>上个月过完了自己的28岁生日，终于用上了“年近30”</p>\n<p>开始随着时间的累积，值得记录的事物越来越多</p>\n<p>越发的觉得记录的重要性</p>\n<p>学着写点什么</p>\n<p>坚持把记录变成一种生活方式</p>\n<h3 id=\"断\"><a href=\"#断\" class=\"headerlink\" title=\"断\"></a>断</h3><p>从什么时候开始断说起</p>\n<p>2017年2月初，最后一篇博客</p>\n<p>工作上开始全力投入到项目从php 到Angular 2 的migration</p>\n<p>团队的人员分配问题，前端开发只有我和一个印度小哥（有过angular.js经验）</p>\n<p>投入绝大部分时间，精力</p>\n<p>学习了全新的框架和语言 （Angular2, TypeScript）</p>\n<p>遇到过许多难题和挑战，也都一一解决</p>\n<p>工作中没空写博客</p>\n<p>下班后也没心思去写博客</p>\n<p>导致断了记录的习惯</p>\n<h3 id=\"续\"><a href=\"#续\" class=\"headerlink\" title=\"续\"></a>续</h3><p>近期项目也稳定了快2个月了</p>\n<p>印度小哥上周刚走，由于跟Macys的合同最多只有18个月，必须离开公司</p>\n<p>前端又恢复到了2个半开发者，其中半个，韩国阿加西，前后端同时作业</p>\n<p>summer 是公司的slow season</p>\n<p>活不多，闲暇的时候开始想写博客</p>\n<p>每次写博客的时候都在纠结，到底打中文还是打英文呢</p>\n<p>我的中英文都是半斤八两，错误连篇</p>\n<p>反正也没人看，就自己看的舒服，怎么舒服怎么写，中英文都有 yeah！~~</p>\n<p>为了有动力更新， 换个新的主题先</p>\n<p>Hexo， NexT</p>\n<p>走起</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>空了半年的博客</p>\n<p>上个月过完了自己的28岁生日，终于用上了“年近30”</p>\n<p>开始随着时间的累积，值得记录的事物越来越多</p>\n<p>越发的觉得记录的重要性</p>\n<p>学着写点什么</p>\n<p>坚持把记录变成一种生活方式</p>\n<h3 id=\"断\"><a href=\"#断\" class=\"headerlink\" title=\"断\"></a>断</h3><p>从什么时候开始断说起</p>\n<p>2017年2月初，最后一篇博客</p>\n<p>工作上开始全力投入到项目从php 到Angular 2 的migration</p>\n<p>团队的人员分配问题，前端开发只有我和一个印度小哥（有过angular.js经验）</p>\n<p>投入绝大部分时间，精力</p>\n<p>学习了全新的框架和语言 （Angular2, TypeScript）</p>\n<p>遇到过许多难题和挑战，也都一一解决</p>\n<p>工作中没空写博客</p>\n<p>下班后也没心思去写博客</p>\n<p>导致断了记录的习惯</p>\n<h3 id=\"续\"><a href=\"#续\" class=\"headerlink\" title=\"续\"></a>续</h3><p>近期项目也稳定了快2个月了</p>\n<p>印度小哥上周刚走，由于跟Macys的合同最多只有18个月，必须离开公司</p>\n<p>前端又恢复到了2个半开发者，其中半个，韩国阿加西，前后端同时作业</p>\n<p>summer 是公司的slow season</p>\n<p>活不多，闲暇的时候开始想写博客</p>\n<p>每次写博客的时候都在纠结，到底打中文还是打英文呢</p>\n<p>我的中英文都是半斤八两，错误连篇</p>\n<p>反正也没人看，就自己看的舒服，怎么舒服怎么写，中英文都有 yeah！~~</p>\n<p>为了有动力更新， 换个新的主题先</p>\n<p>Hexo， NexT</p>\n<p>走起</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj6866ebt0000xze5h5rkiepo","tag_id":"cj6866ec50003xze5902tle5o","_id":"cj6866ecv000fxze52difqeh4"},{"post_id":"cj6866ebt0000xze5h5rkiepo","tag_id":"cj6866ech0007xze5pfd7l2t9","_id":"cj6866ecw000gxze5x09b3ex9"},{"post_id":"cj6866ebt0000xze5h5rkiepo","tag_id":"cj6866eco000axze59gfjvpwm","_id":"cj6866ecy000ixze5fv8r8rw1"},{"post_id":"cj6866ec10002xze5j6hhz6rf","tag_id":"cj6866ec50003xze5902tle5o","_id":"cj6866ecz000lxze5bpytexen"},{"post_id":"cj6866ec10002xze5j6hhz6rf","tag_id":"cj6866ech0007xze5pfd7l2t9","_id":"cj6866ecz000mxze5d6auhu2z"},{"post_id":"cj6866ec10002xze5j6hhz6rf","tag_id":"cj6866eco000axze59gfjvpwm","_id":"cj6866ed0000oxze5f0n7f3hu"},{"post_id":"cj6866ec70004xze5gkbl0des","tag_id":"cj6866ecz000kxze5ptzrypnx","_id":"cj6866ed3000rxze56x4y6549"},{"post_id":"cj6866ec70004xze5gkbl0des","tag_id":"cj6866ed0000nxze5kdee34t4","_id":"cj6866ed4000sxze54hdozr8k"},{"post_id":"cj6866ec70004xze5gkbl0des","tag_id":"cj6866ed1000pxze54kfypd7o","_id":"cj6866ed5000uxze5eu7q267q"},{"post_id":"cj6866ecb0005xze5nl69hd9s","tag_id":"cj6866ed2000qxze5m583xz7d","_id":"cj6866edb000yxze55mkzeovb"},{"post_id":"cj6866ecb0005xze5nl69hd9s","tag_id":"cj6866ed4000txze5vs1oa5oe","_id":"cj6866edb000zxze5gw80kuau"},{"post_id":"cj6866ecb0005xze5nl69hd9s","tag_id":"cj6866ed6000vxze573dxv402","_id":"cj6866edc0011xze54fnh3bkz"},{"post_id":"cj6866ecb0005xze5nl69hd9s","tag_id":"cj6866ed8000wxze5isn1lsy7","_id":"cj6866edd0012xze5nrjxd888"},{"post_id":"cj6866ecf0006xze5sosc2b2q","tag_id":"cj6866eda000xxze5bkxnfpsd","_id":"cj6866edf0015xze50w97xmpk"},{"post_id":"cj6866ecf0006xze5sosc2b2q","tag_id":"cj6866edc0010xze5ay05alwv","_id":"cj6866edf0016xze5fjglacvt"},{"post_id":"cj6866ecf0006xze5sosc2b2q","tag_id":"cj6866edd0013xze58yzlamem","_id":"cj6866edg0018xze5c8d8gcm1"},{"post_id":"cj6866eci0008xze5o34ng1zy","tag_id":"cj6866edf0014xze5zhvtssku","_id":"cj6866edi001bxze5r0w52fxm"},{"post_id":"cj6866eci0008xze5o34ng1zy","tag_id":"cj6866edg0017xze5fhp7mheh","_id":"cj6866edi001cxze5de9m9s6p"},{"post_id":"cj6866eci0008xze5o34ng1zy","tag_id":"cj6866edh0019xze5n82yh785","_id":"cj6866edi001exze56rhhdzbv"},{"post_id":"cj6866ecn0009xze59uix4k4i","tag_id":"cj6866edi001axze5lwsqojw9","_id":"cj6866edl001ixze5cnc9osfr"},{"post_id":"cj6866ecn0009xze59uix4k4i","tag_id":"cj6866edc0010xze5ay05alwv","_id":"cj6866edl001jxze5j2vx2fe9"},{"post_id":"cj6866ecn0009xze59uix4k4i","tag_id":"cj6866edg0017xze5fhp7mheh","_id":"cj6866edl001lxze5rliinm5o"},{"post_id":"cj6866ecn0009xze59uix4k4i","tag_id":"cj6866edj001gxze5gn1gtmk3","_id":"cj6866edl001mxze5g2f81pf6"},{"post_id":"cj6866eco000bxze53d7yfewu","tag_id":"cj6866edi001axze5lwsqojw9","_id":"cj6866edm001rxze50mk9wnnc"},{"post_id":"cj6866eco000bxze53d7yfewu","tag_id":"cj6866edl001kxze5vsqcdqae","_id":"cj6866edm001sxze5nd4er91k"},{"post_id":"cj6866eco000bxze53d7yfewu","tag_id":"cj6866edl001nxze5cvt5b2x7","_id":"cj6866edn001uxze5zv8dgens"},{"post_id":"cj6866eco000bxze53d7yfewu","tag_id":"cj6866edm001oxze5qk3me3bb","_id":"cj6866edn001vxze5frdkh6y8"},{"post_id":"cj6866eco000bxze53d7yfewu","tag_id":"cj6866edm001pxze5r3pp1yh6","_id":"cj6866edn001xxze5cvasnlel"},{"post_id":"cj6866ecq000cxze5s2kx3dpv","tag_id":"cj6866edi001axze5lwsqojw9","_id":"cj6866edo0020xze51aq2ztn0"},{"post_id":"cj6866ecq000cxze5s2kx3dpv","tag_id":"cj6866edm001txze5emvo4fcq","_id":"cj6866edo0021xze5f7nd2620"},{"post_id":"cj6866ecq000cxze5s2kx3dpv","tag_id":"cj6866edn001wxze5z3q3v7n1","_id":"cj6866edp0022xze5zyofl0l8"},{"post_id":"cj6866ecq000cxze5s2kx3dpv","tag_id":"cj6866edj001gxze5gn1gtmk3","_id":"cj6866edp0023xze5xpum1xos"},{"post_id":"cj6866ect000exze5me9fh9k2","tag_id":"cj6866edo001zxze5nvq2mecv","_id":"cj6866edp0024xze5homqtmrd"}],"Tag":[{"name":"unit test","_id":"cj6866ec50003xze5902tle5o"},{"name":"karma","_id":"cj6866ech0007xze5pfd7l2t9"},{"name":"jasmine","_id":"cj6866eco000axze59gfjvpwm"},{"name":"game of life","_id":"cj6866ecz000kxze5ptzrypnx"},{"name":"leetcode","_id":"cj6866ed0000nxze5kdee34t4"},{"name":"algorithm","_id":"cj6866ed1000pxze54kfypd7o"},{"name":"sublime","_id":"cj6866ed2000qxze5m583xz7d"},{"name":"linter","_id":"cj6866ed4000txze5vs1oa5oe"},{"name":"jshint","_id":"cj6866ed6000vxze573dxv402"},{"name":"path","_id":"cj6866ed8000wxze5isn1lsy7"},{"name":"component","_id":"cj6866eda000xxze5bkxnfpsd"},{"name":"directive","_id":"cj6866edc0010xze5ay05alwv"},{"name":"angular 2","_id":"cj6866edd0013xze58yzlamem"},{"name":"open source","_id":"cj6866edf0014xze5zhvtssku"},{"name":"chart","_id":"cj6866edg0017xze5fhp7mheh"},{"name":"compare","_id":"cj6866edh0019xze5n82yh785"},{"name":"Angular 2","_id":"cj6866edi001axze5lwsqojw9"},{"name":"how to","_id":"cj6866edj001gxze5gn1gtmk3"},{"name":"Firebase","_id":"cj6866edl001kxze5vsqcdqae"},{"name":"Travis CI","_id":"cj6866edl001nxze5cvt5b2x7"},{"name":"Deployment","_id":"cj6866edm001oxze5qk3me3bb"},{"name":"Github","_id":"cj6866edm001pxze5r3pp1yh6"},{"name":"filtering","_id":"cj6866edm001txze5emvo4fcq"},{"name":"pipe","_id":"cj6866edn001wxze5z3q3v7n1"},{"name":"随笔","_id":"cj6866edo001zxze5nvq2mecv"}]}}