<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[到底什么是DOM]]></title>
      <url>/2018/12/28/20180-12-28-what-exactly-is-the-DOM/</url>
      <content type="html"><![CDATA[<h1 id="到底什么是DOM"><a href="#到底什么是DOM" class="headerlink" title="到底什么是DOM"></a>到底什么是DOM</h1><p><strong>The Document Object Model</strong>（文档对象模型）, 或者叫<strong>DOM</strong>，是网页的接口。它本质上是网页的API，允许程序读取和操作页面内容，结构和样式。接下来让我们进一步解析。</p>
<h1 id="一个网页是如何构建的"><a href="#一个网页是如何构建的" class="headerlink" title="一个网页是如何构建的"></a>一个网页是如何构建的</h1><p>一个浏览器如何从HTML源文档到视窗中展现样式和交互式页面的过程被称为“关键渲染路径（<strong>Critical Rendering Path</strong>）”,虽然这个过程可以被分解为多个步骤， 但是这些步骤大致可以分为两个阶段。第一个阶段涉及浏览器解析文档到最终确认渲染的内容，第二阶段则是浏览器执行渲染。</p>
<p><img src="https://bitsofco.de/content/images/2018/11/HTML-to-Render-Tree-to-Final.png" alt="render tree"></p>
<p>第一阶段的结果被称之为“渲染树（render tree）”。HTML元素及其相关样式在页面上呈现出来的表达形式被称之为渲染树。为了构建树结构，浏览器需要两个东西：</p>
<ol>
<li><strong>The CSSOM</strong>, 与元素相关的样式表达（译者： 就是css文档）</li>
<li><strong>DOM</strong>， 元素表达 （译者： 就是HTML文档）</li>
</ol>
<h1 id="DOM如何被创造出来（看起来什么样）"><a href="#DOM如何被创造出来（看起来什么样）" class="headerlink" title="DOM如何被创造出来（看起来什么样）"></a>DOM如何被创造出来（看起来什么样）</h1><p>DOM是源HTML文档基于对象的表现形式。它有些差异，但是它本质上是将HTML文档的结构和内容转化为可以被各种程序使用的一种对象模型。</p>
<p>DOM的对象结构表现为所谓的“节点树（node tree）”，它之所以被这么叫是因为它可以被看作一个单个父茎的树，其有着若干个分支，每个都可能有枝叶。在这种情况下，父“干”是根<html>元素，孩子“分支”是嵌套元素，而“叶”是元素中的内容。</html></p>
<p>来看看一下这个例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>My first web page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>How are you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上文档的节点树表达形式：</p>
<p><img src="images/example1_node_tree.png" alt="example 1 node tree"></p>
<h1 id="DOM-不是什么"><a href="#DOM-不是什么" class="headerlink" title="DOM 不是什么"></a>DOM 不是什么</h1><p>根据上述例子，DOM是源HTML文档的一对一映射。 但是，正如我所提到的，还是有差异的。 为了完全理解DOM是什么，我们需要看看它不是什么。</p>
<h2 id="DOM不是你的源代码"><a href="#DOM不是你的源代码" class="headerlink" title="DOM不是你的源代码"></a>DOM<em>不是</em>你的源代码</h2><p>尽管DOM是从源HTML文档创建的，但它并不总是完全相同。 这里有两个实例展示了：DOM可以与源HTML不同。</p>
<h3 id="1-当HTML无效时"><a href="#1-当HTML无效时" class="headerlink" title="1. 当HTML无效时"></a>1. 当HTML无效时</h3><p>DOM是有效HTML文档的接口。在创建DOM的过程中，浏览器可能会矫正HTML中的无效代码。</p>
<p>例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">Hello, world!</div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述文档中缺失<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>元素，对于有效HTML来说这是必需的。如果我们查看生成的DOM树，我们会发现这里被自动矫正了：</p>
<p><img src="images/example2_node_tree.png" alt="example 2 node tree"></p>
<h3 id="2-当JavaScript修改DOM时"><a href="#2-当JavaScript修改DOM时" class="headerlink" title="2. 当JavaScript修改DOM时"></a>2. 当JavaScript修改DOM时</h3><p>DOM除了作为查看HTML文档内容的接口之外，还可以被修改，使其成为一个实时资源。</p>
<p>例如，我们可以使用JavaScript为DOM创建其他节点。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newParagraph = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</div><div class="line"><span class="keyword">var</span> paragraphContent = <span class="built_in">document</span>.createTextNode(<span class="string">"I'm new!"</span>);</div><div class="line">newParagraph.appendChild(paragraphContent);</div><div class="line"><span class="built_in">document</span>.body.appendChild(newParagraph);</div></pre></td></tr></table></figure>
<p>这样就可以更新DOM， 但是当然并不是直接改变HTML文档</p>
<h2 id="DOM并不是你在浏览器里看到的那样（例如：-渲染树）"><a href="#DOM并不是你在浏览器里看到的那样（例如：-渲染树）" class="headerlink" title="DOM并不是你在浏览器里看到的那样（例如： 渲染树）"></a>DOM并不是你在浏览器里看到的那样（例如： 渲染树）</h2><p>你在浏览器视窗中看到的渲染树，正如我所提到，它是DOM和CSSOM的结合，真正把DOM和渲染树区分开的是后者只包含最终将在屏幕上绘制的内容。</p>
<p>因为渲染树仅仅关注与渲染的内容本身，所以它会排除视觉上隐藏的元素。比如：具有<code>display: none</code>的元素。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span>How are you?<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在DOM里将包含<code>&lt;p&gt;</code>元素：</p>
<p><img src="images/example3_node_tree.png" alt="example 3 node tree"></p>
<p>但是，渲染树以及因此在视窗中看到的内容却不包含该元素。</p>
<p><img src="images/example4_node_tree.png" alt="example 4 node tree"></p>
<h2 id="浏览器中的DOM并不是DOM"><a href="#浏览器中的DOM并不是DOM" class="headerlink" title="浏览器中的DOM并不是DOM"></a>浏览器中的DOM<em>并不是</em>DOM</h2><p>一点点小差异，因为DevTools元素检查器提供了最接近的DOM。但是，DevTools检查器包含里不在DOM中的其他信息。</p>
<p>最好的例子是CSS伪元素。Pseudo-elements created using the <code>::before</code> and <code>::after</code> selectors form part of the CSSOM and render tree, but are not technically part of the DOM.。因为DOM仅仅由源HTML文档构建，不包含应用于元素的样式。</p>
<p>尽管伪元素不是DOM的一部分，但他们仍然在我们的DevTools元素检查器中。</p>
<p><img src="https://bitsofco.de/content/images/2018/11/Pseudo-element-in-devtools-inspector.png" alt="element inspector"></p>
<p>这就是为什么伪元素不能被JavaScript作为目标的原因，因为它们不是DOM的一部分。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>DOM是一个HTML文档的接口。它被浏览器用作确认在视窗中呈现内容的第一步，并通过Javascript程序来修改页面的内容，结构，样式。</p>
<p>虽然与其他形式的源HTML文档类似，但是DOM在许多方面还是有所不同：</p>
<ul>
<li>有效HTML（It is always valid HTML）</li>
<li>可通过Javascript修改的实时模型（It is a living model that can be modified by JavaScript）</li>
<li>不包含伪元素（It doesn’t include pseudo-elements）</li>
<li>包含隐藏元素（It does include hidden elements）</li>
</ul>
<h1 id="关于原文作者"><a href="#关于原文作者" class="headerlink" title="关于原文作者"></a>关于原文作者</h1><p>原文是来自<strong>Ire Aderinokun</strong>发表在<a href="https://bitsofco.de/what-exactly-is-the-dom/" target="_blank" rel="external">bitsofco.de</a>上面的。</p>
<h1 id="译者语"><a href="#译者语" class="headerlink" title="译者语"></a>译者语</h1><p>工作学习前端两年多，往往这些浅显，基础的知识最容易被忽略。<strong>Ire Aderinokun</strong>写里一系列DOM相关的文章，包括shadow DOM， Virtual DOM等等，我会争取总翻译出来。有时候我不会翻译，或者感觉原文效果更好的，我就直接把原问po出来。</p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> DOM </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[静态化与服务器渲染 （Static vs. Server Rendering)]]></title>
      <url>/2018/12/20/2018-12-19-static-vs-server/</url>
      <content type="html"><![CDATA[<p>  静态化渲染和服务器渲染二者都为你的APP页面进行HTML渲染， 然而他们之间有个巨大的差异。。。<br>  Static rendering and server rendering both involve rendering HTML for each of your app’s pages- but there’s one major difference between them…</p>
<p>也许你曾听过静态化渲染与服务器渲染，你也知道他们二者都可以提高SEO，让你的网站或者APP进行生成HTML页面。当然你也可以使用 <a href="https://reactjs.org/docs/react-dom-server.html#rendertostring" target="_blank" rel="external">ReactDOMServer.renderToString()</a>实现上述两种目的。</p>
<p>这么说，他们两者看上去是一种东西？对吧？他们几乎几乎差不多一样，接下来让我解释下。</p>
<h1 id="热切的静态化渲染，-慵懒的服务器渲染"><a href="#热切的静态化渲染，-慵懒的服务器渲染" class="headerlink" title="热切的静态化渲染， 慵懒的服务器渲染"></a>热切的静态化渲染， 慵懒的服务器渲染</h1><p>静态和服务器渲染都参与到了对HTML的生成， 不同点在于<strong>静态化渲染只在编译的时候发生一次</strong>，然而<strong>服务器渲染则是按需发生</strong>根据用户的每一次请求。</p>
<h2 id="静态化渲染"><a href="#静态化渲染" class="headerlink" title="静态化渲染"></a>静态化渲染</h2><p>当静态化渲染的时候，你需要在每次用户访问前就生成好一个单一的HTML文件。 接着你把这些生成好的文件都存放在云端服务中，比如亚马逊的S3，或者运行中的Nginx服务器。</p>
<p><img src="https://frontarm.com/static/media/static-rendering.ac5d510c.png" alt="static rendering image"></p>
<p>静态化渲染的优势在于能够对服务器请求做到无脑的快速，因为在处理过程中不需要再去生成什么文件。 实际上, 由于你的网站的响应都是提前生成好的，那么你就可以存放文件在全世界任何角落的CDN。这样可以让你的网站打到一个不可思议的响应速度。但是这也是有代价的。</p>
<p>使用静态化渲染时，你需要给<em>每一个可能的请求</em>提前生成响应。 对于那些对高质量内容的网站来说，这样是没问题的——静态化渲染工具比如<a href="https://frontarm.com/navi/" target="_blank" rel="external">Navi</a>可以在仅仅几秒内生成上百个网页。但是如果你需要搭建一些无法预测所以用户请求的项目，比如一个搜索引擎？或者你有一堆用户生成内容，根据每一个请求来改变响应？这种情况的话，你需要的是服务器渲染。</p>
<h2 id="服务器渲染"><a href="#服务器渲染" class="headerlink" title="服务器渲染"></a>服务器渲染</h2><p>按React的说法，<strong>服务器渲染</strong>指的是按照每一个请求生成HTML的过程。通常，你在服务器上架设一些后端框架比如<a href="https://expressjs.com/" target="_blank" rel="external">express</a>或者<a href="https://nextjs.org/" target="_blank" rel="external">Next.js</a>，根据每个请求渲染你的React app， 就像更传统的PHP和Rails框架网站一样。</p>
<p><img src="https://frontarm.com/static/media/server-rendering.c64da2e3.png" alt="server rendering image"></p>
<p>服务器渲染<em>总是</em>慢于静态内容的。然而，你还得为了让速度更快些捣鼓一堆东西，当然这样的延迟是否重要取决于你的商业需求。</p>
<p>当然， 服务器渲染的速度短板，成就了他的灵活性，它允许你：</p>
<ul>
<li>响应<em>任何</em>用户发出的请求 —— 即使是你可能没预想过的</li>
<li>从数据库中抓取最新的内容，而不是过时的静态文件</li>
<li>对没授权的用户选择性的隐藏内容</li>
</ul>
<h1 id="那么我该选哪一个？"><a href="#那么我该选哪一个？" class="headerlink" title="那么我该选哪一个？"></a>那么我该选哪一个？</h1><p>这个问题的 ~ 答案 ~ 当然是 ~~~ <em>看情况</em></p>
<p>如果<strong>静态</strong>渲染可行的话（作者指对于你当前的需求），它是一个快速，低廉，简单的解决方案。但是，如果你的网站需要达到以下这些需求，你则需要<strong>服务器</strong>渲染：</p>
<ul>
<li>如果你不能预测所有可能性的用户请求</li>
<li>如果响应内容需要根据不同用户进行改变</li>
<li>如果响应内容很快过时</li>
</ul>
<p>请记住，<strong>如果需要为每个页面提供特定的HTML用于SEO</strong>，这些需求将仅使服务器渲染呈现成为必要的选择。举个例子，一个社交网络或者在线电商最好还是用服务器渲染来搭建。</p>
<p>另一方面来说，如果SEO无关紧要的话，例如，一个存在于登录屏幕后面的应用程序 - 然后您的应用程序只需要一个HTML文件。 在曾经，静态渲染可能是最好的选择。但是，最近静态和服务器渲染工具的改进大多缩小了简单性差距。</p>
<h1 id="渲染工具"><a href="#渲染工具" class="headerlink" title="渲染工具"></a>渲染工具</h1><p>几年前当我开始用React来构建网站的时候，不管是静态还是动态，都很难。我甚至写了篇文章告诉你<a href="http://jamesknelson.com/universal-react-youre-doing-it-wrong/" target="_blank" rel="external">别这么做</a>,但是近年来，改变了很多。</p>
<p>有越来越多基于React的工具来静态化渲染网站和APP，<a href="https://www.gatsbyjs.org/" target="_blank" rel="external">Gatsby</a>就是个很受欢迎，高强度的选择。对于一些更简单的东西，你可以选择<a href="https://frontarm.com/navi/" target="_blank" rel="external">Navi</a>,一个跟Create-react-app一起使用的框架。</p>
<p>对于服务器渲染，有两种选择（作者只提到这两个），<a href="https://nextjs.org/learn/" target="_blank" rel="external">Next.js</a>和<a href="https://expressjs.com/" target="_blank" rel="external">Express</a>,使用Next.js，您可以获得一个开箱即用的完整框架和托管解决方案——同时你的整个项目也绑定到Next.js。如果Next.js对你来说不是好的选择，你也可以试试比较传统化的Express。</p>
<h1 id="鸡毛蒜皮的小事"><a href="#鸡毛蒜皮的小事" class="headerlink" title="鸡毛蒜皮的小事"></a>鸡毛蒜皮的小事</h1><p>最后，让我解释您正在阅读的网站（这里的网站指原文post的网站<a href="https://frontarm.com/articles/static-vs-server-rendering/" target="_blank" rel="external">frontarm.com</a>）如何运作。 Frontend Armory 是静态渲染的,每次内容更改时，都会使用Navi重新构建站点，然后将其推送到S3。 然后，当您发送请求时，它首先会检查与CloudFront在地理位置上接近您的缓存版本，然后再从S3请求它（如果失败）。</p>
<h1 id="关于原文作者"><a href="#关于原文作者" class="headerlink" title="关于原文作者"></a>关于原文作者</h1><p>原文是由 Frontend Armory的编辑<strong>James K Nelson</strong>发表在<a href="https://frontarm.com/" target="_blank" rel="external">Frontend Armory</a>上面的。</p>
<h1 id="译者语"><a href="#译者语" class="headerlink" title="译者语"></a>译者语</h1><p>本篇文章，只是很基本的讲解了一下静态渲染和服务器渲染的一些基本特点和区别，适合入门新人，对两种渲染没有基本概念的读者。</p>
<p>由于近期对<strong>Frontend Armory</strong>这个网站的兴趣，发现上面有些不错的前端基本概念文章，所以想以此为长期学习的地方，通过翻译来提升自己，也帮助他人。</p>
]]></content>
      
        
        <tags>
            
            <tag> 翻译 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于翻译英文技术博客的意图]]></title>
      <url>/2018/12/19/2018-12-19-thoughs-about-blog/</url>
      <content type="html"><![CDATA[<p>最近萌发出通过翻译一些平常看到的国外技术博客的想法</p>
<h4 id="出发点"><a href="#出发点" class="headerlink" title="出发点:"></a>出发点:</h4><ul>
<li>目前自己博客内容没什么营养，偶尔也才写一两篇技术性博客，还没什么营养，想通过翻译技术博客来增加自己博客的内容</li>
<li>提高中文写作能力，中文写作水平从高一出国后就止步了</li>
<li>提高英文阅读能力，日常生活在，英语说还行，但是阅读量几乎没有</li>
<li>借此来让自己对某件事无的坚持，积累自己的读者，做点有内容的东西， 从简单容易坚持的项目出发</li>
</ul>
<p></p>
]]></content>
      
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[最近在瞎捣鼓的项目]]></title>
      <url>/2018/12/11/2018-12-11-recent-projects/</url>
      <content type="html"><![CDATA[<h2 id="supreme-restock-monitoring-tool-hold"><a href="#supreme-restock-monitoring-tool-hold" class="headerlink" title="supreme restock monitoring tool (hold)"></a>supreme restock monitoring tool (<strong>hold</strong>)</h2><ul>
<li>Node.js</li>
<li><p>cheerio</p>
<p><strong>Done</strong>:成功的检查supreme官网的自动补货信息，自动发送Slack bot msg 到对应channel</p>
<p><strong>Imcomplete</strong>: 无法再在云端运行，HTML request return 403 error</p>
</li>
</ul>
<h2 id="VScode-todo-extension-hold"><a href="#VScode-todo-extension-hold" class="headerlink" title="VScode todo extension (hold)"></a>VScode todo extension (<strong>hold</strong>)</h2><ul>
<li><p>Javascript</p>
<p><strong>Done</strong>:简单的vscode command</p>
</li>
</ul>
<h2 id="A-image-scraping-app-dropped"><a href="#A-image-scraping-app-dropped" class="headerlink" title="A image scraping app (dropped)"></a>A image scraping app (<strong>dropped</strong>)</h2><ul>
<li>Node.js</li>
<li><p>cheerio</p>
<p><strong>Done</strong>: 基本能从6park爬取一定数量的图片，成功部署heroku</p>
<p><strong>Incomplete</strong>: 页面载入太慢，图片链接json文件无法更新</p>
</li>
</ul>
<h2 id="黑胶唱片推荐网站-working"><a href="#黑胶唱片推荐网站-working" class="headerlink" title="黑胶唱片推荐网站 (working)"></a>黑胶唱片推荐网站 (<strong>working</strong>)</h2><ul>
<li>Gastbyjs</li>
<li>Node.js</li>
<li><p>Netlify 部署</p>
<p><strong>Done</strong>: 部署到Netlify</p>
<p><strong>Imcomplete</strong>: 内容创作</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Delete Dead Code]]></title>
      <url>/2018/10/22/2018-10-22-clean-code/</url>
      <content type="html"><![CDATA[<h2 id="Remove-dead-code"><a href="#Remove-dead-code" class="headerlink" title="Remove dead code"></a>Remove dead code</h2><p>Dead code is just as bad as duplicate code. There’s no reason to keep it in your codebase. If it’s not being called, get rid of it! It will still be safe in your version history if you still need it.</p>
<p><strong>Bad:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldRequestModule</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">newRequestModule</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> req = newRequestModule;</div><div class="line">inventoryTracker(<span class="string">'apples'</span>, req, <span class="string">'www.inventory-awesome.io'</span>);</div></pre></td></tr></table></figure></p>
<p><strong>Good:</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">newRequestModule</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> req = newRequestModule;</div><div class="line">inventoryTracker(<span class="string">'apples'</span>, req, <span class="string">'www.inventory-awesome.io'</span>);</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> monday clean code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Function arguments (2 or fewer ideally)]]></title>
      <url>/2018/10/08/2018-10-08-function-parameters/</url>
      <content type="html"><![CDATA[<h2 id="Limiting-the-amount-of-function-arguments"><a href="#Limiting-the-amount-of-function-arguments" class="headerlink" title="Limiting the amount of function arguments"></a>Limiting the amount of function arguments</h2><p>It is very important and useful to limit the amount of function arguments, because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument. Using a object if you can’t avoid a situation requires more than 3 arguments.</p>
<p><strong>Bad:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">title, body, buttonText, cancellable</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Good:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMenu</span>(<span class="params">&#123; title, body, buttonText, cancellable &#125;</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">createMenu(&#123;</div><div class="line">  title: <span class="string">'Foo'</span>,</div><div class="line">  body: <span class="string">'Bar'</span>,</div><div class="line">  buttonText: <span class="string">'Baz'</span>,</div><div class="line">  cancellable: <span class="literal">true</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> monday clean code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[新团队的第一个月]]></title>
      <url>/2018/09/28/2018-09-28-one-month-in-new-team/</url>
      <content type="html"><![CDATA[<p>新公司，新团队，一个月啦</p>
<h2 id="团队项目"><a href="#团队项目" class="headerlink" title="团队项目"></a>团队项目</h2><p>目前团队负责的项目是跟CNN的一个专门的分布合作，具体什么部门就不透露了</p>
<p>项目具体分为三大块：</p>
<ul>
<li>CMS (Content Management System): 给CNN团队提供一个内容管理，发布平台</li>
<li>Product Website： 面向真正的市场用户，提供原创视频为内容</li>
<li>Analytic: 通过用户提供的评论，进行分析学习，了解用户对视频的反应</li>
</ul>
<h2 id="团队的分工与合作"><a href="#团队的分工与合作" class="headerlink" title="团队的分工与合作"></a>团队的分工与合作</h2><p>主要7个开发人员，每个人都有相近的tech stack，没有专门的分工，除QA 和 Project manager外。</p>
<p>通过一个月的自我学习和相互协作，渐渐发现团队的开发进度非常快，有team leader， project manager， QA 发布相关的tickets到Pivotal Tracker，人人都可以start any ticket they like。也许这就是团队进度快的，tickets完成量高得原因。</p>
<p>不需要专门的对tickets进行分配，觉得有能力完成就可以自己开始做任务tickets。由于tech stack的相近也不用过多的担心无法完成，因为可以随时从身边的队友取得帮助。</p>
<p>每周2次例行的stand up，保持在10分钟左右，go over current working tickets and blockers。这次吐槽下前一份工作的stand up，由于manager的个人习惯，日日早上9点，每次事无巨细的问所有人，导致每日的stand up meeting能长达1小时之久，完全是浪费生命。</p>
<p>每周1次的IPM，安排未来2周的工作，提出工作中的问题和建议，大家投票表决，直到全票通过。第一次开会的我被小小的惊了一下，毕竟在以前的公司，可真的是完全相反的，一切都是manager拍板做决定，甚至出现过投票都被他作废的情况😩</p>
<h2 id="自我提升的空间"><a href="#自我提升的空间" class="headerlink" title="自我提升的空间"></a>自我提升的空间</h2><p>技术方向有很多要学的，已经在之前的帖子里贴了目前工作中所用到的技术，大部分对我来说都是新东西，而且由于团队里大家都是年轻人，喜欢新技术，估计那tech stack还会越来越长。 🤓</p>
<p>工作效率方面，重新捡起被遗忘很久的Todoist + Evernote， 比较有个良好的任务管理软件，才能时不时的提醒，推动我一下。并且尽量每次学习使用新技术的时候都写一篇博客来记录学习过程。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说，这一个月还是挺开心的，新的环境，新的作息时间，告别过去慵懒的生活方式，面向一个健康，积极的未来</p>
]]></content>
      
        
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 工作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Use default arguments instead of short circuiting or conditionals]]></title>
      <url>/2018/09/24/2018-09-24-monday-clean-code/</url>
      <content type="html"><![CDATA[<h3 id="Use-default-arguments-instead-of-short-circuiting-or-conditionals"><a href="#Use-default-arguments-instead-of-short-circuiting-or-conditionals" class="headerlink" title="Use default arguments instead of short circuiting or conditionals"></a>Use default arguments instead of short circuiting or conditionals</h3><p>Default arguments are often cleaner than short circuiting. Be aware that if you<br>use them, your function will only provide default values for <code>undefined</code><br>arguments. Other “falsy” values such as <code>&#39;&#39;</code>, <code>&quot;&quot;</code>, <code>false</code>, <code>null</code>, <code>0</code>, and<br><code>NaN</code>, will not be replaced by a default value.</p>
<p><strong>Bad:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> breweryName = name || <span class="string">'Hipster Brew Co.'</span>;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Good:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span>(<span class="params">name = <span class="string">'Hipster Brew Co.'</span></span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> monday clean code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Start with Sequelize]]></title>
      <url>/2018/09/21/2018-09-21-start-with-sequelize/</url>
      <content type="html"><![CDATA[<h2 id="Ticket-create-a-new-model-and-associate-to-another-modal"><a href="#Ticket-create-a-new-model-and-associate-to-another-modal" class="headerlink" title="Ticket: create a new model, and associate to another modal"></a>Ticket: create a new model, and associate to another modal</h2><h3 id="Create-Model"><a href="#Create-Model" class="headerlink" title="Create Model"></a>Create Model</h3><p>For example, this ticket detail is creating a new model, contains information about some specific url.</p>
<p>From Sequelize official documentation, Models are defined with <code>sequelize.define(&#39;name&#39;, {attributes}, {options})</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> LinkDetail = sequelize.define(<span class="string">'link_detail'</span>, &#123;</div><div class="line">    url: &#123;</div><div class="line">        type: Sequelize.STRING</div><div class="line">    &#125;,</div><div class="line">    description: &#123;</div><div class="line">        type: Sequelize.STRING</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>and for future repeat use, wrap it with <code>module.exports</code>: </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> LinkDetail = sequelize.define(<span class="string">'link_detail'</span>, &#123;</div><div class="line">        url: &#123;</div><div class="line">            type: Sequelize.STRING</div><div class="line">        &#125;,</div><div class="line">        description: &#123;</div><div class="line">            type: Sequelize.STRING</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> LinkDetail;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a> 
<h3 id="Associations"><a href="#Associations" class="headerlink" title="Associations"></a>Associations</h3><p>So far, at this point, half of ticket is done, get into Associations, in this ticket, this link model is associated to another model which is called <strong>story</strong> model, and they are <strong>One-To-One associations</strong>.</p>
<pre><code>One-To-One associations are associations between exactly two models connected by a single foreign key.
</code></pre><p><strong>BelongsTo</strong></p>
<p><code>BelongsTo</code> associations are associations where the foreign key for the one-to-one relation exists on the source model.</p>
<p><strong>HasOne</strong></p>
<p><code>HasOne</code> associations are associations where the foreign key for the one-to-one relation exists on the target model.</p>
<h3 id="Difference-between-HasOne-and-BelongsTo"><a href="#Difference-between-HasOne-and-BelongsTo" class="headerlink" title="Difference between HasOne and BelongsTo"></a>Difference between HasOne and BelongsTo</h3><p>Read the official documentation, they have a greate example! <a href="http://docs.sequelizejs.com/manual/tutorial/associations.html#one-to-one-associations" target="_blank" rel="external">click here</a></p>
<p>After comparing the differences between <code>belongsTo</code> and <code>hasOne</code>, in this case we should use <code>hasOne</code>:</p>
<p><code>LinkDetail.hasOne(Story)</code>, add <code>storyId</code> attribute to target model which is <code>Story</code> model.</p>
<h3 id="Add-association-to-model-define-function"><a href="#Add-association-to-model-define-function" class="headerlink" title="Add association to model define function"></a>Add association to model define function</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> LinkDetail = sequelize.define(<span class="string">'link_detail'</span>, &#123;</div><div class="line">        url: &#123;</div><div class="line">            type: Sequelize.STRING</div><div class="line">        &#125;,</div><div class="line">        description: &#123;</div><div class="line">            type: Sequelize.STRING</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    LinkDetail.associations = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        LinkDetail.hasOne(Story);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> LinkDetail;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="In-the-end"><a href="#In-the-end" class="headerlink" title="In the end"></a>In the end</h3><p>Of cause, in my real ticket, its not this easy, there are more detail about model structure, more attributes and more associations between others. Need to spend time to read through the documentation, it is always my best friend, when I start something new.</p>
<p>Once again, <strong>read the documentation</strong>! IT’S FREE!!!</p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> learning </tag>
            
            <tag> Sequelize </tag>
            
            <tag> Database </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Current tech stack I'm using at work]]></title>
      <url>/2018/09/14/2018-09-14-current-study-list/</url>
      <content type="html"><![CDATA[<p>Keep updating this list.</p>
<ul>
<li style="list-style: none"><input type="checkbox"> React<ul>
<li style="list-style: none"><input type="checkbox"> Props vs State</li>
</ul>
</li>
<li style="list-style: none"><input type="checkbox"> Reflux<ul>
<li><a href="https://www.cnblogs.com/lovesueee/p/4893218.html" target="_blank" rel="external">ReFlux细说</a> (必读文章)</li>
<li style="list-style: none"><input type="checkbox" checked> 了解 Flux 和 Reflux 的基本概念和区别 </li>
<li style="list-style: none"><input type="checkbox"> 了解 熟悉 Reflux 的 API， 让代码简洁优雅</li>
<li>Reflux 在 Flux 的核心概念上取消掉了<code>dispatcher</code> 的角色，从而解决了存在于Flux中 <code>action</code> 和 <code>stores</code> 之间 <strong>多对多</strong> 的关系，把 <code>publisher</code> 的角色融合到 <code>action</code>中，<code>stores</code> 也有目的性的subscribe action，而不是监听所有 actions，不造成任何资源的浪费</li>
</ul>
</li>
<li style="list-style: none"><input type="checkbox"> Storybook.js<ul>
<li>a library to better manage and documentation your web components.</li>
</ul>
</li>
<li style="list-style: none"><input type="checkbox"> Node.js<ul>
<li style="list-style: none"><input type="checkbox"> Async/Await</li>
<li style="list-style: none"><input type="checkbox"> Restify API framework</li>
</ul>
</li>
<li style="list-style: none"><input type="checkbox"> <a href="http://docs.sequelizejs.com/" target="_blank" rel="external">Sequelize</a><ul>
<li>Sequelize is a promise-based ORM for Node.js v4 and up. It supports the dialects PostgreSQL, MySQL, SQLite and MSSQL and features solid transaction support, relations, read replication and more.</li>
</ul>
</li>
<li style="list-style: none"><input type="checkbox"> AWS<ul>
<li style="list-style: none"><input type="checkbox"> S3 Bucket Storage</li>
</ul>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> learning </tag>
            
            <tag> tech stack </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript's async 初步认识 (unfinished)]]></title>
      <url>/2018/09/12/2018-09-12-javascript-async/</url>
      <content type="html"><![CDATA[<h2 id="JavsScript-is-Single-Thread-CAN’T-multitask"><a href="#JavsScript-is-Single-Thread-CAN’T-multitask" class="headerlink" title="JavsScript is Single Thread, CAN’T multitask"></a>JavsScript is Single Thread, CAN’T multitask</h2><blockquote>
<p>我们常说的JavaScript是单线程，所指的是JS引擎中负责解释和执行JavaScript代码的线程只有一个。不妨叫它<strong>主线程</strong>。</p>
</blockquote>
<p>The basic and plain way to handle event in JavaScript:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">event.doFirstThing();</div><div class="line"></div><div class="line">wait(<span class="number">1000</span>); <span class="comment">// wait 1 sec to let event complete</span></div><div class="line"></div><div class="line">event.doSecondThing(); <span class="comment">// do other things after 1 sec</span></div><div class="line"></div><div class="line">wait(<span class="number">1000</span>); <span class="comment">// wait 1 sec to let event complete</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">output:</div><div class="line"><span class="comment">// first thing output</span></div><div class="line"><span class="comment">// second thing output</span></div></pre></td></tr></table></figure>
<h2 id="Callback-When-it-becomes-a-HELL"><a href="#Callback-When-it-becomes-a-HELL" class="headerlink" title="Callback - When it becomes a HELL"></a>Callback - When it becomes a HELL</h2><p>为了解决日常中的问题，JavaScript 引入<strong>callback</strong></p>
<blockquote>
<p> A <strong>callback</strong> is just a plain old JavaScript function that can be called in response to an event.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  event.doFirstThing();</div><div class="line">&#125;, <span class="number">2000</span>);</div><div class="line"></div><div class="line">wait(<span class="number">1000</span>);</div><div class="line"></div><div class="line">event.doSecondThing();</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">output: </div><div class="line"><span class="comment">// second thing output</span></div><div class="line"><span class="comment">// first thing output</span></div></pre></td></tr></table></figure>
<p>When we call function <code>setTimeout()</code>, we usually pass a callback function in <code>setTimeout()</code>, in this case <code>event.doFirstThing()</code> is that callback function.</p>
<p>But in the real world, the shit will turn nasty as hell, that’s why we call it <strong>Callback Hell</strong>, a callback in the another callback, and in the another callback, and in the another callback, and in the another…(something it goes forever)</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">aCallbackHell</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ready for something nasty ?</span></div><div class="line"></div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// third thing is waiting first and second thing to be done.</span></div><div class="line">    doThirdThing();</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="comment">// second thing waiting for first thing to be done.</span></div><div class="line">      doSecondThing();</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="comment">// first thing need to be done.</span></div><div class="line">        doFirstThing();</div><div class="line">      &#125;, <span class="number">1000</span>);</div><div class="line">    &#125;, <span class="number">2000</span>);</div><div class="line">  &#125;, <span class="number">3000</span>);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">aCallbackHell();</div></pre></td></tr></table></figure>
<p>  The nested setTimeout() statements would result in so much whitespace that you could build a pyramid.</p>
<h2 id="Promises-way-to-get-out-of-HELL"><a href="#Promises-way-to-get-out-of-HELL" class="headerlink" title="Promises - way to get out of HELL"></a>Promises - way to get out of HELL</h2><blockquote>
<p> The Promise object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.</p>
</blockquote>
<p>From MDN’s JavaScript official <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises" target="_blank" rel="external"><strong>documentation</strong></a></p>
<p>base on my personal understand, consider <strong>Promise</strong> as a wrapper object around a callback function, and return an object called <strong>promise</strong>, this <strong>promise</strong> object gives your two callback function as result, success and fail.</p>
<blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">const</span> promise = createEvent(eventDetail); </div><div class="line">&gt; promise.then(successCallback, failureCallback);</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="Benefit-of-Promises"><a href="#Benefit-of-Promises" class="headerlink" title="Benefit of Promises"></a>Benefit of Promises</h3><ul>
<li><strong>Guarantees</strong></li>
<li><strong>Chaining</strong></li>
<li><strong>Error Propagation</strong></li>
<li><strong>Composition</strong></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> learning </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Recent Update]]></title>
      <url>/2018/09/07/2018-09-07-recent-update/</url>
      <content type="html"><![CDATA[<ul>
<li>Little Bowie (that’s right, his name is Bowie Chen) is growing so fast 😱, 10 weeks, 14lbs now!!!</li>
<li>Start a new job, two weeks ago! Like it, surrounding by bunch nerds!</li>
<li>Reading a book called 《真实的四大家族》</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Use searchable names]]></title>
      <url>/2018/05/29/2018-05-29.clean-code/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="Use-searchable-names"><a href="#Use-searchable-names" class="headerlink" title="Use searchable names"></a>Use searchable names</h3></blockquote>
<p>We will read more code than we will ever write. It’s important that the code we do write is readable and searchable.<br>By <em>not</em> naming variables that end up being meaningful for understanding our program, we hurt our readers.<br>Make your names searchable. Tools like<br><a href="https://github.com/danielstjules/buddy.js" target="_blank" rel="external">buddy.js</a> and <a href="https://github.com/eslint/eslint/blob/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md" target="_blank" rel="external">ESLint</a><br>can help identify unnamed constants.</p>
<p><strong>Bad:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// What the heck is 86400000 for?</span></div><div class="line">setTimeout(blastOff, <span class="number">86400000</span>);</div></pre></td></tr></table></figure></p>
<p><strong>Good:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Declare them as capitalized named constants.</span></div><div class="line"><span class="keyword">const</span> MILLISECONDS_IN_A_DAY = <span class="number">86400000</span>;</div><div class="line"></div><div class="line">setTimeout(blastOff, MILLISECONDS_IN_A_DAY);</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> monday clean code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Variables]]></title>
      <url>/2018/05/14/2018-05-14.clean-code/</url>
      <content type="html"><![CDATA[<blockquote>
<h4 id="Monday-Clean-Code"><a href="#Monday-Clean-Code" class="headerlink" title="Monday Clean Code"></a>Monday Clean Code</h4><h4 id="Use-meaningful-and-pronounceable-variable-names"><a href="#Use-meaningful-and-pronounceable-variable-names" class="headerlink" title="Use meaningful and pronounceable variable names"></a>Use meaningful and pronounceable variable names</h4></blockquote>
<p><strong>Bad:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> yyyymmdstr = moment().format(<span class="string">'YYYY/MM/DD'</span>);</div></pre></td></tr></table></figure></p>
<p><strong>Good:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> currentDate = moment().format(<span class="string">'YYYY/MM/DD'</span>);</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> monday clean code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Use the same vocabulary for the same type of variable]]></title>
      <url>/2018/05/14/2018-05-21.clean-code/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="Use-the-same-vocabulary-for-the-same-type-of-variable"><a href="#Use-the-same-vocabulary-for-the-same-type-of-variable" class="headerlink" title="Use the same vocabulary for the same type of variable"></a>Use the same vocabulary for the same type of variable</h3></blockquote>
<p><strong>Bad:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getUserInfo();</div><div class="line">getClientData();</div><div class="line">getCustomerRecord();</div></pre></td></tr></table></figure></p>
<p><strong>Good:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getUser();</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> monday clean code </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Puppeteer First Touch]]></title>
      <url>/2018/05/10/2018-05-10-puppeteer-first-touch/</url>
      <content type="html"><![CDATA[<h3 id="What-is-Puppeteer"><a href="#What-is-Puppeteer" class="headerlink" title="What is Puppeteer"></a>What is Puppeteer</h3><blockquote>
<p>Puppeteer is a Node library which provides a high-level API to control headless Chrome or Chromium over the DevTools Protocol. It can also be configured to use full (non-headless) Chrome or Chromium.</p>
</blockquote>
<p>Well, according to the <a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="external">Puppeteer</a> office Github documentation, It is a <strong>library</strong>, it provides <strong>API</strong> services, and it controls <strong>Chrome</strong>. It’s maintained by Chrome DevTools team, only supported in Node v7.6 or greater version, and only works with Chrome or Chromium.</p>
<blockquote>
<p>Manipulates Chrome like a puppeteer with your code.</p>
</blockquote>
<a id="more"></a> 
<h3 id="Requirements-Environment"><a href="#Requirements-Environment" class="headerlink" title="Requirements / Environment"></a>Requirements / Environment</h3><ol>
<li>Node &gt;= v7.6, Puppeteer requires <code>async/await</code></li>
<li><p>Need latest <code>chrome driver</code>, it will be automatically downloaded when you install <code>puppeteer</code> from <code>npm</code></p>
<p><code>npm install puppeteer --save</code></p>
</li>
</ol>
<h3 id="Quick-Try-Out"><a href="#Quick-Try-Out" class="headerlink" title="Quick Try Out"></a>Quick Try Out</h3><p>Puppeteer provides a <a href="https://try-puppeteer.appspot.com/" target="_blank" rel="external">playground</a> for a quick try out.</p>
<p>Taking a snapshot for my favirate clothing website:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>);</div><div class="line"></div><div class="line">(<span class="keyword">async</span> () =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch();   <span class="comment">// creating a browser instance</span></div><div class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();       <span class="comment">// Use browser to create a new page obj</span></div><div class="line">  <span class="keyword">await</span> page.click(<span class="string">'a &gt; img[alt=Rb6bjbbjkyi]'</span>);  <span class="comment">// using selector to click a img with specific item number</span></div><div class="line">  <span class="keyword">await</span> page.goto(<span class="string">'http://www.supremenewyork.com/shop/new'</span>);  <span class="comment">// take page obj to your link</span></div><div class="line">  <span class="keyword">await</span> page.screenshot(&#123;<span class="attr">path</span>: <span class="string">'supreme.png'</span>&#125;); <span class="comment">// take a screenshot and save to path</span></div><div class="line"></div><div class="line">  <span class="keyword">await</span> browser.close();  <span class="comment">// don't forget to close your browser</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>The whole working process just like using a regular browser, open a web browser, enter a link, and go to the page, take a screenshot of the page, then close browser. Very easy to understand and use.</p>
<p>Base on the documentation, most of developers are using puppeteer as a testing tools for their projects, also it can be used to automating  and scraping the website, you know, writing a robot to auto copping limited clothes or sneakers…🔥</p>
]]></content>
      
        
        <tags>
            
            <tag> Puppeteer </tag>
            
            <tag> headless </tag>
            
            <tag> chrome </tag>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018, 4月]]></title>
      <url>/2018/04/25/2018-04-26-work-review/</url>
      <content type="html"><![CDATA[<p>  2018年1月-4月的工作终结和回顾，记录下来自己所做的，所改变的，正在发生的。。。</p>
<a id="more"></a> 
<h3 id="技术层面"><a href="#技术层面" class="headerlink" title="技术层面"></a>技术层面</h3><p>4个月的工作内容中没有大方面的改变。</p>
<p>对团队的前端项目连续进行两次升级，从Angular 2.5 升级到来Anuglar 4.2版本， Bootstrap 4正式版本的升级。</p>
<p>对项目升级的两种方案进行来对比:</p>
<ul>
<li>从新的template上面开始慢慢移植现有的页面和功能</li>
<li>从当前版本的项目上面移植template所做的更新</li>
</ul>
<p>由于之前的升级采用的是第一种方案，更新的是速度取决与我们项目的大小，平均速度是个fixed rate。</p>
<p>尝试使用第二种方案，前期进度较为缓慢，由于需要花时间阅读和对比代码，分析template的更新之处，<br> 后期速度会直线上升，不会受到项目大小影响，同时也了解到Angular具体哪里更新和变话</p>
<p>个人对这次template的更新并不觉得有太多的变化，从bootstrap beta到了正式版本反而给我们加大了修改class name的工作量</p>
<p>下次template的更新反而更感兴趣，引入了强大的Angular Cli，还有更新到了Angular 5.2稳定版本</p>
<p>Angular 5对service worker更好的支持，和 Cli所提供的强大功能都很值得期待</p>
<h3 id="工作能力层面"><a href="#工作能力层面" class="headerlink" title="工作能力层面"></a>工作能力层面</h3><p>由于一段长时间的懒散，被经理抓去谈话, 指出一些问题和需要改变的地方</p>
<p>本人承认，待在conform zone太久导致天天不想干活这个是真的</p>
<p>个人觉得搞笑的是，他所说的: ‘need more communication with teams’, 真是满脸的黑人问号，<br>团队工作环境是在个工作室里，全队人围着一张桌子有说有笑，有问题都是随时应答的。反而是他自己一个人在office</p>
<p>直到两次 1 on 1 后才知道，原来他说的more communication其实指的是跟他more communicate。靠，说白了，是要我时不时跟他汇报下我在干哈</p>
<p>而且他貌似很享受这种micro management，真是越来越受不了 🙄</p>
<h3 id="闲言碎语"><a href="#闲言碎语" class="headerlink" title="闲言碎语"></a>闲言碎语</h3><p>teams are great, but it is about time to leave… for personal goods</p>
]]></content>
      
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[恶意 （-东野圭吾）]]></title>
      <url>/2017/08/21/2017-08-21-eyi_reading/</url>
      <content type="html"><![CDATA[<h3 id="《恶意》"><a href="#《恶意》" class="headerlink" title="《恶意》"></a>《恶意》</h3><p>受某猪的影响开始阅读她最喜欢的作家的小说</p>
<p>随便在一堆东野圭吾的小说中挑了一本： 《恶意》</p>
<p>太久没有静下来阅读长篇小说</p>
<p>简单的文字，简短的对话</p>
<p>很快的让我进入了整个故事</p>
<p>随着深入的阅读，不断出现对剧情的猜测</p>
<p>真的很有意思</p>
<p>从不同的角色角度交代剧情细节</p>
<p>时不时出现的新线索和值得揣测的对话</p>
<p>让故事的走向不断的变化，不断的推翻旧的猜测</p>
<p>待续。。。</p>
]]></content>
      
        
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于断和续]]></title>
      <url>/2017/08/10/2017-08-10-stop_and_continue/</url>
      <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>空了半年的博客</p>
<p>上个月过完了自己的28岁生日，终于用上了“年近30”</p>
<p>开始随着时间的累积，值得记录的事物越来越多</p>
<p>越发的觉得记录的重要性</p>
<p>学着写点什么</p>
<p>坚持把记录变成一种生活方式</p>
<h3 id="断"><a href="#断" class="headerlink" title="断"></a>断</h3><p>从什么时候开始断说起</p>
<p>2017年2月初，最后一篇博客</p>
<p>工作上开始全力投入到项目从php 到Angular 2 的migration</p>
<p>团队的人员分配问题，前端开发只有我和一个印度小哥（有过angular.js经验）</p>
<p>投入绝大部分时间，精力</p>
<p>学习了全新的框架和语言 （Angular2, TypeScript）</p>
<p>遇到过许多难题和挑战，也都一一解决</p>
<p>工作中没空写博客</p>
<p>下班后也没心思去写博客</p>
<p>导致断了记录的习惯</p>
<h3 id="续"><a href="#续" class="headerlink" title="续"></a>续</h3><p>近期项目也稳定了快2个月了</p>
<p>印度小哥上周刚走，由于跟Macys的合同最多只有18个月，必须离开公司</p>
<p>前端又恢复到了2个半开发者，其中半个，韩国阿加西，前后端同时作业</p>
<p>summer 是公司的slow season</p>
<p>活不多，闲暇的时候开始想写博客</p>
<p>每次写博客的时候都在纠结，到底打中文还是打英文呢</p>
<p>我的中英文都是半斤八两，错误连篇</p>
<p>反正也没人看，就自己看的舒服，怎么舒服怎么写，中英文都有 yeah！~~</p>
<p>为了有动力更新， 换个新的主题先</p>
<p>Hexo， NexT</p>
<p>走起</p>
]]></content>
      
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Write a Custom Filtering Pipe]]></title>
      <url>/2017/02/20/2017-02-20-custom-filter-pipe/</url>
      <content type="html"><![CDATA[<h4 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h4><p>Write your own custom filtering pipe</p>
<a id="more"></a> 
<p>This pipe is be able: </p>
<ul>
<li>filtering data by a single input string </li>
<li>filtering data by a single string with multi condition separating by space</li>
<li>treat all input as string</li>
</ul>
<h4 id="What-is-pipe-in-Angular-2"><a href="#What-is-pipe-in-Angular-2" class="headerlink" title="What is pipe in Angular 2"></a>What is pipe in Angular 2</h4><p>Pipes transform displayed values within a template.</p>
<p>Basically pipe is one kind of musk, transform data displayed in Agular 2 HTML template.</p>
<p>Angular comes with many build in pipes already, for basic usage: <code>DatePipe</code>, <code>UpperCasePipe</code>,<br><code>LowerCasePipe</code>, <code>CurrencyPipe</code> and <code>PercentPipe</code>.</p>
<p>But for some cases, we need specific pipes for specific scenarios.</p>
<p>For example, currently I need a pipe can filter table data for me, with this pipe,<br>I’m be able to filter table data by specific input, to narrow down the table data.</p>
<h4 id="Custom-Pipes"><a href="#Custom-Pipes" class="headerlink" title="Custom Pipes"></a>Custom Pipes</h4><p>We can write our own custom pipes, by creating a pipe class, and imported this pipe module.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="comment">// # Filter Array of Objects</span></div><div class="line"></div><div class="line">@Pipe (&#123; <span class="attr">name</span>: <span class="string">'filter'</span> &#125;)</div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterArrayPipe</span> <span class="title">implements</span> <span class="title">PipeTransform</span>  </span>&#123;</div><div class="line">  transform(value: <span class="built_in">Array</span>&lt;any&gt;, <span class="attr">arg1</span>: any) &#123;</div><div class="line">    <span class="keyword">let</span> result: any;</div><div class="line"></div><div class="line">    <span class="comment">// split input arg into array by space</span></div><div class="line">    <span class="keyword">if</span> (!arg1 || arg1.trim() === <span class="string">''</span>) <span class="keyword">return</span> value;</div><div class="line"></div><div class="line">    <span class="comment">// split input arg into array, filter out not valid string</span></div><div class="line">    <span class="keyword">let</span> argArr = arg1.split(<span class="string">' '</span>).filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123; <span class="keyword">return</span> item !== <span class="string">''</span>; &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// base on input arg array side return value</span></div><div class="line">    <span class="keyword">if</span> (argArr.length === <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">return</span> value;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argArr.length === <span class="number">1</span>) &#123;</div><div class="line">      <span class="comment">/**</span></div><div class="line"><span class="comment">       * one input string, through through data if match, return data</span></div><div class="line"><span class="comment">       */</span></div><div class="line"></div><div class="line">      <span class="keyword">let</span> filter = argArr[<span class="number">0</span>];</div><div class="line">      result = value.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(item);</div><div class="line">        <span class="keyword">if</span> (str.toLowerCase().indexOf(filter.toLowerCase()) !== <span class="number">-1</span>) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argArr.length &gt; <span class="number">1</span>) &#123;</div><div class="line">      <span class="comment">/**</span></div><div class="line"><span class="comment">       * filter with multi column features</span></div><div class="line"><span class="comment">       */</span></div><div class="line">      <span class="keyword">let</span> i = <span class="number">0</span>;  <span class="comment">// pointer for arg array</span></div><div class="line">      <span class="keyword">let</span> data = value;</div><div class="line"></div><div class="line">      <span class="comment">// literate arg array, keep filter result</span></div><div class="line">      <span class="keyword">while</span> (i &lt; argArr.length) &#123;</div><div class="line">        result = data.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</div><div class="line">          <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(item);</div><div class="line">          <span class="keyword">if</span> (str.toLowerCase().indexOf(argArr[i].toLowerCase()) !== <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">// update target array</span></div><div class="line">        data = result;</div><div class="line">        i++;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This pipe definition reveals the following key points:</p>
<ul>
<li><p>To tell Angular this pipe’s name is <code>filter</code>, apply <code>{ name: &#39;filter&#39; }</code> in @Pipe decorator.</p>
</li>
<li><p>A pipe is a class decorated with pipe metadata, in my pipe module, meadata is <code>value</code></p>
</li>
<li><p>The pipe class implements the <code>PipeTransform</code> interface’s transform method that accepts an input value followed by optional parameters and returns the transformed value. Basically we writting all the logic<br>in this method.</p>
</li>
<li><p>There will be one additional argument to the transform method for each parameter passed to the pipe. Your pipe has one such parameter: the exponent. Also we can create as many argument as we want.</p>
</li>
</ul>
<p>For example:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transform(value: any, <span class="attr">arg1</span>: any, <span class="attr">arg2</span>: any, <span class="attr">arg3</span>: any) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>usage:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let item of data | filter: arg1 : arg2 : arg3"</span>&gt;</span></div><div class="line">  &#123;&#123;item&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>To tell Angular that this is a pipe, you apply the @Pipe decorator, which you import from the core Angular library. The @Pipe decorator allows you to define the pipe name that you’ll use within template expressions.<br>It must be a valid JavaScript identifier.</li>
</ul>
<h4 id="Import-Pipes-module-in-app"><a href="#Import-Pipes-module-in-app" class="headerlink" title="Import Pipes module in app"></a>Import Pipes module in app</h4><p>At last, don’t forget to <strong>import</strong> it in the module in order to use it.</p>
]]></content>
      
        
        <tags>
            
            <tag> Angular 2 </tag>
            
            <tag> how to </tag>
            
            <tag> filtering </tag>
            
            <tag> pipe </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Continuous Integration]]></title>
      <url>/2017/01/20/2017-01-20-ci-deploy/</url>
      <content type="html"><![CDATA[<h3 id="What-is-CI-continuous-integration"><a href="#What-is-CI-continuous-integration" class="headerlink" title="What is CI (continuous integration)"></a>What is CI (continuous integration)</h3><p>Continuous integration refers to the build and unit testing stages of the software release process.<br>Every revision that is committed triggers an automated build and test.<br><a id="more"></a> </p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="/images/posts/2017/continuous_integration.png" alt="CI"></h2><h3 id="Travis-CI-Github-Firebase-Angular-2"><a href="#Travis-CI-Github-Firebase-Angular-2" class="headerlink" title="Travis CI + Github + Firebase + Angular 2"></a>Travis CI + Github + Firebase + Angular 2</h3><ol>
<li>Firebase init in project</li>
<li>Writing code in local repo</li>
<li>Pushing to Github repo</li>
<li>Building code production in Travis CI</li>
<li>Deploying production code to Firebase hosting</li>
</ol>
<hr>
<h4 id="Firebase-init"><a href="#Firebase-init" class="headerlink" title="Firebase init"></a>Firebase init</h4><p>Before using <a href="https://firebase.google.com/" target="_blank" rel="external">Google Firebase</a>, need to apply for<br>firebase account.</p>
<p>There are many features which Firebase provides for us, such as Authentication,<br>Database, Storage, Hosting… </p>
<p>In this blog, only need to use Hosting feature, which is free.</p>
<p>Do the Firebase initialization in the existing project directory</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install --save firebase-tools</div><div class="line"></div><div class="line">firebase init</div></pre></td></tr></table></figure>
<p>Following the <code>firebase init</code> instruction to config your project,<br>for my case, I’m building an Angular2 project, so I choose <code>dist</code> as my public<br>directory.</p>
<p>After the initialization, need an access token for CI as environment variable.<br><a href="https://github.com/firebase/firebase-tools#using-with-ci-systems" target="_blank" rel="external">Using with CI Systems</a></p>
<p>then do a deploy test:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firebase deploy</div></pre></td></tr></table></figure>
<hr>
<h4 id="Using-Travis-CI"><a href="#Using-Travis-CI" class="headerlink" title="Using Travis CI"></a>Using Travis CI</h4><p>Greate documentation the complete beginner <a href="https://docs.travis-ci.com/user/for-beginners" target="_blank" rel="external">here</a></p>
<ul>
<li>Connecting Github account to Travis CI</li>
<li>Choosing Github project repo to async</li>
<li>Setting Firebase Token as the environment variable in Travis</li>
<li>Writing a <code>travis.yml</code> config file in your project directory<br><a href="https://docs.travis-ci.com/user/customizing-the-build/" target="_blank" rel="external">Customizing the Build</a></li>
</ul>
<p>In order to deploy project from Travis, inside the <code>travis.yml</code>, add:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">after_success:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">firebase</span> <span class="string">deploy</span> <span class="bullet">--token</span> <span class="string">$&#123;FIREBASE_TOKEN&#125;</span></div></pre></td></tr></table></figure>
<p>write script to build your project:</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">script:</span></div><div class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">install</span></div><div class="line"><span class="bullet">  -</span> <span class="string">npm</span> <span class="string">run</span> <span class="attr">build:prod</span></div></pre></td></tr></table></figure>
<hr>
<h4 id="Push-change-to-Github-build-prod-on-Travis-CI-Deploy-to-Firebase"><a href="#Push-change-to-Github-build-prod-on-Travis-CI-Deploy-to-Firebase" class="headerlink" title="Push change to Github, build prod on Travis CI, Deploy to Firebase"></a>Push change to Github, build prod on Travis CI, Deploy to Firebase</h4><p>Done!</p>
<p>Everything is automated!</p>
<p>Awesome! 😎</p>
]]></content>
      
        
        <tags>
            
            <tag> Angular 2 </tag>
            
            <tag> Firebase </tag>
            
            <tag> Travis CI </tag>
            
            <tag> Deployment </tag>
            
            <tag> Github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Write a directive for charting library in Angular 2]]></title>
      <url>/2016/11/16/2016-11-16-directive-for-charting-library/</url>
      <content type="html"><![CDATA[<h4 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h4><p>Writing a Angular 2 attribute directive for one of popular charting libraries.</p>
<a id="more"></a> 
<p>For example, <strong>Flot directive</strong> usage:</p>
<p><code>*.component.html</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">flot-chart</span></span></div><div class="line"><span class="tag">    [<span class="attr">data</span>]=<span class="string">"data"</span></span></div><div class="line"><span class="tag">    [<span class="attr">options</span>]=<span class="string">"options"</span> <span class="attr">style</span>=<span class="string">"width: 100%; height: 260px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>*.component.ts</code></p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">    moduleId: <span class="built_in">module</span>.id,</div><div class="line">    selector: <span class="string">'something-cmp'</span>,</div><div class="line">    templateUrl: <span class="string">'./*.component.html'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> SomethingComponent &#123;</div><div class="line">    <span class="keyword">this</span>.data: <span class="built_in">any</span>;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</div><div class="line">        <span class="keyword">this</span>.data = sampleData <span class="comment">// setting data with correct format</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>*.module.ts</code></p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</div><div class="line"><span class="keyword">import</span> &#123; SomeComponent &#125; <span class="keyword">from</span> <span class="string">'./path/to/SomeCompont'</span>;</div><div class="line"><span class="keyword">import</span> &#123; FlotModule &#125; <span class="keyword">from</span> <span class="string">'./path/to/FlotModule/index'</span>;</div><div class="line"></div><div class="line"><span class="meta">@NgModule</span>(&#123;</div><div class="line">    imports: [</div><div class="line">        CommonModule,</div><div class="line">        FlotModule</div><div class="line">    ],</div><div class="line">    declarations: [</div><div class="line">        SomeComponent</div><div class="line">    ],</div><div class="line">    exports: [</div><div class="line">        SomeComponent</div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<hr>
<h4 id="Install-Library"><a href="#Install-Library" class="headerlink" title="Install Library"></a>Install Library</h4><p>This part is not import in this article, everyone’s project is different, all depends on different environment. Depending on the certain situation to choose a charting library, the concept is same for most of libraries.</p>
<p>For my current working situation, I need to use several different charting libraries, most of them are open source, free to use :</p>
<ol>
<li><a href="https://jquery.com/" target="_blank" rel="external">jQuery</a>  <code>npm install --save jquery</code></li>
<li><a href="https://www.npmjs.com/package/jquery-flot" target="_blank" rel="external">jquery-flot</a>  <code>npm install --save jquery-flot</code></li>
<li><a href="https://d3js.org/" target="_blank" rel="external">D3</a>  <code>npm install --save d3</code></li>
<li><a href="http://c3js.org/" target="_blank" rel="external">C3</a>  <code>npm install --save c3</code></li>
<li>nvD3, MetricsGraphics.js, etc…</li>
</ol>
<hr>
<h4 id="Project-Directory"><a href="#Project-Directory" class="headerlink" title="Project Directory"></a>Project Directory</h4><p>Create a folder to holds all directive for global usage:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">_ src</div><div class="line">  |_ app</div><div class="line">    |_ chart_libraries</div><div class="line">      |_ flot</div><div class="line">        |_ flot.directive.ts</div><div class="line">        |_ flot.module.ts</div><div class="line">        |_ index.ts</div><div class="line">      |_ D3</div><div class="line">        |_ ...</div><div class="line">      |_ C3</div><div class="line">        |_ ...</div><div class="line">      ...</div></pre></td></tr></table></figure>
<hr>
<h4 id="Create-Directive-for-Flot"><a href="#Create-Directive-for-Flot" class="headerlink" title="Create Directive for Flot"></a>Create Directive for <em>Flot</em></h4><h5 id="Create-directive-ts-for-Flot-Directive"><a href="#Create-directive-ts-for-Flot-Directive" class="headerlink" title="Create directive.ts for Flot Directive"></a>Create directive.ts for Flot Directive</h5><p><code>flot.directive.ts</code></p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Directive, ElementRef, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="keyword">declare</span> <span class="keyword">var</span> jQuery: <span class="built_in">any</span>;</div><div class="line"></div><div class="line"><span class="meta">@Directive</span> (&#123;</div><div class="line">  selector: <span class="string">'[flot-chart]'</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> FlotChart &#123;</div><div class="line">    $el: <span class="built_in">any</span></div><div class="line">    <span class="meta">@Input</span>() data: <span class="built_in">any</span>;</div><div class="line">    <span class="meta">@Input</span>() options: <span class="built_in">any</span>;</div><div class="line"></div><div class="line">    <span class="keyword">constructor</span>(<span class="params">el: ElementRef</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.$el = jQuery(el.nativeElement);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render(): <span class="built_in">void</span> &#123;</div><div class="line">        <span class="comment">// set any default options you want for flot chart</span></div><div class="line">        jQuery.plot(<span class="keyword">this</span>.$el, <span class="keyword">this</span>.data, <span class="keyword">this</span>.options || &#123;</div><div class="line">            series: &#123;</div><div class="line">              lines: &#123;</div><div class="line">                show: <span class="literal">true</span>,</div><div class="line">                lineWidth: <span class="number">1</span>,</div><div class="line">                fill: <span class="literal">false</span>,</div><div class="line">                fillColor: &#123; colors: [&#123; opacity: <span class="number">.001</span> &#125;, &#123; opacity: <span class="number">.5</span>&#125;] &#125;</div><div class="line">              &#125;,</div><div class="line">              points: &#123;</div><div class="line">                show: <span class="literal">false</span>,</div><div class="line">                fill: <span class="literal">true</span></div><div class="line">              &#125;,</div><div class="line">              shadowSize: <span class="number">0</span></div><div class="line">            &#125;,</div><div class="line">            xaxis: &#123;</div><div class="line">              mode: <span class="string">'time'</span>,</div><div class="line">              timezone: <span class="string">'browser'</span></div><div class="line">            &#125;,</div><div class="line">            legend: <span class="literal">false</span>,</div><div class="line">            grid: &#123;</div><div class="line">              show: <span class="literal">false</span>,</div><div class="line">              margin: <span class="number">0</span>,</div><div class="line">              labelMargin: <span class="number">0</span>,</div><div class="line">              axisMargin: <span class="number">0</span>,</div><div class="line">              hoverable: <span class="literal">true</span>,</div><div class="line">              clickable: <span class="literal">true</span>,</div><div class="line">              tickColor: <span class="string">'rgba(255,255,255,1)'</span>,</div><div class="line">              borderWidth: <span class="number">0</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ngOnInit(): <span class="built_in">void</span> &#123;</div><div class="line">        <span class="keyword">this</span>.render();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>declare var jQuery: any</code> is declaring the jQuery variable so that jQuery function can be used in this directive file, in order to <code>declare var</code> please set up inside the <code>webpack</code>.</p>
<p><code>selector: &#39;[flot-chart]&#39;</code> inside the <code>@Directive</code> is very import, this is our HTML attribute selector, so that we can put this selector into HTML elements to use this directive.</p>
<p><code>this.$el = jQuery(el.nativeElement)</code> is assigned current directive host DOM to <code>$el</code>. read more documentation about <a href="https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html" target="_blank" rel="external">ElementRef</a></p>
<h5 id="Create-module-ts-for-Flot-Directive"><a href="#Create-module-ts-for-Flot-Directive" class="headerlink" title="Create module.ts for Flot Directive"></a>Create module.ts for Flot Directive</h5><p><code>flot.module.ts</code></p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; NgModule &#125;      <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">'jquery-flot'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'jquery.flot.animator/jquery.flot.animator'</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">'jquery-flot/jquery.flot.time.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; FlotChart &#125; <span class="keyword">from</span> <span class="string">'./flot.directive'</span>;</div><div class="line"></div><div class="line"><span class="meta">@NgModule</span>(&#123;</div><div class="line">  declarations: [</div><div class="line">    FlotChart</div><div class="line">  ],</div><div class="line">  exports: [</div><div class="line">    FlotChart</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> FlotChartModule &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Import all the Flot dependencies inside the module file, so that Flot can be properly use without errors.</p>
]]></content>
      
        
        <tags>
            
            <tag> directive </tag>
            
            <tag> chart </tag>
            
            <tag> Angular 2 </tag>
            
            <tag> how to </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Open Source Charting Libraries Comparison]]></title>
      <url>/2016/11/10/2016-11-10-charting-library/</url>
      <content type="html"><![CDATA[<p>For current working project, our team is looking for a global charting library in our dashboard project.</p>
<h5 id="coming-soon…"><a href="#coming-soon…" class="headerlink" title="coming soon…"></a>coming soon…</h5>]]></content>
      
        
        <tags>
            
            <tag> open source </tag>
            
            <tag> chart </tag>
            
            <tag> compare </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Component vs Directive in Angular 2]]></title>
      <url>/2016/11/09/2016-11-09-component-vs-directive/</url>
      <content type="html"><![CDATA[<h4 id="Overview-source-angular-io"><a href="#Overview-source-angular-io" class="headerlink" title="Overview (source: angular.io)"></a>Overview (source: <a href="https://angular.io/docs/ts/latest/guide/attribute-directives.html" target="_blank" rel="external">angular.io</a>)</h4><p>Let’s look at the documentations from Angular.io, there are total three kinds of directives in Angular 2:</p>
<ul>
<li><strong>Component</strong> - directives with a template</li>
<li><strong>Structural directives</strong> - change the DOM layout by adding and removing DOM elements, such as <code>*ngIf</code>, <code>*ngFor</code></li>
<li><strong>Attribute directives</strong> - change the appearance or behavior of an element</li>
</ul>
<p>Component actually is one kind of directives in Angular 2, it is a directive with template. This post is going to focus on <strong>Component</strong> and <strong>Attribute Directives</strong>. Let me dive into each kind of directives, and find out what are their characteristics.</p>
<a id="more"></a> 
<h4 id="Component-source-angular-io"><a href="#Component-source-angular-io" class="headerlink" title="Component (source: angular.io)"></a>Component (source: <a href="https://angular.io/docs/ts/latest/quickstart.html#!#root-component" target="_blank" rel="external">angular.io</a>)</h4><p>Every Angular application has at least one component: the root component, also can has children component.</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="meta">@Component</span>(&#123;</div><div class="line">  selector: <span class="string">'my-app'</span>,</div><div class="line">  template: <span class="string">'&lt;h1&gt;Hello Angular!&lt;/h1&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123; &#125;</div></pre></td></tr></table></figure>
<p>Each component comes with:</p>
<ul>
<li><strong>An Import statement</strong> import { Component }</li>
<li><p><strong>@Component decorator</strong> that associates metadata with component class:</p>
<ul>
<li>a <em>selector</em> </li>
<li>a <em>template</em></li>
<li>etc</li>
</ul>
</li>
<li><p><strong>Input and Output Properties</strong></p>
</li>
<li><strong>Lifecycle</strong></li>
<li><strong>Providers</strong></li>
<li><p><strong>Host Element</strong> - a component can interact with its hos DOM:</p>
<ul>
<li>listen to host events</li>
<li>update host’s properties</li>
<li>invoke methods on host DOM</li>
</ul>
</li>
<li><p>Components are <strong>Self-describing</strong>:</p>
<ul>
<li>knows how to <strong>interact</strong> with host</li>
<li>know to <strong>render</strong> itself</li>
<li><strong>configure</strong> dependency injection</li>
<li>well-<strong>defined</strong> input and output properties</li>
</ul>
</li>
</ul>
<p>Base on self-describing characteristic, any component can be bootstrapped as an application, can be loaded into router outlet, or be used in some other component directly.</p>
<h4 id="Directives-source-angular-io"><a href="#Directives-source-angular-io" class="headerlink" title="Directives (source: angular.io)"></a>Directives (source: <a href="https://angular.io/docs/ts/latest/guide/attribute-directives.html" target="_blank" rel="external">angular.io</a>)</h4><p>More precisely, it is attribute directives, it is used to change appearance and add behavior to DOM</p>
<p>Example:</p>
<figure class="highlight ts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Directive, ElementRef, Input, Renderer &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</div><div class="line"><span class="meta">@Directive</span>(&#123; selector: <span class="string">'[myHighlight]'</span> &#125;)</div><div class="line"><span class="keyword">export</span> <span class="keyword">class</span> HighlightDirective &#123;</div><div class="line">    <span class="keyword">constructor</span>(<span class="params">el: ElementRef, renderer: Renderer</span>) &#123;</div><div class="line">       renderer.setElementStyle(el.nativeElement, <span class="string">'backgroundColor'</span>, <span class="string">'yellow'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The import statement specifies symbols from the Angular core:</p>
<ol>
<li><strong>Directive</strong> provides the functionality of the @Directive decorator.</li>
<li><strong>ElementRef</strong> injects into the directive’s constructor so the code can access the DOM element. <a href="https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html" target="_blank" rel="external">api</a></li>
<li><strong>Input</strong> allows data to flow from the binding expression into the directive.</li>
<li><strong>Renderer</strong> allows the code to change the DOM element’s style. <a href="https://angular.io/docs/ts/latest/api/core/index/Renderer-class.html" target="_blank" rel="external">api</a></li>
</ol>
<p><code>selector: &#39;[myHighlight]&#39;</code> is a CSS selector to identify the HTML in the template associate with directives, usage:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">myHighlight</span>&gt;</span>Highlight me!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>It is hard to explain all the detail about directive, I prefer to read over the documentation from <a href="https://angular.io/docs/ts/latest/guide/attribute-directives.html" target="_blank" rel="external">angular.io</a>. By creating a example directive will help you understand what attribute directives is.</p>
<h4 id="Overall-Comparison-source-CODEANDYOU"><a href="#Overall-Comparison-source-CODEANDYOU" class="headerlink" title="Overall Comparison (source: CODEANDYOU)"></a>Overall Comparison (source: <a href="http://www.codeandyou.com/2016/01/difference-between-component-and-directive-in-Angular2.html" target="_blank" rel="external">CODEANDYOU</a>)</h4><table>
<thead>
<tr>
<th>Component</th>
<th>Directive</th>
</tr>
</thead>
<tbody>
<tr>
<td>For register component we use @Component meta-data annotation.</td>
<td>For register directives we use @Directive meta-data annotation.</td>
</tr>
<tr>
<td>Component is a directive which use shadow DOM to create encapsulate visual behavior called components.  Components are typically used to create UI widgets.</td>
<td>Directives is used to add behavior to an existing DOM element.</td>
</tr>
<tr>
<td>Component is used to break up the application into smaller components.</td>
<td>Directive is use to design re-usable components.</td>
</tr>
<tr>
<td>Only one component can be present per DOM element.</td>
<td>Many directive can be used in a per DOM element.</td>
</tr>
<tr>
<td>@View decorator or template URL template are mandatory in the component.</td>
<td>Directive don’t have View.</td>
</tr>
<tr>
<td>Component is used to define pipes.</td>
<td>You can’t define Pipes in directive.</td>
</tr>
<tr>
<td>viewEncapsulation can be define in components because they have views.</td>
<td>viewEncapsulation can be define in components because they have views.</td>
</tr>
</tbody>
</table>
]]></content>
      
        
        <tags>
            
            <tag> component </tag>
            
            <tag> directive </tag>
            
            <tag> angular 2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SublimeLinter path configure]]></title>
      <url>/2016/10/25/2016-10-25-sublimelinter-trick/</url>
      <content type="html"><![CDATA[<p>After install sublimeLinter package</p>
<p>installed plugin such as sublimeLinter-php, sublimeLinter-jshint</p>
<p>in Mac OSX, need to configuration user setting file: </p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">path: [</div><div class="line">    <span class="string">'/Users/ put your account name here /local/bin/'</span></div><div class="line">    ]</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> sublime </tag>
            
            <tag> linter </tag>
            
            <tag> jshint </tag>
            
            <tag> path </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Game of Life Revisit]]></title>
      <url>/2016/10/13/2016-10-13-game-of-life/</url>
      <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life" target="_blank" rel="external">Conway’s Game of Life</a></p>
<h5 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h5><p>Back to college time, I had assignment about using <code>C++</code> to write a game base on ‘Game of Life’, although I did pass that course any way, I had completed forgot how I did it. This question popped up while I did the practices on Leetcode,  I didn’t come up the good solution to pass all the test. I tried to get helps from discussion section, there is a top answer which provided by <a href="https://discuss.leetcode.com/topic/29054/easiest-java-solution-with-explanation" target="_blank" rel="external">@yavinci</a>. I think his solution is brilliant with great explanation. </p>
<a id="more"></a> 
<h5 id="Logic-behind-the-code"><a href="#Logic-behind-the-code" class="headerlink" title="Logic behind the code"></a>Logic behind the code</h5><p>Using 2 bit to store ‘current’ state and ‘next’ state</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">        [2nd bit  ,  1st bit] </div><div class="line">      [next state ,  current state]</div><div class="line">- 00  dead (next) &lt;- dead (current)</div><div class="line">- 01  dead (next) &lt;- live (current)  </div><div class="line">- 10  live (next) &lt;- dead (current)  </div><div class="line">- 11  live (next) &lt;- live (current)</div></pre></td></tr></table></figure>
<ol>
<li>Every cell is 0 or 1, in 2 bit it is either <code>00</code> or <code>01</code></li>
<li>Notice that <code>1st</code> state is independent of <code>2nd</code> state.</li>
<li>All cells update at same time</li>
<li>count # neighbors from <code>1st</code> state and send <code>2nd</code> state bit</li>
<li>Since <code>2nd</code> state default to dead, no consideration for situation <code>01-&gt;00</code></li>
<li>After update all cells, delete cell’s <code>1st</code> state by <code>&gt;&gt;1</code></li>
</ol>
<p>For each cell’s <code>1st</code> bit, check the 8 cells around itself, and set the cell’s <code>2nd</code> bit.</p>
<ol>
<li>Transition <code>01 -&gt; 11</code>: when <code>board[i][j] == 1</code> and lives &gt;= 2 &amp;&amp; lives &lt;= 3.</li>
<li>Transition <code>00 -&gt; 10</code>: when <code>board[i][j] == 0</code> and lives == 3.</li>
</ol>
<p>To get the current state, simply do</p>
<p><code>board[i][j] &amp; 1</code></p>
<p>To get the next state, simply do</p>
<p><code>board[i][j] &gt;&gt; 1</code></p>
<h5 id="Code-break-down"><a href="#Code-break-down" class="headerlink" title="Code break down"></a>Code break down</h5><p>There are <em>three</em> main section in the code</p>
<h5 id="update-every-cell-base-on-neighbors-conditions"><a href="#update-every-cell-base-on-neighbors-conditions" class="headerlink" title="update every cell base on neighbors conditions"></a>update every cell base on neighbors conditions</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m = board.length;</div><div class="line"><span class="keyword">var</span> n = board[<span class="number">0</span>].length;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">        <span class="keyword">var</span> lives = livesNeighbors(board, i, j, m, n);</div><div class="line">        <span class="comment">// in the beginning every 2nd bit should be 0</span></div><div class="line">        <span class="comment">// only check 2nd bit becomes 1</span></div><div class="line">        <span class="keyword">if</span> (board[i][j] === <span class="number">1</span> &amp;&amp; lives &gt;=<span class="number">2</span> &amp;&amp; lives &lt;= <span class="number">3</span>) &#123;</div><div class="line">            board[i][j] = <span class="number">3</span>;    <span class="comment">// Make the 2nd bit 1: 01 ---&gt; 11</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (board[i][j] === <span class="number">0</span> &amp;&amp; lives &lt; <span class="number">2</span>) &#123;</div><div class="line">            board[i][j] = <span class="number">2</span>;    <span class="comment">// Make the 2nd bit 1: 00 ---&gt; 10</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="transit-all-cell-into-next-state-only-keep-2nd-bit"><a href="#transit-all-cell-into-next-state-only-keep-2nd-bit" class="headerlink" title="transit all cell into next state (only keep 2nd bit)"></a>transit all cell into next state (only keep <code>2nd</code> bit)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++) &#123;</div><div class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</div><div class="line">        board[i][j] &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="check-neighbors-function"><a href="#check-neighbors-function" class="headerlink" title="check neighbors function"></a>check neighbors function</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">livesNeighbors</span>(<span class="params">board, i, j, m, n</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> lives = <span class="number">0</span>;</div><div class="line">    <span class="comment">// when i, j is edge row or column, using Math.max and Math.min</span></div><div class="line">    <span class="keyword">for</span> (x = <span class="built_in">Math</span>.max(i - <span class="number">1</span>, <span class="number">0</span>); x &lt;= <span class="built_in">Math</span>.min(i + <span class="number">1</span>, <span class="number">0</span>); x++) &#123;</div><div class="line">        <span class="keyword">for</span> (y = <span class="built_in">Math</span>.max(j - <span class="number">1</span>, <span class="number">0</span>); y &lt;= <span class="built_in">Math</span>.min(j + <span class="number">1</span>, <span class="number">0</span>); y++) &#123;</div><div class="line">            lives += board[x][y] &amp; <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// delete current cell</span></div><div class="line">    lives -= board[i][j] &amp; <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> lives;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> game of life </tag>
            
            <tag> leetcode </tag>
            
            <tag> algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jasmine JavaScript Testing]]></title>
      <url>/2016/10/06/2016-10-06-javascript-unit-test/</url>
      <content type="html"><![CDATA[<p>This post enlighten by <a href="https://www.amazon.com/Jasmine-JavaScript-Testing-Paulo-Ragonha-ebook/dp/B00WQWY8S0/ref=sr_1_1?ie=UTF8&amp;qid=1475802581&amp;sr=8-1&amp;keywords=jasmine+javascript+testing+-+second+edition" target="_blank" rel="external">Jasmine JavaScript Testing</a></p>
<a id="more"></a> 
<h5 id="unit-test"><a href="#unit-test" class="headerlink" title="unit test"></a>unit test</h5><p>a piece of code tests a functionality of unit of application code.</p>
<h5 id="Jasmine"><a href="#Jasmine" class="headerlink" title="Jasmine"></a>Jasmine</h5><p>Jasmine: <em>behavior-driven development</em> test framework</p>
<h5 id="TDD-vs-BDD"><a href="#TDD-vs-BDD" class="headerlink" title="TDD vs. BDD"></a>TDD vs. BDD</h5><p><code>test-driven development</code> turns into <code>behavior-driven development</code> by <code>Dan North</code></p>
<h5 id="BDD"><a href="#BDD" class="headerlink" title="BDD"></a>BDD</h5><ul>
<li>Given: this provides an initial context</li>
<li>When: this defines the event occurs</li>
<li>Then: this ensures an outcome</li>
</ul>
<h5 id="Jasmine-BDD-example"><a href="#Jasmine-BDD-example" class="headerlink" title="Jasmine BDD example"></a>Jasmine BDD example</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">"Player"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    describe(<span class="string">"when song has been paused"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       it(<span class="string">"should indicate that the song is paused"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        &#125;); </div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="spec"><a href="#spec" class="headerlink" title="spec"></a>spec</h5><p>each unit test call <code>spec</code>, short for <code>specification</code></p>
<h5 id="write-a-Jasmine-test"><a href="#write-a-Jasmine-test" class="headerlink" title="write a Jasmine test"></a>write a Jasmine test</h5><p><code>describe</code> function is a <code>global</code> Jasmine function, used to define test contest, it creates a new test suite(a collection of test cases), acceptes two params:</p>
<ul>
<li><code>string</code>: name of test suite</li>
<li><code>function</code>: a function that will contains all its specs</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">"Investment"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;);</div></pre></td></tr></table></figure>
<p><code>it</code>, another <code>golbal</code> Jasmine function, accepts two params:</p>
<ul>
<li><code>string</code>: title of the spec</li>
<li><code>function</code>: a function that will contains the spec code</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">"Investment"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    it(<span class="string">"should be of a stock"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>expect</code>, an assertion or expectation is a comparison between two values, result of comparison is true means success, along with a <code>matcher</code> that indicates what comparison must be made with the values.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">describe(<span class="string">"Investment"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">    it(<span class="string">"should be of a stock"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line">        expect(investment.stock).toBe(stock);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h6 id="Setup-and-teardown"><a href="#Setup-and-teardown" class="headerlink" title="Setup and teardown"></a>Setup and teardown</h6><ul>
<li><code>beforeEach</code>: setup function, runs from outside before every spec(<code>it</code>)</li>
<li>run spec(<code>it</code>)</li>
<li><code>afterEach</code>: teardown function, runs from outside after every spec(<code>it</code>)</li>
</ul>
<h6 id="Write-unit-test-in-Spec-js"><a href="#Write-unit-test-in-Spec-js" class="headerlink" title="Write unit test in *Spec.js"></a>Write unit test in <code>*Spec.js</code></h6><h6 id="⇅"><a href="#⇅" class="headerlink" title="⇅"></a>⇅</h6><h6 id="Debug-and-write-more-unit-test"><a href="#Debug-and-write-more-unit-test" class="headerlink" title="Debug and write more unit test"></a>Debug and write more unit test</h6>]]></content>
      
        
        <tags>
            
            <tag> unit test </tag>
            
            <tag> karma </tag>
            
            <tag> jasmine </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unit Test, Karma, Jasmine]]></title>
      <url>/2016/10/05/2016-10-05-unit-test/</url>
      <content type="html"><![CDATA[<p>My current job content is developing and maintaining a web application which written in PHP. It requires same Javascript for front-end, but our team current development process based on others teams requirements:</p>
<p>When they ask, we develop…🙄</p>
<p>No time line, no strictly requirement, all work check and test done by visual result in browser.</p>
<p>After working on current project for over 6 months, I realized I have no any efficiency process to test my Javascript code (no any test for PHP side either). I wanna try on Karma and Jasmine on our PHP MVC framework, only do unit test for my Javascript part, no plan for PHP code so far.</p>
<h6 id="Task-break-down"><a href="#Task-break-down" class="headerlink" title="Task break down"></a>Task break down</h6><ol>
<li>set up environment</li>
<li>write unit test case for current exist Javascript file</li>
<li>run and debug</li>
<li>repeat step 2, step 3</li>
</ol>
<h6 id="Set-up-test-environment-in-current-project"><a href="#Set-up-test-environment-in-current-project" class="headerlink" title="Set up test environment in current project"></a>Set up test environment in current project</h6><ol>
<li>Initiated a <code>Node.js</code> project under the current project directory</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
<ol>
<li>Install <code>Karma</code>, <code>Jasmine</code>, <code>minimatch</code> and others dependencies base on installation result</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install karma --save-dev</div><div class="line">npm install karma-cli -g</div><div class="line">npm install karma-jasmine --save-dev</div><div class="line">npm install minimatch --save-dev</div></pre></td></tr></table></figure>
<ol>
<li>Configure <code>karma.conf.js</code>, see configuration instruction <a href="http://karma-runner.github.io/1.0/intro/configuration.html" target="_blank" rel="external">here</a>. Select <code>Jasmine</code> as frameworks.</li>
<li>Specify file paths in <code>karma.conf.js</code>, add current project dependencies such as <code>jQuery</code>, <code>Bootstrap</code> and other Javascript libraries if necessary.</li>
<li>Finally specify the unit test file and source file path in <code>karma.conf.js</code>, for example: </li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">files: [</div><div class="line">    <span class="string">'www/js/*.js'</span>,              <span class="comment">// source file path</span></div><div class="line">    <span class="string">'test/www/js/*Spec.js'</span>      <span class="comment">// unit test file path</span></div><div class="line">]</div></pre></td></tr></table></figure>
<p>using <code>minimatch</code> to have more control on file selection.</p>
<h6 id="Write-unit-test-in-Spec-js"><a href="#Write-unit-test-in-Spec-js" class="headerlink" title="Write unit test in *Spec.js"></a>Write unit test in <code>*Spec.js</code></h6><h6 id="⇅"><a href="#⇅" class="headerlink" title="⇅"></a>⇅</h6><h6 id="Debug-and-write-more-unit-test"><a href="#Debug-and-write-more-unit-test" class="headerlink" title="Debug and write more unit test"></a>Debug and write more unit test</h6>]]></content>
      
        
        <tags>
            
            <tag> unit test </tag>
            
            <tag> karma </tag>
            
            <tag> jasmine </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
