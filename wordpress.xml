<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->


<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Bo&#039;s Blog</title>
	<link>http://bochentheone.com</link>
	<description>梦想是不会逃跑的，会逃跑的永远都是自己 —— 宫崎骏</description>
	<pubDate>Sat, 04 Jul 2015 21:43:12 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://bochentheone.com</wp:base_site_url>
	<wp:base_blog_url>http://bochentheone.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>bochentheone@hotmail.com</wp:author_login><wp:author_email>bochentheone@hotmail.com</wp:author_email><wp:author_display_name><![CDATA[bochentheone@hotmail.com]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	

	<item>
		<title>Hello world! Congras to myself!</title>
		<link>http://bochentheone.com/?p=4</link>
		<pubDate>Sat, 28 Jun 2014 11:35:07 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=4</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><strong>My first personal blog posted!</strong>
2014-06-28T11:35:20+00:00</h3>
本人的第一个博客，目前对blog还没有全面的目标和方向

但是我会将自己近期的项目开发之类的一些琐事放在这个blog

也许会有些问题啊之类的

但是应该能给自己起到一定的激励和记录吧。

一直都没有写博客的习惯，不知道能坚持多久！！

而且应该完全没有人知道这个网址目前，呵呵，观众就我一个！

也罢，自由，随意！我的风格

がんばれ！！<a href="http://bochentheone.com/wp-content/uploads/2014/06/9CFCCDFB-DD2A-4ABE-ADDD-7936485670FB.jpg"><img class="alignnone size-medium wp-image-6" src="http://bochentheone.com/wp-content/uploads/2014/06/9CFCCDFB-DD2A-4ABE-ADDD-7936485670FB-227x300.jpg" alt="Ging" width="227" height="300" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2014-06-28 11:35:07</wp:post_date>
		<wp:post_date_gmt>2014-06-28 11:35:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>blog</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%b8%aa%e4%ba%ba%e5%b0%8f%e8%ae%b0"><![CDATA[个人小记]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_ssb_hide</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Got some ideas for my blog</title>
		<link>http://bochentheone.com/?p=11</link>
		<pubDate>Sun, 29 Jun 2014 14:22:24 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[今天吃饭时想了关于我应该做些什么内容的东西放在这里呢？

说实在的，我好像没有什么特别擅长，和特别喜欢的

平常也很宅都是看漫画，音乐和电影来消磨时间

由于宅的关系，导致我看过无数的电影和漫画

不如从这方面入手吧

把自己喜欢的电影，漫画之类的post在自己的网页

顺便话点时间给他们做个page之类的

然后加入转发的功能，让同样喜欢某个作品的人产生共鸣

这样应该间接也能交到些朋友吧

比如说我最近无限脑循环的一首歌： Happy （小黄人的主题曲）

不知道有谁听过。。。反正我已经无限循环中了。。。。

第一次接触到html，做得网页也奇丑无比，

但是会秉承简洁的风格，主要是看的舒服就好嘛！是吧

配个图先，lol：

<a href="http://bochentheone.com/wp-content/uploads/2014/06/banana.jpg"><img class="alignnone size-medium wp-image-12" src="http://bochentheone.com/wp-content/uploads/2014/06/banana-300x131.jpg" alt="banana" width="300" height="131" /></a>

<a href="http://bochentheone.com/banana" title="点我可以听Happy哦！@——@">点我进入 Happy 歌曲网页</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2014-06-29 14:22:24</wp:post_date>
		<wp:post_date_gmt>2014-06-29 14:22:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>got-ideas-bolg</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ideas"><![CDATA[Ideas]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_ssb_hide</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>公司的电脑好烂，啥都装不了</title>
		<link>http://bochentheone.com/?p=16</link>
		<pubDate>Tue, 01 Jul 2014 06:53:53 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[木有FTP工具，花了半天功夫利用老版IE自带的工具看到了banana网页的代码

继续上次的工程

遇到个问题： 想把播放器和转发的DIV固定在其他地方

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2014-07-01 06:53:53</wp:post_date>
		<wp:post_date_gmt>2014-07-01 06:53:53</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e5%85%ac%e5%8f%b8%e7%9a%84%e7%94%b5%e8%84%91%e5%a5%bd%e7%83%82%ef%bc%8c%e5%95%a5%e9%83%bd%e8%a3%85%e4%b8%8d%e4%ba%86</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%b8%aa%e4%ba%ba%e5%b0%8f%e8%ae%b0"><![CDATA[个人小记]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_ssb_hide</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>It&#039;s been a while</title>
		<link>http://bochentheone.com/?p=36</link>
		<pubDate>Wed, 16 Jul 2014 06:30:50 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=36</guid>
		<description></description>
		<content:encoded><![CDATA[don't have any time to write a post in last few weeks,

but my life has been very regularly

wake up around 7:30, arrive in company at 8:30( I hate to take the train, so many god damn ppl! )

waiting for 11:30 to get the lunch, I like the lunch break. lol! alomost 2hrs lunch break, so relaxing

finally, 5:30 time to go home! Taking the train to aunt's house, have a dinner, work out, and go back to hotel

if lucky I still have one hour to play dota2(like it! spend to much on it, lol)

need to back on my shitty project I think,

recently I got  a small idea about a phone app.

trying to make it bigger

fighting!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2014-07-16 06:30:50</wp:post_date>
		<wp:post_date_gmt>2014-07-16 06:30:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>its-been-a-while</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%b8%aa%e4%ba%ba%e5%b0%8f%e8%ae%b0"><![CDATA[个人小记]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_ssb_hide</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Delete me after 07/17</title>
		<link>http://bochentheone.com/?p=43</link>
		<pubDate>Wed, 16 Jul 2014 06:42:52 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[DHR VPN:

域名： DHRPAYMENT.COM

用户名： chenbo

密码： Chen.bo

IP: 58.211.87.77

VPN类型： PPTP VPN

远程桌面连接：

计算机： 10.20.130.5

用户名： KRONOS-TESTSQL\chenbo

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2014-07-16 06:42:52</wp:post_date>
		<wp:post_date_gmt>2014-07-16 06:42:52</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>delete-0717</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%b8%aa%e4%ba%ba%e5%b0%8f%e8%ae%b0"><![CDATA[个人小记]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_ssb_hide</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>小记</title>
		<link>http://bochentheone.com/?p=48</link>
		<pubDate>Wed, 30 Jul 2014 02:51:23 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=48</guid>
		<description></description>
		<content:encoded><![CDATA[last week of my intern,

time flies ~~~ heheh

明天要跟clio交接下表格的情况了。。

感觉自己太拖拉了，事情总是拖拖拖。。。完蛋了

今天看到一张图片关于说成功者和失败者的区别

其中列出了种种习惯，有一项就是坚持写日志

我自己断断续续的写过一些日志，总是没坚持超过2个月的

too shame...

坚持写日志的话应该是给自己一个时间来总结近期的成果和反思，进行一个经验的积累

也给自己制定一下近期的目标把

让自己的生活更有规划

而且还可以在日志中进行发泄，宣泄自己的烦恼之类的

反正就是好处多多啦

坚持写日志吧！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2014-07-30 02:51:23</wp:post_date>
		<wp:post_date_gmt>2014-07-30 02:51:23</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e5%b0%8f%e8%ae%b0</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%b8%aa%e4%ba%ba%e5%b0%8f%e8%ae%b0"><![CDATA[个人小记]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_ssb_hide</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>8-5-2014</title>
		<link>http://bochentheone.com/?p=53</link>
		<pubDate>Wed, 06 Aug 2014 18:14:03 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[time to write my little dairy!

晚上11：30分才到宾馆，跟涵妍和阿猛他们看了 《闺蜜》

简直无力吐槽的电影，给个5分， 看在几个美女版丑和余文乐的份上

当然导演这么努力了，还是没有超过四娘的最烂。。。（不想花力气吐槽小时代）

最后一个星期呆在国内了，下周三的飞机飞回美国

有点怕啊。。。感觉习惯了国内这种悠哉的节奏

现在马上就要回美国了，有种要不得不面对现实的恐慌

但是我知道美国的生活才是我目前真正的人生

回国美国，还有一堆事情面对，尼玛！！真TMD头疼

在剩下的一周里只能好好享受这种阔绰的生活啊！

哦，还要给大家买礼物不能忘记了

明天要去公司领工资，顺便把钱存了

然后淘宝买几个手办分给那郭家两兄弟，还有DCY=_=

下次写日记就是在飞机上了吧，要好好回顾下这3个月的情况！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2014-08-06 18:14:03</wp:post_date>
		<wp:post_date_gmt>2014-08-06 18:14:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>8-5-2014</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%b8%aa%e4%ba%ba%e5%b0%8f%e8%ae%b0"><![CDATA[个人小记]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_ssb_hide</wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427282151;s:7:"payload";a:1:{i:0;a:1:{s:2:"id";i:102;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Difference between Method Overloading and Overriding in Java?</title>
		<link>http://bochentheone.com/?p=102</link>
		<pubDate>Tue, 24 Mar 2015 21:09:25 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=102</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://bochentheone.com/wp-content/uploads/2015/03/Difference-between-method-overloading-and-overriding-in-Java.gif"><img class="alignnone  wp-image-109" src="http://bochentheone.com/wp-content/uploads/2015/03/Difference-between-method-overloading-and-overriding-in-Java-300x166.gif" alt="Difference between method overloading and overriding in Java" width="322" height="178" /></a>

Main difference comes form the fact that method overloading is resolved during compile time, while method overriding is resolved at runtime. Also rules of overriding or overloading a method is different in Java. For example, private, static and final method cannot be overriding in Java but you can still overload them. For overriding both name and signature of method must remain same, but in for overloading method signature must be different. Last but not the least difference between them is that call to overloaded methods are resolved using static binding while call to overridden method is resolved using dynamic binding in Java.<!--more-->

1) First and most important difference between method overloading and overriding is that, In case of method overloading in Java, signature of method changes while in case of method overriding it remain same.

2) Second major difference between method overloading vs overriding in Java is that You can overload method in one class but overriding can only be done on subclass.

3) You can not override static, final and private method in Java but you can overload static, final or private method in Java.

4) Overloaded method in Java is bonded by static binding and overridden methods are subject to dynamic binding.

5) Private and final method can also be not overridden in Java.
<h3><strong>Method Overloading and Overriding Example in Java</strong></h3>
Here is an example of both method overloading and method overriding in Java. In order to explain the concept we have create two classes Loan and PersonalLoan. createLoan() method is overloaded as it has different version with different signature, while toString() method which is original declared in Object class is overridden in both Loan and PersonalLoan class.
<pre>public class OverloadingOverridingTest {

    public static void main(String[] args) {

        // Example of method overloading in Java
        Loan cheapLoan = Loan.createLoan("HSBC");
        Loan veryCheapLoan = Loan.createLoan("Citibank", 8.5);

        // Example of method overriding in Java
        Loan personalLoan = new PersonalLoan();
        personalLoan.toString();
    }

}

public class Loan {
    private double interestRate;
    private String customer;
    private String lender;

    public static Loan createLoan(String lender) {
        Loan loan = new Loan();
        loan.lender = lender;
        return loan;
    }

    public static Loan createLoan(String lender, double interestRate) {
        Loan loan = new Loan();
        loan.lender = lender;
        loan.interestRate = interestRate;
        return loan;
    }

    @Override
    public String toString() {
        return "This is Loan by Citibank";
    }

}

public class PersonalLoan extends Loan {

    @Override
    public String toString() {
        return "This is Personal Loan by Citibank";
    }
}</pre>
via <a href="http://javarevisited.blogspot.sg/2011/12/method-overloading-vs-method-overriding.html">Difference between Method Overloading and Overriding in Java?</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2015-03-24 21:09:25</wp:post_date>
		<wp:post_date_gmt>2015-03-24 21:09:25</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>difference-between-method-overloading-and-overriding-in-java-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="interviews"><![CDATA[Interviews]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="method"><![CDATA[method]]></category>
		<category domain="post_tag" nicename="overload"><![CDATA[overload]]></category>
		<category domain="post_tag" nicename="override"><![CDATA[override]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434250269;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:288;}i:1;a:1:{s:2:"id";i:235;}i:2;a:1:{s:2:"id";i:271;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tickets to The International &#124; Dota 2</title>
		<link>http://bochentheone.com/?p=141</link>
		<pubDate>Tue, 24 Mar 2015 23:20:07 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=141</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;">Tickets to The International</p>
March 20, 2015 - Dota Team

Dota 2 returns to KeyArena in Seattle this summer from August 3rd through August 8th.

All tickets will be general admission, which will cost $99 and give you access to all six days of the main event, where the top 16 teams in the world will compete for the Aegis of Champions.

We are not directly selling VIP tickets this year, but stay tuned for details on the VIP experience.

Tickets will be made available through Ticketmaster at two separate times next Friday, March 27th.

The first batch of tickets will be sold at 10:00am PDT, and the last batch will be sold at 10:00pm PDT.

via <a href="http://blog.dota2.com/2015/03/tickets-to-the-international/">Tickets to The International | Dota 2</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date>2015-03-24 23:20:07</wp:post_date>
		<wp:post_date_gmt>2015-03-24 23:20:07</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>tickets-to-the-international-dota-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dota2"><![CDATA[dota2]]></category>
		<category domain="category" nicename="games"><![CDATA[Games]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1429870860;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:216;}i:1;a:1:{s:2:"id";i:155;}i:2;a:1:{s:2:"id";i:102;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[146]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to use post excerpt in Twenty Fifteen WordPress theme</title>
		<link>http://bochentheone.com/?p=155</link>
		<pubDate>Wed, 25 Mar 2015 07:59:03 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=155</guid>
		<description></description>
		<content:encoded><![CDATA[Post excerpt in Twenty Fifteen WordPress theme

I try to fix my blog page to be all excerpt post, but the Wordpress twenty, fifteen only shows the entire post on the blog page, the infficience way to do is using <em>more tag </em>when writing every post. Therefore, I spend some time to find this blog, it shows how to make all blog pages to be excerpted.

via <a href="http://www.findurlaptop.com/tech/2014/12/26/post-excerpt-in-twenty-fifteen-wordpress-theme/">How to use post excerpt in Twenty Fifteen WordPress theme</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date>2015-03-25 07:59:03</wp:post_date>
		<wp:post_date_gmt>2015-03-25 07:59:03</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>how-to-use-post-excerpt-in-twenty-fifteen-wordpress-theme</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hmtl"><![CDATA[hmtl]]></category>
		<category domain="category" nicename="how-to"><![CDATA[How to]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<category domain="post_tag" nicename="theme"><![CDATA[theme]]></category>
		<category domain="post_tag" nicename="wordpress"><![CDATA[wordpress]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1427919268;s:7:"payload";a:2:{i:0;a:1:{s:2:"id";i:158;}i:1;a:1:{s:2:"id";i:141;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Last night, GitHub was hit with massive denial-of-service attack from China</title>
		<link>http://bochentheone.com/?p=158</link>
		<pubDate>Sun, 29 Mar 2015 19:12:47 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=158</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://bochentheone.com/wp-content/uploads/2015/03/QQ20150329-1@2x.png"><img class="alignnone size-medium wp-image-168" src="http://bochentheone.com/wp-content/uploads/2015/03/QQ20150329-1@2x-300x132.png" alt="QQ20150329-1@2x" width="300" height="132" /></a>Last night, GitHub was hit with a massive denial of service attack. Some time Wednesday, scripts belonging to the internet giant Baidu began directing traffic to two specific GitHub pages: one run by GreatFire, and another mirroring Chinese translations of The New York Times. The result for Github was a massive flood of traffic, which built for more than 24 hours before causing partial outages Thursday night. Server logs show a sudden drop in app server availability just before midnight, and page failure rates spiking to 100% just before 3am. Although according to admins, the attack is still ongoing, and recent tweets suggest a surge in attack volume on Friday morning.

via <a href="http://www.theverge.com/2015/3/27/8299555/github-china-ddos-censorship-great-firewall">Last night, GitHub was hit with massive denial-of-service attack from China | The Verge</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date>2015-03-29 19:12:47</wp:post_date>
		<wp:post_date_gmt>2015-03-29 19:12:47</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>last-night-github-was-hit-with-massive-denial-of-service-attack-from-china</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="attack"><![CDATA[attack]]></category>
		<category domain="post_tag" nicename="baidu"><![CDATA[baidu]]></category>
		<category domain="post_tag" nicename="ddos"><![CDATA[DDoS]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[github]]></category>
		<category domain="category" nicename="news%e6%96%b0%e9%97%bb"><![CDATA[News]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1432193993;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:141;}i:1;a:1:{s:2:"id";i:102;}i:2;a:1:{s:2:"id";i:155;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Highly recommend this Git learning website</title>
		<link>http://bochentheone.com/?p=197</link>
		<pubDate>Thu, 02 Apr 2015 18:26:32 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=197</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Welcome to LearnGitBranching!</strong>

This application is designed to help beginners grasp the powerful concepts behind branching when working with git. We hope you enjoy this application and maybe even learn something!

<strong><a href="http://pcottle.github.io/learnGitBranching/">http://pcottle.github.io/learnGitBranching/</a></strong>

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>197</wp:post_id>
		<wp:post_date>2015-04-02 18:26:32</wp:post_date>
		<wp:post_date_gmt>2015-04-02 18:26:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>highly-recommend-this-git-learning-website</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="post_tag" nicename="github"><![CDATA[github]]></category>
		<category domain="category" nicename="how-to"><![CDATA[How to]]></category>
		<category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1432316204;s:7:"payload";a:1:{i:0;a:1:{s:2:"id";i:245;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于诚强的创业想法</title>
		<link>http://bochentheone.com/?p=210</link>
		<pubDate>Thu, 02 Apr 2015 18:54:22 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=210</guid>
		<description></description>
		<content:encoded><![CDATA[无聊跟他聊会QQ，提到了 个人业务竞标 的一种商业模式

目前在国内市场木有见过，挺有意思的，可以朝这方向想想

诸如类似的网站有：<a href="http://www.zhubajie.com/">八戒网</a>， <a href="https://www.freelancer.com/">freelance</a>， anyvan ...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>210</wp:post_id>
		<wp:post_date>2015-04-02 18:54:22</wp:post_date>
		<wp:post_date_gmt>2015-04-02 18:54:22</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8e%e8%af%9a%e5%bc%ba%e7%9a%84%e5%88%9b%e4%b8%9a%e6%83%b3%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ideas"><![CDATA[Ideas]]></category>
		<category domain="post_tag" nicename="start-up"><![CDATA[start-up]]></category>
		<category domain="post_tag" nicename="%e5%88%9b%e4%b8%9a"><![CDATA[创业]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hacking Metasploitable #1: Introduction &amp; IRC Hack</title>
		<link>http://bochentheone.com/?p=214</link>
		<pubDate>Tue, 07 Apr 2015 04:41:32 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=214</guid>
		<description></description>
		<content:encoded><![CDATA[Hacking Metasploitable

UnrealIRCD IRC daemon backdoor

via <a href="http://www.hackavision.com/2012/11/hacking-metasploitable-1-introduction.html">Hack-A-Vision: Hacking Metasploitable #1: Introduction &amp; IRC Hack [Metasploit/Linux/Exploit/How-to]</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>214</wp:post_id>
		<wp:post_date>2015-04-07 04:41:32</wp:post_date>
		<wp:post_date_gmt>2015-04-07 04:41:32</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>hack-a-vision-hacking-metasploitable-1-introduction-irc-hack-metasploitlinuxexploithow-to</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="backdoor"><![CDATA[backdoor]]></category>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="hacking"><![CDATA[Hacking]]></category>
		<category domain="category" nicename="how-to"><![CDATA[How to]]></category>
		<category domain="post_tag" nicename="irc"><![CDATA[IRC]]></category>
		<category domain="post_tag" nicename="metasploitable"><![CDATA[metasploitable]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1428947834;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:155;}i:1;a:1:{s:2:"id";i:216;}i:2;a:1:{s:2:"id";i:102;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>也谈谈规范JS代码的几个注意点</title>
		<link>http://bochentheone.com/?p=216</link>
		<pubDate>Wed, 08 Apr 2015 00:49:50 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=216</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">关于一些写代码的规范</p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;"></p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;"><strong>for循环。</strong></p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">　　我们习惯将for循环写成如下形式：</p>

<pre class="">1 for (var i = 0; i &lt; myarray.length; i++) {
2     //logic
3 }</pre>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">　　看似没有问题，但是如果myarray是读取的DOM的节点，那么每一次循环都要去DOM里选取节点再做判断，非常影响性能。可能数量不大感觉不错来，多了就非常严重了。所以，for循环判断条件里尽量不要使用涉及到DOM操作的动作。优化如下：</p>

<pre class="">1 for (var i = 0, max = myarray.length; i &lt; max; i++) {
2     // logic
3 }</pre>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">     另外一个就是使用for-in循环对象的话会读取对象从原型链里的属性，如果这不是希望的，那么可以用一个判断hasOwnProperty(i)去掉它。<!--more--></p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;"><strong>用“===”取代“==”</strong></p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">　　前者是严格判断，后者会提前进行隐式的类型转换。</p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;"><strong>空格</strong></p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">　　任何“;”后空一格、for循环中初始化“,”后空一格、数组中","后空一格、对象中“:”后空一格、如：</p>

<pre class="">1 for (var i = 0, j = 1; i &lt; 10; i += 1){
2   var some = [1, 2, 3];
3   var obj = {aa: 1, bb: 2}
3 }</pre>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">　　函数参数里“,”后空一格、函数声明中花括号前空一格、函数表达式中括号前后各空一格，如：</p>

<pre class="">1 func(a, b, c){};
2 function func() {};
3 var func = function () {};</pre>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">　　所有的操作符前后都跟一个空格，如：</p>

<pre class="">1 var d = 0,
2     a = b + 1;
3 if (a &amp;&amp; b &amp;&amp; c) {
4     d = a % c;
5     a += d;
6 }</pre>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;"><strong>命名规则</strong></p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">　　构造器函数首字母大写,如：</p>

<div class="cnblogs_code">
<pre class="">function Person() {...}</pre>
</div>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">　　变量用驼峰式，如：</p>

<pre style="margin-top: 0px; margin-bottom: 0px; margin-left: 22px; white-space: pre-wrap; word-wrap: break-word; font-family: 'Courier New' !important;" class="">getFirstName()</pre>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">　　常量全用大写字母，如：</p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;"><span style="color: #0000ff; line-height: 1.5 !important;">      var</span> PI = 3.1415926;</p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">　　私有函数用下划线开头: _person();</p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;"><strong>写注释</strong></p>
<p style="margin: 10px auto; color: #000000; font-family: Verdana, 'Lucida Grande', Arial, Helvetica, sans-serif; font-size: 12px; line-height: 18px;">　　这一步非常关键，因为你写的代码别人不一定看得懂，你写的将来你也不一定轻易能看懂。所以良好的注释习惯可以事半功倍。</p>
via <a href="http://www.cnblogs.com/front-Thinking/p/4309825.html">也谈谈规范JS代码的几个注意点 - front-Thinking - 博客园</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date>2015-04-08 00:49:50</wp:post_date>
		<wp:post_date_gmt>2015-04-08 00:49:50</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e4%b9%9f%e8%b0%88%e8%b0%88%e8%a7%84%e8%8c%83js%e4%bb%a3%e7%a0%81%e7%9a%84%e5%87%a0%e4%b8%aa%e6%b3%a8%e6%84%8f%e7%82%b9-front-thinking-%e5%8d%9a%e5%ae%a2%e5%9b%ad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="coding"><![CDATA[coding]]></category>
		<category domain="post_tag" nicename="js"><![CDATA[js]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1428941130;s:7:"payload";a:1:{i:0;a:1:{s:2:"id";i:210;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>没有女主角的电影：《勇士》《哭泣的拳头》《激战》</title>
		<link>http://bochentheone.com/?p=225</link>
		<pubDate>Mon, 13 Apr 2015 04:05:59 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[给大家推荐的这三部拳击题材电影，都是本人非常非常喜欢的电影作品

每一部都有自己得特色和风格，真的很适合热血的观众，每次看完都有去健身房流流汗得冲动！哈哈哈哈~

所以说想健身却又不容易坚持的朋友，可以隔三差五的看看，也有让自己坚持下去的动力！<!--more-->

<strong>《勇士》-美国，2011， 豆瓣 8.9</strong>
<h6> 汤姆·哈迪 / 乔尔·埃哲顿 / 尼克·诺特 / 詹妮弗·莫里森 / 弗兰克·格里罗</h6>
<a href="http://bochentheone.com/wp-content/uploads/2015/04/MV5BMTk4ODk5MTMyNV5BMl5BanBnXkFtZTcwMDMyNTg0Ng@@._V1_SX214_AL_.jpg"><img class="alignnone  wp-image-226" src="http://bochentheone.com/wp-content/uploads/2015/04/MV5BMTk4ODk5MTMyNV5BMl5BanBnXkFtZTcwMDMyNTg0Ng@@._V1_SX214_AL_-195x300.jpg" alt="warrior" width="201" height="310" /></a>

个人很喜欢 汤姆·哈迪，他的粉丝！！这是一部突出家庭的电影，两位男主是兄弟，从小的父母离异不同得选择，因为不同的故事一同走上了拳击决赛的擂台。最后两个都是赢家，兄弟俩和好了，被夹在中间的父亲也得到了他们两的原谅，三个男人十多年的矛盾都化解了！Happy ending！

从格斗角度来说，因为是MMA格斗，观赏性十分高啊！各种技巧，没有限制的格斗也是拳拳到肉！很刺激，三部中我最喜欢的一部！超级燃的一部格斗电影！

<strong>《哭泣的拳头》韩国，2005，豆瓣 7.6</strong>
<h6>崔岷植 / 柳昇范 / 林元熙</h6>
<a href="http://bochentheone.com/wp-content/uploads/2015/04/cryingfist.jpg"><img class="alignnone  wp-image-227" src="http://bochentheone.com/wp-content/uploads/2015/04/cryingfist-209x300.jpg" alt="cryingfist" width="195" height="280" /></a>

&nbsp;

最近刚看的一部韩国电影！一个是年过40，落魄破产的奥运拳击银牌得主，老婆孩子离开了他，为了生活不得不放下尊严到街头给人当人肉沙包。一个刚过20，抢劫进了监狱，在监牢里他仍不改好斗的个性。随后爱他的父亲因为事故离去和奶奶的重病让他备受打击，拳击成了他生活中的唯一的慰。两个男人就这样相遇了~~

标准的拳击格斗，最后我感觉两个主角都是赢家，他们得奋斗努力赢回了家人，赢回了自己。个人觉得本片看点在于对双方的际遇描写，双线发展，几个场景的背景音乐很到位，到最后决赛，几个回合的长镜头也能看出演员有多拼命。

<strong>《激战》 中国， 2013</strong>
<h6>张家辉 / 彭于晏 / 李馨巧 / 梅婷 / 李菲儿 /</h6>
<a href="http://bochentheone.com/wp-content/uploads/2015/04/激战.jpg"><img class="alignnone  wp-image-228" src="http://bochentheone.com/wp-content/uploads/2015/04/激战-215x300.jpg" alt="激战" width="184" height="257" /></a>

典型得肌肉电影，帅哥，型男，MMA，肌肉。。。

本片跟 哭泣的拳头 的人设有点类似，一个是过气拳手，沉迷赌博，负债累累。一个是遭遇家庭变故，父亲生意失败，为了鼓励落魄的父亲重新开始生活，报名参加了MMA。两人成为了良师益友，为了比赛一起努力。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date>2015-04-13 04:05:59</wp:post_date>
		<wp:post_date_gmt>2015-04-13 04:05:59</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e6%b2%a1%e6%9c%89%e5%a5%b3%e4%b8%bb%e8%a7%92%e7%9a%84%e7%94%b5%e5%bd%b1%ef%bc%9a%e3%80%8a%e5%8b%87%e5%a3%ab%e3%80%8b%e3%80%8a%e5%93%ad%e6%b3%a3%e7%9a%84%e6%8b%b3%e5%a4%b4%e3%80%8b%e3%80%8a%e6%bf%80</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mma"><![CDATA[MMA]]></category>
		<category domain="category" nicename="movie%e7%94%b5%e5%bd%b1"><![CDATA[Movie]]></category>
		<category domain="post_tag" nicename="%e6%8b%b3%e5%87%bb"><![CDATA[拳击]]></category>
		<category domain="post_tag" nicename="%e6%a0%bc%e6%96%97"><![CDATA[格斗]]></category>
		<category domain="post_tag" nicename="%e7%94%b5%e5%bd%b1"><![CDATA[电影]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434215963;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:245;}i:1;a:1:{s:2:"id";i:216;}i:2;a:1:{s:2:"id";i:260;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Metasploit 101 with Meterpreter Payload</title>
		<link>http://bochentheone.com/?p=233</link>
		<pubDate>Mon, 13 Apr 2015 06:10:42 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=233</guid>
		<description></description>
		<content:encoded><![CDATA[The Metasploit framework is well known in the realm of exploit development. It is a standalone tool for security researchers, penetration testers and IDS/IPS developers. As of now, it has 640 exploit definitions and 215 payloads for injection — a huge database. This article focuses on advanced features of the Metasploit framework.

via <a href="http://www.opensourceforu.com/2011/02/metasploit-meterpreter-payload/">Metasploit 101 with Meterpreter Payload - Open Source For You</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>233</wp:post_id>
		<wp:post_date>2015-04-13 06:10:42</wp:post_date>
		<wp:post_date_gmt>2015-04-13 06:10:42</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>metasploit-101-with-meterpreter-payload-open-source-for-you</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-to"><![CDATA[How to]]></category>
		<category domain="post_tag" nicename="metasploit"><![CDATA[metasploit]]></category>
		<category domain="post_tag" nicename="payload"><![CDATA[payload]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1432316093;s:7:"payload";a:2:{i:0;a:1:{s:2:"id";i:235;}i:1;a:1:{s:2:"id";i:214;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How payloads work</title>
		<link>http://bochentheone.com/?p=235</link>
		<pubDate>Mon, 13 Apr 2015 06:35:12 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=235</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Payloads</strong> are defined in <em>modules/payloads/{singles</em>,<em>stages</em>,<em>stagers</em>}<em>/&lt;platform</em>&gt;.When the framework starts up, stages are combined with stagers to create a complete payload that you can use in exploits. Then, handlers are paired with payloads so the framework will know how to create sessions with a given communications mechanism.<!--more-->

via <em><a href="https://github.com/rapid7/metasploit-framework/wiki/How-payloads-work">How payloads work · rapid7/metasploit-framework Wiki</a>.</em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2015-04-13 06:35:12</wp:post_date>
		<wp:post_date_gmt>2015-04-13 06:35:12</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>how-payloads-work</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="how-to"><![CDATA[How to]]></category>
		<category domain="post_tag" nicename="metasploit"><![CDATA[metasploit]]></category>
		<category domain="post_tag" nicename="payload"><![CDATA[payload]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434540487;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:233;}i:1;a:1:{s:2:"id";i:214;}i:2;a:1:{s:2:"id";i:311;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>创业：相册整合定制</title>
		<link>http://bochentheone.com/?p=249</link>
		<pubDate>Fri, 17 Apr 2015 03:54:52 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=249</guid>
		<description></description>
		<content:encoded><![CDATA[为什么不试着把所有的个人在线照片都自动帮他们整合好，然后每年做成相簿寄给顾客呢

现在所有人都是把照片放在网络上，如iphoto，instagram, facebook,但是这些网络照片能存在多少，很多人都是拍了照片，上传仅此而已，不如帮他们整理好，然后做成相簿寄给users，应该会有市场把？]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date>2015-04-17 03:54:52</wp:post_date>
		<wp:post_date_gmt>2015-04-17 03:54:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%88%9b%e4%b8%9a%ef%bc%9a%e7%9b%b8%e5%86%8c%e6%95%b4%e5%90%88%e5%ae%9a%e5%88%b6</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ideas"><![CDATA[Ideas]]></category>
		<category domain="post_tag" nicename="%e5%88%9b%e4%b8%9a"><![CDATA[创业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1429286101;s:7:"payload";a:2:{i:0;a:1:{s:2:"id";i:210;}i:1;a:1:{s:2:"id";i:245;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>APP 创意</title>
		<link>http://bochentheone.com/?p=258</link>
		<pubDate>Mon, 04 May 2015 04:59:02 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=258</guid>
		<description></description>
		<content:encoded><![CDATA[天天看斗鱼主播，看到西瓜琳他们在求鱼丸

为什么不能想twitch的主播那样直接求paypal 捐款呢？

<strong>做一个APP 让主播在屏幕直接显示支付宝或者微信的捐钱</strong>

这样直接省掉鱼丸多好啊！而且可以给自己喜欢的直播投更多得钱

<hr />

6/01/15

想到一个APP，就是在自己亲密朋友圈中发送 类似 吃饭，上厕所 这样的提议

然后朋友互相回复一个同意，或者OK的答案

给予用户自己朋友小圈子一个快速回复提议的平台]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date>2015-05-04 04:59:02</wp:post_date>
		<wp:post_date_gmt>2015-05-04 04:59:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>app-%e5%88%9b%e6%84%8f</wp:post_name>
		<wp:status>private</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ideas"><![CDATA[Ideas]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>李开复：给热血创业青年的八桶冷水</title>
		<link>http://bochentheone.com/?p=245</link>
		<pubDate>Wed, 15 Apr 2015 15:14:54 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=245</guid>
		<description></description>
		<content:encoded><![CDATA[看看大牛对于年轻人的创业忠告，我想李开复还是很有资格给给我们一些忠言逆耳的，他的创新工程已经无数的热血青年创业成功了：<!--more-->

1）创业是艰苦的过程，尤其在今天台湾的环境。你不但要比就业加倍辛苦，自己不拿薪水，还要掏钱或借钱，四处碰壁，而且即便一切做的很好，最后失败的可能还是很大。今天在杂志封面受到追捧的创业者，完全可能几年后公司不再风光甚至倒闭（不信的话，不妨翻翻几年前的杂志）。真正做成伟大公司的概率可能是几万分之一。这方面，你真的想好了吗？

2）真正骨子里适合创业的人，是积极主动的，是不畏惧风险的，是有自信和自觉的，是会自己解答问题的。他们不会去请教演讲者、专家、业师。他们不会犹豫不定，担心父母的认可，女友的期望。所以，如果这些问题真的让你纠结，你很可能就缺少这种“创业基因”，或许根本就不适合创业。

3）除了基因之外，什么样的人适合创业？他们充满激情但也理性，热爱产品和用户。他们以身作则 ，善于学习，工作勤奋，全力以赴。他们聪明，但是愿意专注。他们是产品和服务的最好的质检员和改进者，关注的同时不断去创新。他们不畏惧风险。你是这样的人吗？

4）想创业最好的学习方式就是加入一个有经验的创办人办的中小公司。没有讲座、课堂可以教你真正的创业。最好的学习方式就是 learning by doing。该参加什么样的创业公司呢？最好有值得学习的创办人，业界被认可的产品，优质的投资人，而且越小越好！加入后，你可以从中学习它的运营和文化。在一家小公司，比较少官僚政治，步伐特别快，而且你有可能参与学习实践各个不同部门的工作，不会成为某个小部门的螺丝钉。这是创业最好的培训班。应届毕业生可以把这类工作当做选择，在校学生可以考虑这样的公司实习，哪怕无偿也值得。

5）为什么年轻人都认为自己面临两极化的选择：应聘大公司，或者自己创业？为什么不考虑加入已存在的创业公司？每个中小企业如果平均有两个创办人，十个员工，为什么你会认为你的第一次就要做创办人，而不是员工？（你去申请三星鸿海的时候，会期望一加入就能管十个人的部门吗？）

6）全世界没有一个创业家是靠空想而成功的。点子一点都不值钱。你的点子如果只是拍脑袋想出来的，那几乎一定是没价值的。就算你的点子很好有价值，我保证世界上有一大批人有同样的好点子。你们谁会胜出就要看谁能够满足市场需求，快速执行。而要做到这点，需要强大互补的团队，多方面的经验和能力，当然还有巨大的资金（和你融资的能力）。除了点子，你能做到这些吗？

7）你如果有了点子，你的下一步不是去融资找钱（没有一个优质的投资人会投资一个仅有点子的初次创业者）。你需要自己掏腰包或者借钱来验证你的点子。从最小的地方开始，用最直接、低科技的方式去验证市场。比如说你想做个明星粉丝网路平台，靠它来卖明星的纪念品，那你最好先到某个明星的演唱会，先去卖卖纪念品，然后如果有市场，再慢慢滚动。拿到投资前，你不但需要验证市场，也要产生盈利来养活团队，或者自己垫钱借钱，还要让员工觉得未来充满希望！（了解创业的艰苦了吧？）

8）创业活动对年轻人是值得适度参与的，可以听到很多过来人分享经验。但是有些年轻朋友们听了很多分享会、读了许多书和文章，形成了一种「逢会必到」的风气，反而掉入了「纸上谈兵」的陷阱。如果没有真的跳下去参与或主导创业，只听分享根本没办法真正了解创业者的世界。

via <a href="http://tech.sina.com.cn/i/2015-04-15/doc-ichmifpy8280566.shtml">李开复：给热血创业青年的八桶冷水</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date>2015-04-15 15:14:54</wp:post_date>
		<wp:post_date_gmt>2015-04-15 15:14:54</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e6%9d%8e%e5%bc%80%e5%a4%8d%ef%bc%9a%e7%bb%99%e7%83%ad%e8%a1%80%e5%88%9b%e4%b8%9a%e9%9d%92%e5%b9%b4%e7%9a%84%e5%85%ab%e6%a1%b6%e5%86%b7%e6%b0%b4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="weibo"><![CDATA[Weibo]]></category>
		<category domain="post_tag" nicename="%e5%88%9b%e4%b8%9a"><![CDATA[创业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434542875;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:225;}i:1;a:1:{s:2:"id";i:216;}i:2;a:1:{s:2:"id";i:210;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data Visualization - Housing Pricing Infovis</title>
		<link>http://bochentheone.com/?p=251</link>
		<pubDate>Thu, 23 Apr 2015 22:56:22 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[This is a team project by using data visualization technique to represent 2000 - 2010 housing price, programming languages are HTML, JAVASCRIPT, CSS, D3 and etc...<!--more-->

https://www.youtube.com/watch?v=V1kiyOkquFA

<em>Team Name:</em> BlueFly

<em>Team Members:</em> Bo Chen, Yiqi Chen, Cheng Ding, Yian Zhu

<em>Project Description: </em>The project is intended to tell people how was the housing price changed from 2001 to 2010, and how the major events would affect the housing market. By using the heat map, animation and line chart visualization techniques for presenting the information to people. People are being able interacting with our project to find the specific state average housing price on specific time.

<em>Data Source and Format: </em>The Data Source is found on the official government website and is in an excel sheet format. The download link is here: <a href="http://www.fhfa.gov/DataTools/Downloads/Documents/HPI/state_statistics_for_download.xls">http://www.fhfa.gov/DataTools/Downloads/Documents/HPI/state_statistics_for_download.xls</a>

&nbsp;

Click <em><a href="http://www.bochentheone.com/InfoVis/index.html"><strong>InfoVis Housing Price</strong> </a></em>to see our team project.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2015-04-23 22:56:22</wp:post_date>
		<wp:post_date_gmt>2015-04-23 22:56:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cs4460-data-visualization-project-housing-pricing-infovis</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="data-visualiztion"><![CDATA[Data Visualiztion]]></category>
		<category domain="post_format" nicename="post-format-video"><![CDATA[Video]]></category>
		<category domain="category" nicename="programming-project"><![CDATA[Programming Project]]></category>
		<wp:postmeta>
			<wp:meta_key>_oembed_time_1265ceed43a81fef3a8ec67dc8f2f870</wp:meta_key>
			<wp:meta_value><![CDATA[1434344705]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1265ceed43a81fef3a8ec67dc8f2f870</wp:meta_key>
			<wp:meta_value><![CDATA[<iframe width="1000" height="563" src="https://www.youtube.com/embed/V1kiyOkquFA?feature=oembed" frameborder="0" allowfullscreen></iframe>]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434559634;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:317;}i:1;a:1:{s:2:"id";i:349;}i:2;a:1:{s:2:"id";i:391;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Flask、Django、Pyramid三个框架的对比 - Python</title>
		<link>http://bochentheone.com/?p=260</link>
		<pubDate>Mon, 11 May 2015 18:30:14 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=260</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>Flask是一个微框架，主要面向需求简单的小应用。Pyramid和Django都是面向大的应用，但是在扩展性和灵活性上走了不同的路。Pyramid关注灵活性，让开发者选择合适的工具来开发项目。这意味着开发者可以选择数据库，URL结构，模板风格等等。<!--more-->Django的目标是提供web应用开发的一站式解决方案，所以相应的模块也就比较多。Django包含了一个ORM模块，而Pyramid和Flask是让开发者来选择如何存储数据。针对非Django框架的最流行的ORM目前是SQLAlchemy，也有很多其他的选择，比如DynamoDB和MongoDB，亦或是像LevelDB和SQLite这样的简单本地持久化。Pyramid被设计可以使用任何持久层，甚至是还没做好的。</blockquote>
&nbsp;

Source: <em><a href="http://python.jobbole.com/81396/">Flask、Django、Pyramid三个框架的对比 - Python - 伯乐在线</a></em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date>2015-05-11 18:30:14</wp:post_date>
		<wp:post_date_gmt>2015-05-11 18:30:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>flask%e3%80%81django%e3%80%81pyramid%e4%b8%89%e4%b8%aa%e6%a1%86%e6%9e%b6%e7%9a%84%e5%af%b9%e6%af%94-python</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434547033;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:245;}i:1;a:1:{s:2:"id";i:225;}i:2;a:1:{s:2:"id";i:382;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Unity3D Error Handling</title>
		<link>http://bochentheone.com/?p=271</link>
		<pubDate>Fri, 15 May 2015 16:43:30 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=271</guid>
		<description></description>
		<content:encoded><![CDATA[Q: 'XX' AnimationEvent 'NewEvent' has no receiver! Are you missing a component?

A: Go check the model in the asset, and looking for an animation event called 'New Event' in the event area, and delete it.

<hr />

Q: AnimationEvent has no function name specified!

A: Answer can be find <em><a href="http://answers.unity3d.com/questions/582229/animationevent-has-no-function-name-specified-1.html">here</a>, </em>because there is some animation event not be named in your animation clip]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date>2015-05-15 16:43:30</wp:post_date>
		<wp:post_date_gmt>2015-05-15 16:43:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unity3d-error-handling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="error"><![CDATA[error]]></category>
		<category domain="post_tag" nicename="unity"><![CDATA[Unity]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435633370;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:251;}i:1;a:1:{s:2:"id";i:410;}i:2;a:1:{s:2:"id";i:141;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>苹果、微软、Google的优点和弱点是什么</title>
		<link>http://bochentheone.com/?p=288</link>
		<pubDate>Tue, 26 May 2015 14:53:55 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=288</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
<h2>Difference between Apple, Microsoft and Google</h2>
</blockquote>
<p class=""><!--more--><a href="http://bochentheone.com/wp-content/uploads/2015/05/IMG_3008.jpg"><img src="http://bochentheone.com/wp-content/uploads/2015/05/IMG_3008.jpg" alt="" /></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date>2015-05-26 14:53:55</wp:post_date>
		<wp:post_date_gmt>2015-05-26 14:53:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%8b%b9%e6%9e%9c%e3%80%81%e5%be%ae%e8%bd%af%e3%80%81google%e7%9a%84%e4%bc%98%e7%82%b9%e5%92%8c%e5%bc%b1%e7%82%b9%e6%98%af%e4%bb%80%e4%b9%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434545844;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:260;}i:1;a:1:{s:2:"id";i:245;}i:2;a:1:{s:2:"id";i:225;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Building a Simple REST API for Mobile Applications</title>
		<link>http://bochentheone.com/?p=301</link>
		<pubDate>Sun, 07 Jun 2015 05:45:51 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=301</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>Building a Simple REST API for Mobile Applications</blockquote>
Source: <em><a href="http://www.sitepoint.com/building-simple-rest-api-mobile-applications/">Building a Simple REST API for Mobile Applications</a></em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date>2015-06-07 05:45:51</wp:post_date>
		<wp:post_date_gmt>2015-06-07 05:45:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>building-a-simple-rest-api-for-mobile-applications</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-to"><![CDATA[How to]]></category>
		<category domain="post_tag" nicename="rest-api"><![CDATA[REST API]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434551860;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:197;}i:1;a:1:{s:2:"id";i:311;}i:2;a:1:{s:2:"id";i:338;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What are the best programming fonts? </title>
		<link>http://bochentheone.com/?p=317</link>
		<pubDate>Tue, 09 Jun 2015 04:10:14 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=317</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>What are the best programming fonts?</blockquote><p>Source: <em><a href="http://www.slant.co/topics/67/~what-are-the-best-programming-fonts">What are the best programming fonts? - Slant</a></em></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date>2015-06-09 04:10:14</wp:post_date>
		<wp:post_date_gmt>2015-06-09 04:10:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-are-the-best-programming-fonts</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="font"><![CDATA[font]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435846040;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:410;}i:1;a:1:{s:2:"id";i:426;}i:2;a:1:{s:2:"id";i:251;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Keep Practicing My HTML, JS &amp; CSS</title>
		<link>http://bochentheone.com/?p=338</link>
		<pubDate>Sat, 13 Jun 2015 05:48:52 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=338</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Learning to create a 2048 by myself, already knew it was a pretty simple game, but didn't expect that easy! Start to wonder, what makes it so popular...</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>338</wp:post_id>
		<wp:post_date>2015-06-13 05:48:52</wp:post_date>
		<wp:post_date_gmt>2015-06-13 05:48:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>keep-practicing-my-html-js-css</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="weibo"><![CDATA[Weibo]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Differences between wait, sleep in Java?</title>
		<link>http://bochentheone.com/?p=347</link>
		<pubDate>Sat, 13 Jun 2015 15:20:58 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=347</guid>
		<description></description>
		<content:encoded><![CDATA[Wait release lock, Sleep keep it

<!--more-->
<blockquote>Here is list of differences between wait and sleep in Java:

1) Wait is called from synchronized context only while sleep can be called without synchronized block.

2) wait is called on Object while sleep is called on Thread.

3) waiting thread can be awake by calling notify and notify. All while sleeping thread can not be awaken by calling notify method.

4) wait is normally done on condition, Thread wait until a condition is true while sleep is just to put your thread on sleep.

5) wait release lock on object while waiting while sleep doesn’t release lock while waiting.</blockquote>
Source: <a href="http://javarevisited.blogspot.com/2011/12/difference-between-wait-sleep-yield.html#ixzz3cxJbz3XD">Javarevisited</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2015-06-13 15:20:58</wp:post_date>
		<wp:post_date_gmt>2015-06-13 15:20:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>differences-between-wait-sleep-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435511685;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:365;}i:1;a:1:{s:2:"id";i:379;}i:2;a:1:{s:2:"id";i:358;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>When to use abstract class and interface in Java?</title>
		<link>http://bochentheone.com/?p=349</link>
		<pubDate>Sat, 13 Jun 2015 15:27:28 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=349</guid>
		<description></description>
		<content:encoded><![CDATA[Use interface for type declaration, use abstract class if evolution is concern

<!--more-->
<blockquote>1) Interface in Java can only contains declaration. You can not declare any concrete methods inside interface. On the other hand abstract class may contain both abstract and concrete methods, which makes abstract class an ideal place to provide common or default functionality. I suggest reading my post <a href="http://javarevisited.blogspot.com/2012/04/10-points-on-interface-in-java-with.html">10 things to know about interface in Java</a> to know more about interfaces, particularly in Java programming language.

2) Java interface can extend multiple interface also Java class can implement multiple interfaces, Which means interface can provide more Polymorphism support than abstract class . By extending abstract class, a class can only participate in one Type hierarchy but by using interface it can be part of multiple type hierarchies. E.g. a class can be Runnable and Displayable at same time. One example I can remember of this is writing GUI application in J2ME, where  class extends Canvas and implements CommandListener to provide both graphic and event-handling functionality..

3) In order to implement interface in Java, until your class is abstract, you need to provide implementation of all methods, which is very painful. On the other hand abstract class may help you in this case by providing default implementation. Because of this reason, I prefer to have minimum methods in interface, starting from just one, I don't like idea of <a href="http://javarevisited.blogspot.com/2012/01/what-is-marker-interfaces-in-java-and.html">marker interface</a>, once annotation is introduced in Java 5. If you look JDK or any framework like Spring, which I does to understand OOPS and design patter better, you will find that most of interface contains only one or two methods e.g. Runnable, Callable, ActionListener etc.

Source: <a href="http://javarevisited.blogspot.sg/2013/05/difference-between-abstract-class-vs-interface-java-when-prefer-over-design-oops.html">Javarevisted</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date>2015-06-13 15:27:28</wp:post_date>
		<wp:post_date_gmt>2015-06-13 15:27:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>when-to-use-abstract-class-and-interface-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435185304;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:426;}i:1;a:1:{s:2:"id";i:391;}i:2;a:1:{s:2:"id";i:431;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[bo]]></wp:comment_author>
			<wp:comment_author_email>bochentheone@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.99.66.73</wp:comment_author_IP>
			<wp:comment_date>2015-06-14 08:14:26</wp:comment_date>
			<wp:comment_date_gmt>2015-06-14 08:14:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[hello]]></wp:comment_content>
			<wp:comment_approved>trash</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1434482715.0594299;s:5:"event";s:14:"cron-retry-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1434269666.4484179;s:5:"event";s:11:"check-error";s:4:"meta";a:1:{s:8:"response";s:7:"invalid";}}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1434269707.5288911;s:5:"event";s:12:"status-trash";s:4:"user";s:24:"bochentheone@hotmail.com";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
				<wp:meta_value><![CDATA[0]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
				<wp:meta_value><![CDATA[1434269707]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Difference between Hashtable and HashMap in Java?</title>
		<link>http://bochentheone.com/?p=358</link>
		<pubDate>Sun, 14 Jun 2015 15:12:13 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">/?p=358</guid>
		<description></description>
		<content:encoded><![CDATA[Hashtable is thread-safe and doesn't allow null, HashMap is not thread-safe. Hashtable is also slow because of whole locking of Map, while HashMap is fast because of no locking.

<!--more-->
<blockquote>
<div>1.The HashMap class is roughly equivalent to Hashtable, except that it is non synchronized and permits nulls. (HashMap allows null values as key and value whereas <a href="http://javarevisited.blogspot.sg/2012/01/java-hashtable-example-tutorial-code.html">Hashtable</a> doesn't allow nulls).</div>
<div></div>
<div>2. One of the major <b>differences between HashMap and Hashtable</b> is that HashMap is non synchronized whereas Hashtable is synchronized, which means Hashtable is thread-safe and can be shared between multiple threads but HashMap can not be shared between multiple threads without proper synchronization. Java 5 introduces <a href="http://javarevisited.blogspot.sg/2011/04/difference-between-concurrenthashmap.html">ConcurrentHashMap</a> which is an alternative of Hashtable and provides better scalability than Hashtable in Java.</div>
<div></div>
<div>3. Another significant difference between HashMap vs Hashtable is that Iterator in the HashMap is  a fail-fast iterator  while the enumerator for the Hashtable is not and throw Concurrent Modification Exception if any other Thread modifies the map structurally  by adding or removing any element except Iterator's own remove() method. But this is not a guaranteed behavior and will be done by JVM on best effort. This is also an important <a href="http://javarevisited.blogspot.sg/2010/10/what-is-difference-between-enumeration.html">difference between Enumeration and Iterator in Java</a>.</div>
<div></div>
<div>4. One more notable <i>difference between Hashtable and </i><i>HashMap</i> is that because of thread-safety and synchronization Hashtable is much slower than HashMap if used in Single threaded environment. So if you don't need synchronization and HashMap is only used by one thread, it out perform Hashtable in Java</div>
<div></div>
<div>5. HashMap does not guarantee that the order of the map will remain constant over time.</div>
<div></div>
Source: <em><a href="http://javarevisited.blogspot.com/2014/02/top-30-java-phone-interview-questions.html">Top 30 Java Phone Interview Questions Answers for Freshers, 1 to 2 Years Experienced</a></em>

<a href="http://javarevisited.blogspot.sg/2010/10/difference-between-hashmap-and.html">What is difference between HashMap and Hashtable in Java?</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>358</wp:post_id>
		<wp:post_date>2015-06-14 15:12:13</wp:post_date>
		<wp:post_date_gmt>2015-06-14 15:12:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>difference-between-hashtable-and-hashmap-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hashmap"><![CDATA[Hashmap]]></category>
		<category domain="post_tag" nicename="hashtable"><![CDATA[Hashtable]]></category>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435190619;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:417;}i:1;a:1:{s:2:"id";i:347;}i:2;a:1:{s:2:"id";i:379;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How does &quot;synchronization&quot; works?</title>
		<link>http://bochentheone.com/?p=365</link>
		<pubDate>Sun, 14 Jun 2015 15:52:09 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">/?p=365</guid>
		<description></description>
		<content:encoded><![CDATA[Synchronization works with "Locks", every java objects has a built-in lock that only comes into play when the object has synchronized method code. When we enter synchronized method, we automatically acquire the lock associated with the current instance of the class whose code we are executing.

<!--more-->

Acquiring a lock for an object is also known as getting the lock or locking the object, synchronizing on the object.

Since there is only one lock per object, if one thread has picked up the lock, no other thread can pick up the lock until the first thread releases or returns the lock. This means no other thread can enter the synchronized code until the lock has been released.

Typically, releasing a lock means the thread holding the lock, in other words, the thread currently in the synchronized method exits the synchronized method. At that point, the lock is free until some other thread enters a synchronized method on that object.

Source: <a href="https://www.youtube.com/watch?v=hXR_1_T6dtU">Java thread how does synchronization works</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>365</wp:post_id>
		<wp:post_date>2015-06-14 15:52:09</wp:post_date>
		<wp:post_date_gmt>2015-06-14 15:52:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>how-does-synchronization-works</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<category domain="post_tag" nicename="synchronization"><![CDATA[synchronization]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435843721;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:347;}i:1;a:1:{s:2:"id";i:358;}i:2;a:1:{s:2:"id";i:450;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Print &quot;Hello&quot; 10 times by using any coding language?</title>
		<link>http://bochentheone.com/?p=372</link>
		<pubDate>Mon, 15 Jun 2015 02:17:55 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">/?p=372</guid>
		<description></description>
		<content:encoded><![CDATA[print “ Hello Hello Hello Hello Hello Hello Hello Hello Hello Hello ”;

In <strong>Ruby:</strong> "Hello" * 10;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>372</wp:post_id>
		<wp:post_date>2015-06-15 02:17:55</wp:post_date>
		<wp:post_date_gmt>2015-06-15 02:17:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>print-hello-10-times-by-using-any-coding-language</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="weibo"><![CDATA[Weibo]]></category>
		<category domain="category" nicename="%e4%b8%aa%e4%ba%ba%e5%b0%8f%e8%ae%b0"><![CDATA[个人小记]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Difference between StringBuffer and StringBuilder in Java?</title>
		<link>http://bochentheone.com/?p=379</link>
		<pubDate>Mon, 15 Jun 2015 05:13:14 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">/?p=379</guid>
		<description></description>
		<content:encoded><![CDATA[StringBuffer is synchronized and slow

StringBuilder is not synchronized and fast<!--more-->
<blockquote>
<div>1) String is immutable while <b>StringBuffer and StringBuilder is mutable</b> object.</div>
<div>2) <b>StringBuffer is <a href="http://www.blogger.com/goog_1642539054">synchronized</a></b> while <b>StringBuilder is not</b> which makes StringBuilder faster than StringBuffer.</div>
<div>3) Concatenation operator "+" is internal implemented using either StringBuffer or StringBuilder.</div>
<div>4) Use String if you require <a href="http://javarevisited.blogspot.sg/2010/10/why-string-is-immutable-in-java.html">immutability</a>, use Stringbuffer in java if you need mutable + <a href="http://javarevisited.blogspot.sg/2012/01/how-to-write-thread-safe-code-in-java.html">thread-safety</a> and use StringBuilder in Java if you require mutable + without thread-safety.</div>
Source: <a href="http://javarevisited.blogspot.com/2011/07/string-vs-stringbuffer-vs-stringbuilder.html#ixzz3d6Y3ilGT">Different StringBuffer and StringBuilder</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>379</wp:post_id>
		<wp:post_date>2015-06-15 05:13:14</wp:post_date>
		<wp:post_date_gmt>2015-06-15 05:13:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>difference-between-stringbuffer-and-stringbuilder-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<category domain="post_tag" nicename="stringbuffer"><![CDATA[stringbuffer]]></category>
		<category domain="post_tag" nicename="stringbuilder"><![CDATA[stringbuilder]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434518228;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:358;}i:1;a:1:{s:2:"id";i:347;}i:2;a:1:{s:2:"id";i:391;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git常用命令备忘</title>
		<link>http://bochentheone.com/?p=382</link>
		<pubDate>Tue, 16 Jun 2015 03:00:10 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">/?p=382</guid>
		<description></description>
		<content:encoded><![CDATA[<h2></h2>
<h2><strong>Git配置</strong></h2>
<blockquote>
<pre class="prettyprint"><code><span class="pln">git config </span><span class="pun">--</span><span class="kwd">global</span><span class="pln"> user</span><span class="pun">.</span><span class="pln">name </span><span class="str">"robbin"</span><span class="pln">   
git config </span><span class="pun">--</span><span class="kwd">global</span><span class="pln"> user</span><span class="pun">.</span><span class="pln">email </span><span class="str">"fankai@gmail.com"</span><span class="pln">
git config </span><span class="pun">--</span><span class="kwd">global</span><span class="pln"> color</span><span class="pun">.</span><span class="pln">ui </span><span class="kwd">true</span><span class="pln">
git config </span><span class="pun">--</span><span class="kwd">global</span> <span class="kwd">alias</span><span class="pun">.</span><span class="pln">co checkout
git config </span><span class="pun">--</span><span class="kwd">global</span> <span class="kwd">alias</span><span class="pun">.</span><span class="pln">ci commit
git config </span><span class="pun">--</span><span class="kwd">global</span> <span class="kwd">alias</span><span class="pun">.</span><span class="pln">st status
git config </span><span class="pun">--</span><span class="kwd">global</span> <span class="kwd">alias</span><span class="pun">.</span><span class="pln">br branch
git config </span><span class="pun">--</span><span class="kwd">global</span><span class="pln"> core</span><span class="pun">.</span><span class="pln">editor </span><span class="str">"mate -w"</span>    <span class="com"># 设置Editor使用textmate</span><span class="pln">
git config </span><span class="pun">-</span><span class="pln">l  </span><span class="com"># 列举所有配置</span></code></pre>
用户的git配置文件<code>~/.gitconfig</code></blockquote>
<h2><!--more--></h2>
<h2></h2>
<blockquote>
<h2><strong>Git常用命令</strong></h2>
<strong>查看、添加、提交、删除、找回，重置修改文件</strong>
<pre class="prettyprint"><code><span class="pln">git help </span><span class="str">&lt;command&gt;</span>  <span class="com"># 显示command的help</span><span class="pln">
git show            </span><span class="com"># 显示某次提交的内容</span><span class="pln">
git show $id

git co  </span><span class="pun">--</span> <span class="str">&lt;file&gt;</span>   <span class="com"># 抛弃工作区修改</span><span class="pln">
git co  </span><span class="pun">.</span>           <span class="com"># 抛弃工作区修改</span><span class="pln">

git add </span><span class="str">&lt;file&gt;</span>      <span class="com"># 将工作文件修改提交到本地暂存区</span><span class="pln">
git add </span><span class="pun">.</span>           <span class="com"># 将所有修改过的工作文件提交暂存区</span><span class="pln">

git rm </span><span class="str">&lt;file&gt;</span>       <span class="com"># 从版本库中删除文件</span><span class="pln">
git rm </span><span class="str">&lt;file&gt;</span> <span class="pun">--</span><span class="pln">cached  </span><span class="com"># 从版本库中删除文件，但不删除文件</span><span class="pln">

git reset </span><span class="str">&lt;file&gt;</span>    <span class="com"># 从暂存区恢复到工作文件</span><span class="pln">
git reset </span><span class="pun">--</span> <span class="pun">.</span>      <span class="com"># 从暂存区恢复到工作文件</span><span class="pln">
git reset </span><span class="pun">--</span><span class="pln">hard    </span><span class="com"># 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><span class="pln">

git ci </span><span class="str">&lt;file&gt;</span><span class="pln">
git ci </span><span class="pun">.</span><span class="pln">
git ci </span><span class="pun">-</span><span class="pln">a           </span><span class="com"># 将git add, git rm和git ci等操作都合并在一起做</span><span class="pln">
git ci </span><span class="pun">-</span><span class="pln">am </span><span class="str">"some comments"</span><span class="pln">
git ci </span><span class="pun">--</span><span class="pln">amend      </span><span class="com"># 修改最后一次提交记录</span><span class="pln">

git revert </span><span class="pun">&lt;</span><span class="pln">$id</span><span class="pun">&gt;</span>    <span class="com"># 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</span><span class="pln">
git revert HEAD     </span><span class="com"># 恢复最后一次提交的状态</span></code></pre>
<strong>查看文件diff</strong>
<pre class="prettyprint"><code><span class="pln">git diff </span><span class="str">&lt;file&gt;</span>     <span class="com"># 比较当前文件和暂存区文件差异</span><span class="pln">
git diff
git diff </span><span class="pun">&lt;</span><span class="pln">$id1</span><span class="pun">&gt;</span> <span class="pun">&lt;</span><span class="pln">$id2</span><span class="pun">&gt;</span>   <span class="com"># 比较两次提交之间的差异</span><span class="pln">
git diff </span><span class="str">&lt;branch1&gt;</span><span class="pun">..&lt;</span><span class="pln">branch2</span><span class="pun">&gt;</span> <span class="com"># 在两个分支之间比较 </span><span class="pln">
git diff </span><span class="pun">--</span><span class="pln">staged   </span><span class="com"># 比较暂存区和版本库差异</span><span class="pln">
git diff </span><span class="pun">--</span><span class="pln">cached   </span><span class="com"># 比较暂存区和版本库差异</span><span class="pln">
git diff </span><span class="pun">--</span><span class="pln">stat     </span><span class="com"># 仅仅比较统计信息</span></code></pre>
<strong>查看提交记录</strong>
<pre class="prettyprint"><code><span class="pln">git log
git log </span><span class="str">&lt;file&gt;</span>      <span class="com"># 查看该文件每次提交记录</span><span class="pln">
git log </span><span class="pun">-</span><span class="pln">p </span><span class="str">&lt;file&gt;</span>   <span class="com"># 查看每次详细修改内容的diff</span><span class="pln">
git log </span><span class="pun">-</span><span class="pln">p </span><span class="pun">-</span><span class="lit">2</span>       <span class="com"># 查看最近两次详细修改内容的diff</span><span class="pln">
git log </span><span class="pun">--</span><span class="pln">stat      </span><span class="com"># 查看提交统计信息</span></code></pre>
<strong>tig</strong>

Mac上可以使用<code>tig</code>代替<code>diff</code>和<code>log</code>，<code>brew install tig</code>
<h2><strong>Git 本地分支管理</strong></h2>
<strong>查看、切换、创建和删除分支</strong>
<pre class="prettyprint"><code><span class="pln">git br </span><span class="pun">-</span><span class="pln">r           </span><span class="com"># 查看远程分支</span><span class="pln">
git br </span><span class="str">&lt;new_branch&gt;</span> <span class="com"># 创建新的分支</span><span class="pln">
git br </span><span class="pun">-</span><span class="pln">v           </span><span class="com"># 查看各个分支最后提交信息</span><span class="pln">
git br </span><span class="pun">--</span><span class="pln">merged     </span><span class="com"># 查看已经被合并到当前分支的分支</span><span class="pln">
git br </span><span class="pun">--</span><span class="kwd">no</span><span class="pun">-</span><span class="pln">merged  </span><span class="com"># 查看尚未被合并到当前分支的分支</span><span class="pln">

git co </span><span class="str">&lt;branch&gt;</span>     <span class="com"># 切换到某个分支</span><span class="pln">
git co </span><span class="pun">-</span><span class="pln">b </span><span class="str">&lt;new_branch&gt;</span> <span class="com"># 创建新的分支，并且切换过去</span><span class="pln">
git co </span><span class="pun">-</span><span class="pln">b </span><span class="str">&lt;new_branch&gt;</span> <span class="str">&lt;branch&gt;</span>  <span class="com"># 基于branch创建新的new_branch</span><span class="pln">

git co $id          </span><span class="com"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><span class="pln">
git co $id </span><span class="pun">-</span><span class="pln">b </span><span class="str">&lt;new_branch&gt;</span>  <span class="com"># 把某次历史提交记录checkout出来，创建成一个分支</span><span class="pln">

git br </span><span class="pun">-</span><span class="pln">d </span><span class="str">&lt;branch&gt;</span>  <span class="com"># 删除某个分支</span><span class="pln">
git br </span><span class="pun">-</span><span class="pln">D </span><span class="str">&lt;branch&gt;</span>  <span class="com"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span></code></pre>
<strong>分支合并和rebase</strong>
<pre class="prettyprint"><code><span class="pln">git merge </span><span class="str">&lt;branch&gt;</span>               <span class="com"># 将branch分支合并到当前分支</span><span class="pln">
git merge origin</span><span class="pun">/</span><span class="pln">master </span><span class="pun">--</span><span class="kwd">no</span><span class="pun">-</span><span class="pln">ff  </span><span class="com"># 不要Fast-Foward合并，这样可以生成merge提交</span><span class="pln">

git rebase master </span><span class="str">&lt;branch&gt;</span>       <span class="com"># 将master rebase到branch，相当于：</span><span class="pln">
git co </span><span class="str">&lt;branch&gt;</span> <span class="pun">&amp;&amp;</span><span class="pln"> git rebase master </span><span class="pun">&amp;&amp;</span><span class="pln"> git co master </span><span class="pun">&amp;&amp;</span><span class="pln"> git merge </span><span class="str">&lt;branch&gt;</span></code></pre>
<h2><strong>Git补丁管理(方便在多台机器上开发同步时用)</strong></h2>
<pre class="prettyprint"><code><span class="pln">git diff </span><span class="pun">&gt;</span> <span class="pun">../</span><span class="pln">sync</span><span class="pun">.</span><span class="pln">patch         </span><span class="com"># 生成补丁</span><span class="pln">
git apply </span><span class="pun">../</span><span class="pln">sync</span><span class="pun">.</span><span class="pln">patch          </span><span class="com"># 打补丁</span><span class="pln">
git apply </span><span class="pun">--</span><span class="pln">check </span><span class="pun">../</span><span class="pln">sync</span><span class="pun">.</span><span class="pln">patch  </span><span class="com"># 测试补丁能否成功</span></code></pre>
<h2><strong>Git暂存管理</strong></h2>
<pre class="prettyprint"><code><span class="pln">git stash                        </span><span class="com"># 暂存</span><span class="pln">
git stash list                   </span><span class="com"># 列所有stash</span><span class="pln">
git stash apply                  </span><span class="com"># 恢复暂存的内容</span><span class="pln">
git stash drop                   </span><span class="com"># 删除暂存区</span></code></pre>
<h2><strong>Git远程分支管理</strong></h2>
<pre class="prettyprint"><code><span class="pln">git pull                         </span><span class="com"># 抓取远程仓库所有分支更新并合并到本地</span><span class="pln">
git pull </span><span class="pun">--</span><span class="kwd">no</span><span class="pun">-</span><span class="pln">ff                 </span><span class="com"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><span class="pln">
git fetch origin                 </span><span class="com"># 抓取远程仓库更新</span><span class="pln">
git merge origin</span><span class="pun">/</span><span class="pln">master          </span><span class="com"># 将远程主分支合并到本地当前分支</span><span class="pln">
git co </span><span class="pun">--</span><span class="pln">track origin</span><span class="pun">/</span><span class="pln">branch     </span><span class="com"># 跟踪某个远程分支创建相应的本地分支</span><span class="pln">
git co </span><span class="pun">-</span><span class="pln">b </span><span class="str">&lt;local_branch&gt;</span><span class="pln"> origin</span><span class="pun">/&lt;</span><span class="pln">remote_branch</span><span class="pun">&gt;</span>  <span class="com"># 基于远程分支创建本地分支，功能同上</span><span class="pln">

git push                         </span><span class="com"># push所有分支</span><span class="pln">
git push origin master           </span><span class="com"># 将本地主分支推到远程主分支</span><span class="pln">
git push </span><span class="pun">-</span><span class="pln">u origin master        </span><span class="com"># 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><span class="pln">
git push origin </span><span class="str">&lt;local_branch&gt;</span>   <span class="com"># 创建远程分支， origin是远程仓库名</span><span class="pln">
git push origin </span><span class="str">&lt;local_branch&gt;</span><span class="pun">:&lt;</span><span class="pln">remote_branch</span><span class="pun">&gt;</span>  <span class="com"># 创建远程分支</span><span class="pln">
git push origin </span><span class="pun">:&lt;</span><span class="pln">remote_branch</span><span class="pun">&gt;</span>  <span class="com">#先删除本地分支(git br -d )，然后再push删除远程分支</span></code></pre>
<h2><strong>Git远程仓库管理</strong></h2>
<pre class="prettyprint"><code><span class="pln">git remote </span><span class="pun">-</span><span class="pln">v                    </span><span class="com"># 查看远程服务器地址和仓库名称</span><span class="pln">
git remote show origin           </span><span class="com"># 查看远程服务器仓库状态</span><span class="pln">
git remote add origin git@github</span><span class="pun">:</span><span class="pln">robbin</span><span class="pun">/</span><span class="pln">robbin_site</span><span class="pun">.</span><span class="pln">git         </span><span class="com"># 添加远程仓库地址</span><span class="pln">
git remote </span><span class="kwd">set</span><span class="pun">-</span><span class="pln">url origin git@github</span><span class="pun">.</span><span class="pln">com</span><span class="pun">:</span><span class="pln">robbin</span><span class="pun">/</span><span class="pln">robbin_site</span><span class="pun">.</span><span class="pln">git </span><span class="com"># 设置远程仓库地址(用于修改远程仓库地址)</span><span class="pln">
git remote rm </span><span class="str">&lt;repository&gt;</span>       <span class="com"># 删除远程仓库</span></code></pre>
<strong>创建远程仓库</strong>
<pre class="prettyprint"><code><span class="pln">git clone </span><span class="pun">--</span><span class="pln">bare robbin_site robbin_site</span><span class="pun">.</span><span class="pln">git  </span><span class="com"># 用带版本的项目创建纯版本仓库</span><span class="pln">
scp </span><span class="pun">-</span><span class="pln">r my_project</span><span class="pun">.</span><span class="pln">git git@git</span><span class="pun">.</span><span class="pln">csdn</span><span class="pun">.</span><span class="pln">net</span><span class="pun">:~</span>      <span class="com"># 将纯仓库上传到服务器上</span><span class="pln">

mkdir robbin_site</span><span class="pun">.</span><span class="pln">git </span><span class="pun">&amp;&amp;</span><span class="pln"> cd robbin_site</span><span class="pun">.</span><span class="pln">git </span><span class="pun">&amp;&amp;</span><span class="pln"> git </span><span class="pun">--</span><span class="pln">bare init </span><span class="com"># 在服务器创建纯仓库</span><span class="pln">
git remote add origin git@github</span><span class="pun">.</span><span class="pln">com</span><span class="pun">:</span><span class="pln">robbin</span><span class="pun">/</span><span class="pln">robbin_site</span><span class="pun">.</span><span class="pln">git    </span><span class="com"># 设置远程仓库地址</span><span class="pln">
git push </span><span class="pun">-</span><span class="pln">u origin master                                      </span><span class="com"># 客户端首次提交</span><span class="pln">
git push </span><span class="pun">-</span><span class="pln">u origin develop  </span><span class="com"># 首次将本地develop分支提交到远程develop分支，并且track</span><span class="pln">

git remote </span><span class="kwd">set</span><span class="pun">-</span><span class="pln">head origin master   </span><span class="com"># 设置远程仓库的HEAD指向master分支</span></code></pre>
也可以命令设置跟踪远程库和本地库
<pre class="prettyprint"><code><span class="pln">git branch </span><span class="pun">--</span><span class="kwd">set</span><span class="pun">-</span><span class="pln">upstream master origin</span><span class="pun">/</span><span class="pln">master
git branch </span><span class="pun">--</span><span class="kwd">set</span><span class="pun">-</span><span class="pln">upstream develop origin</span><span class="pun">/</span><span class="pln">develop

Source:robbinfan.com/blog/34/git-common-command
Author：robbin</span></code></pre>
</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>382</wp:post_id>
		<wp:post_date>2015-06-16 03:00:10</wp:post_date>
		<wp:post_date_gmt>2015-06-16 03:00:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>git%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4%e5%a4%87</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435523619;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:406;}i:1;a:1:{s:2:"id";i:436;}i:2;a:1:{s:2:"id";i:216;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What is polymorphism in Java?</title>
		<link>http://bochentheone.com/?p=391</link>
		<pubDate>Tue, 16 Jun 2015 05:35:11 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">/?p=391</guid>
		<description></description>
		<content:encoded><![CDATA[Polymorphism word comes from ancient Greek where poly means many so polymorphic are something can take many form. On theory Polymorphism is a simple concept where one variable can denote multiple object but in real life it just a gem and a code written using polymorphism concept is much flexible to change and quite easy to maintain than the one which is written without polymorphism.

<!--more-->
<blockquote>
<h3><u>What is polymorphism in Java</u></h3>
<div><b>Polymorphism is an Oops concept</b> which advice use of <b>common interface</b><i>instead of concrete implementation</i> while <a href="http://javarevisited.blogspot.sg/2011/09/code-review-checklist-best-practice.html">writing code</a>. When we program for interface our code is capable of handling any new requirement or enhancement arise in near future due to new implementation of our common interface. If we don't use common interface and rely on concrete implementation, we always need to change and duplicate most of our code to support new implementation. Its not only Java but other object oriented language like C++ also supports polymorphism and it comes as fundamental along with other OOPS concepts like <a href="http://javarevisited.blogspot.sg/2012/03/what-is-encapsulation-in-java-and-oops.html">Encapsulation </a>, Abstraction and Inheritance.</div>
<div>
<h3><u>How Polymorphism supported in Java</u></h3>
</div></blockquote>
<div>
<blockquote>Java has excellent support of polymorphism in terms of Inheritance, <a href="http://javarevisited.blogspot.sg/2011/12/method-overloading-vs-method-overriding.html">method overloading</a> and <a href="http://javarevisited.blogspot.sg/2011/12/method-overloading-vs-method-overriding.html">method overriding</a>. Method overriding allows Java to <a href="http://javarevisited.blogspot.sg/2012/04/how-to-invoke-method-by-name-in-java.html">invoke method </a>based on a particular object at run-time instead of declared type while coding. To get hold of concept let's see an <strong>example of polymorphism in Java:</strong>
<strong>public class</strong> TradingSystem{</blockquote>
</div>
<blockquote>
<div>

<strong>   public</strong> String getDescription(){

<strong>      return</strong> "electronic trading system";

}

}

<strong>public class</strong> DirectMarketAccessSystem <strong>extends</strong> TradingSystem{

<strong>   public</strong> String getDescription(){

<strong>     return</strong> "direct market access system";

}

}

<strong>public class</strong> CommodityTradingSystem <strong>extends</strong> TradingSystem{

<strong>   public</strong> String getDescription(){

<strong>     return</strong> "Futures trading system";

}

</div></blockquote>
<div>
<blockquote>}</blockquote>
</div>
<blockquote>
<div>

Here we have a super class called TradingSystem and there two implementation DirectMarketAccessSystem and CommodityTradingSystem and here we will write code which is flexible enough to work with any future implementation of TradingSystem we can achieve this by using Polymorphism in Java which we will see in further example.
<h3><u>Where to use Polymorphism in code</u></h3>
Probably this is the most important part of this Java Polymorphism tutorial and It’s good to know <em>where you can use Polymorphism in Java </em>while <a href="http://javarevisited.blogspot.sg/2011/08/code-comments-java-best-practices.html">writing code</a>. Its common practice to always replace concrete implementation with interface it’s not that easy and  comes with practice but here are some common places where I check for polymorphism:

<strong>1) Method argument:</strong>

Always use super type in method argument that will give you leverage to pass any implementation while invoking method. For example:
<strong>public</strong><strong>void</strong> showDescription(TradingSystem tradingSystem){

tradingSystem.description();

}

If you have used concrete implementation e.g. CommodityTradingSystem or DMATradingSystem then that code will require frequent changes whenever you add new Trading system.

<strong>2) Variable names:</strong>

Always use Super type while you are storing reference returned from any <a href="http://javarevisited.blogspot.sg/2011/12/factory-design-pattern-java-example.html">Factory method in Java</a>, This gives you flexibility to accommodate any new implementation from Factory. Here is an example of polymorphism while writing Java code which you can use retrieving reference from Factory:
String systemName = Configuration.getSystemName();

TradingSystem system = TradingSystemFactory.getSystem(systemName);

<strong>3) Return type of method</strong>

Return type of any method is another place where you should be using interface to take advantage of Polymorphism in Java. In fact this is a requirement of <a href="http://javarevisited.blogspot.sg/2011/12/factory-design-pattern-java-example.html">Factory design pattern in Java</a> to use interface as return type for factory method.
<strong>public</strong> TradingSystem getSystem(String name){

//code to return appropriate implementation

}

Source: <a href="http://javarevisited.blogspot.com/2011/08/what-is-polymorphism-in-java-example.html#ixzz3dCSjryes">Javarevisted</a>

</div>
<div>Posted by <span class="fn">Javin Paul</span></div></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>391</wp:post_id>
		<wp:post_date>2015-06-16 05:35:11</wp:post_date>
		<wp:post_date_gmt>2015-06-16 05:35:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>what-is-polymorphism-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="polymorphism"><![CDATA[polymorphism]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Saw one of my friends use Github to host his blog</title>
		<link>http://bochentheone.com/?p=399</link>
		<pubDate>Tue, 16 Jun 2015 23:00:06 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=399</guid>
		<description></description>
		<content:encoded><![CDATA[Just found out about GitHub Pages feature, it looks awesome!!

Get rid of expensive web host and WordPress, and those useless plugins, why not?!

Go for it!!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>399</wp:post_id>
		<wp:post_date>2015-06-16 23:00:06</wp:post_date>
		<wp:post_date_gmt>2015-06-16 23:00:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>saw-one-of-my-friends-use-github-to-host-his-blog</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="weibo"><![CDATA[Weibo]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435342018;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:158;}i:1;a:1:{s:2:"id";i:406;}i:2;a:1:{s:2:"id";i:197;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>对博客程序的选择</title>
		<link>http://bochentheone.com/?p=406</link>
		<pubDate>Wed, 17 Jun 2015 05:57:39 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=406</guid>
		<description></description>
		<content:encoded><![CDATA[FarBox、Jekyll、Hexo、Octopress 诸多博客程序，粗略的归纳。

<em>FarBox</em>: 国产货，应该支持的，功能强大，<span style="text-decoration: underline; color: #000000;">NOT FREE</span>

<em>Jekyll</em>: GitHub 官方推荐，完全<span style="text-decoration: underline;">免费</span>，<span style="text-decoration: underline;">GitHub</span>托管，<span style="text-decoration: underline;">技术性强</span>，<span style="text-decoration: underline;">插件多</span>，教程也多，自定义高

<em>Hexo</em>：台湾大学生开发，<span style="text-decoration: underline;">Node.js</span> 平台，<span style="text-decoration: underline;">免费</span>，快速，G<span style="text-decoration: underline;">ithub</span>托管，简单于Jekyll

<em>Octopress</em>： Jekyll 的简化版，比 Jekyll 易上手， <span style="text-decoration: underline;">免费</span>，托管 <span style="text-decoration: underline;">Github</span>，教程不少，速度不快

还有其他各式各样的 such as ...ghost, marboo, Medium, Logdown, prose.io, etc

想试试<em>jekyll</em>，刚好可以熟悉下git，web develop]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>406</wp:post_id>
		<wp:post_date>2015-06-17 05:57:39</wp:post_date>
		<wp:post_date_gmt>2015-06-17 05:57:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>%e5%af%b9%e5%8d%9a%e5%ae%a2%e7%a8%8b%e5%ba%8f%e7%9a%84%e9%80%89%e6%8b%a9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%b8%aa%e4%ba%ba%e5%b0%8f%e8%ae%b0"><![CDATA[个人小记]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434563876;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:216;}i:1;a:1:{s:2:"id";i:260;}i:2;a:1:{s:2:"id";i:225;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Checked vs Unchecked</title>
		<link>http://bochentheone.com/?p=410</link>
		<pubDate>Thu, 18 Jun 2015 05:00:09 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=410</guid>
		<description></description>
		<content:encoded><![CDATA[Checked and Unchecked exception are two types of Exceptions in Java, actually there is no functionality differences, but there is some different on exception handling.

<!--more-->1) Checked Exception is required to be handled by compile time while Unchecked Exception doesn't.

2) Checked Exception is direct sub-Class of Exception while Unchecked Exception are of RuntimeException.

3) Checked Exception represent scenario with higher failure rate while UnChecked Exception are mostly programming mistakes.
<blockquote><strong>Checked Exception </strong>in Java is all those Exception which requires being catches and handled during <a href="http://javarevisited.blogspot.com/2012/03/what-is-static-and-dynamic-binding-in.html">compile time</a>. If Compiler doesn't see try or catch block handling a Checked Exception, it throws Compilation error.

All the Exception which are direct <strong>subclass</strong> of Exception but not inherit <strong>RuntimeException</strong> are Checked Exception.</blockquote>
<blockquote><a href="http://bochentheone.com/wp-content/uploads/2015/06/checked-exception-vs-unchecked-exception-in-java.jpg"><img class="alignnone size-medium wp-image-411" src="http://bochentheone.com/wp-content/uploads/2015/06/checked-exception-vs-unchecked-exception-in-java-300x129.jpg" alt="checked exception vs unchecked exception in java" width="300" height="129" /></a>
<h4><u>When to use Checked Exception in Java</u></h4>
Knowing <strong>Checked Exception</strong> is not that useful until you know how to use Checked Exception in Java. Java has often been criticized for its Checked Exception strategy, arguments given are that checked Exception adds lot of boiler plate code and makes whole class or function unreadable. Somewhat I agree with this and java also recognize this by introducing <a href="http://javarevisited.blogspot.com/2011/07/jdk7-multi-cache-block-example-tutorial.html">improved Exception handling mechanism in Java7</a> but Checked Exception does have its real purpose. Following are some scenarios where I would prefer to use Checked Exception to ensure that <a href="http://javarevisited.blogspot.com/2011/09/how-to-write-production-quality-code.html">Code is Robust and stable</a>:

1) All Operation where chances of failure is more e.g. IO Operation, Database Access or Networking operation can be handled with Checked Exception.

2) When you know what to do (i.e. you have alternative) when an Exception occurs, may be as part of Business Process.

3) <strong>Checked Exception</strong> is a reminder by compiler to programmer to handle failure scenario.
<h4><u>Example of checked Exception in Java API</u>
IOException， <a href="http://javarevisited.blogspot.com/2012/01/javasqlsqlexception-invalid-column.html">SQLException</a>， DataAccessException，<a href="http://javarevisited.blogspot.com/2011/08/classnotfoundexception-in-java-example.html">ClassNotFoundException</a>，InvocationTargetException</h4>
<h4><u>What is Unchecked Exception in Java?</u></h4>
<strong>Unchecked Exception in Java</strong> is those Exceptions whose handling is not verified during Compile time. Unchecked Exceptions mostly arise due to programming errors like accessing method of a null object, accessing element outside an array bonding or invoking method with illegal arguments. In Java, Unchecked Exception is direct sub Class of RuntimeException. <em>What is major benefit of Unchecked Exception</em> is that it doesn't reduce code readability and keeps the client code clean.
<h4><u>When to use UnCheckedException in Java</u></h4>
A good strategy of <strong>Exception handling in Java</strong> is wrapping a checked Exception into <strong>UnCheckedException</strong>. Since most of <a href="http://javarevisited.blogspot.com/2011/11/database-transaction-tutorial-example.html">Database operation</a> throws SQLException but it’s not good to let SQLException propagate from your DAO layer to up higher on business layer and client code provide exception handling you can handle SQLException in DAO layer and you can wrap the cause in a RuntimeException to propagate through client code. Also as I said earlier unchecked exceptions are mostly programming errors and to catch them is real hard until you do a load test with all possible input and scenario.

Source: <a href="http://javarevisited.blogspot.com/2011/12/checked-vs-unchecked-exception-in-java.html">JavaRevistied</a></blockquote>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>410</wp:post_id>
		<wp:post_date>2015-06-18 05:00:09</wp:post_date>
		<wp:post_date_gmt>2015-06-18 05:00:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>checked-vs-unchecked</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435902626;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:358;}i:1;a:1:{s:2:"id";i:391;}i:2;a:1:{s:2:"id";i:349;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Do you know string is immutable in Java?</title>
		<link>http://bochentheone.com/?p=417</link>
		<pubDate>Fri, 19 Jun 2015 14:50:34 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=417</guid>
		<description></description>
		<content:encoded><![CDATA[String is immutable in Java because String objects are cached in String pool, and this cached string pool is shared between multiple client there is always a risk, where one client action would affect all other client. String pool is created in Java Heap, if there are too many String, there is a good change of OutOfMemoryErro because garbage collection doesn't happen in Java Heap area. Security and String pool being primary reason of making String immutable.<!--more-->
<blockquote>1) Imagine String pool facility without making string immutable , it's not possible at all because in case of string pool one string object/literal e.g. "Test" has referenced by many <a href="http://javarevisited.blogspot.sg/2012/02/difference-between-instance-class-and.html">reference variables</a> , so if any one of them change the value others will be automatically gets affected i.e. lets say

String A = "Test"
String B = "Test"

Now String B called "Test".toUpperCase() which change the same object into "TEST" , so A will also be "TEST" which is not desirable.

2)String has been widely used as parameter for many Java classes e.g. for opening network connection, you can pass hostname and port number as string , you can pass database URL as string for opening database connection, you can <a href="http://javarevisited.blogspot.sg/2012/07/read-file-line-by-line-java-example-scanner.html">open any file in Java</a> by passing name of file as argument to File I/O classes.

In case, if String is not immutable, this would lead serious security threat , I mean some one can access to any file for which he has authorization, and then can change the file name either deliberately or accidentally and gain access of those file. Because of immutability, you don't need to worry about those kind of threats. This reason also gel with, <b>Why String is final in Java</b>, by making java.lang.String final, Java designer ensured that no one overrides any behavior of String class.

3)Since String is immutable it can safely shared between many threads ,which is very important for multithreaded programming and to avoid any synchronization issues in Java, Immutability also makes String instance thread-safe in Java, means you don't need to synchronize String operation externally. Another important point to note about String is <a href="http://javarevisited.blogspot.sg/2011/10/how-substring-in-java-works.html">memory leak caused by SubString</a>, which is not a thread related issues but something to be aware of.

4) Another reason of <b>Why String is immutable in Java</b> is to <b>allow String to cache its hashcode</b> , being immutable String in Java caches its hashcode, and do not calculate every time we call hashcode method of String, which makes it very fast as hashmap key to be used in hashmap in Java.  This one is also suggested by  Jaroslav Sedlacek in comments below. In short because String is immutable, no one can change its contents once created which guarantees hashCode of String to be same on multiple invocation.

5) Another good reason of Why String is immutable in Java suggested by Dan Bergh Johnsson on comments is: The absolutely most important reason that String is immutable is that it is used by the <a href="http://javarevisited.blogspot.sg/2012/07/when-class-loading-initialization-java-example.html">class loading mechanism</a>, and thus have profound and fundamental security aspects. Had String been mutable, a request to load "java.io.Writer" could have been changed to load "mil.vogoon.DiskErasingWriter"

Source: <a href="http://javarevisited.blogspot.com/2010/10/why-string-is-immutable-in-java.html#ixzz3dWHhYAt9">JavaRevisited</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>417</wp:post_id>
		<wp:post_date>2015-06-19 14:50:34</wp:post_date>
		<wp:post_date_gmt>2015-06-19 14:50:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>do-you-know-string-is-immutable-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="immutable"><![CDATA[immutable]]></category>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<category domain="post_tag" nicename="string"><![CDATA[string]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1436024263;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:391;}i:1;a:1:{s:2:"id";i:102;}i:2;a:1:{s:2:"id";i:379;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>网站新主题</title>
		<link>http://bochentheone.com/?p=282</link>
		<pubDate>Thu, 21 May 2015 23:14:02 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=282</guid>
		<description></description>
		<content:encoded><![CDATA[花了两个小时，找了半天终于找个这个 word plus 的简洁主题。 还花了点时间自定义了，感觉整个网站干净了。。真是看的我神清气爽啊！ jajaja

<a href="http://bochentheone.com/wp-content/uploads/2015/05/IMG_1874.jpg"><img class="" src="http://bochentheone.com/wp-content/uploads/2015/05/IMG_1874.jpg" alt="" width="192" height="221" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date>2015-05-21 23:14:02</wp:post_date>
		<wp:post_date_gmt>2015-05-21 23:14:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%bd%91%e7%ab%99%e6%96%b0%e4%b8%bb%e9%a2%98</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="weibo"><![CDATA[Weibo]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434548922;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:210;}i:1;a:1:{s:2:"id";i:225;}i:2;a:1:{s:2:"id";i:245;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1435032296]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>One thing learned from International Affair Course</title>
		<link>http://bochentheone.com/?p=290</link>
		<pubDate>Tue, 02 Jun 2015 02:37:33 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=290</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://bochentheone.com/wp-content/uploads/2015/06/QQ20150601-2@2x.png"><img class="alignnone size-medium wp-image-298" src="http://bochentheone.com/wp-content/uploads/2015/06/QQ20150601-2@2x-300x178.png" alt="QQ20150601-2@2x" width="300" height="178" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date>2015-06-02 02:37:33</wp:post_date>
		<wp:post_date_gmt>2015-06-02 02:37:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>one-thing-learned-from-international-affair-course</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="weibo"><![CDATA[Weibo]]></category>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1434270231]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434215941;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:251;}i:1;a:1:{s:2:"id";i:141;}i:2;a:1:{s:2:"id";i:288;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>11 Free Mobile Icon Sets to Use in Your App</title>
		<link>http://bochentheone.com/?p=306</link>
		<pubDate>Sun, 07 Jun 2015 05:50:15 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=306</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>11 Free Mobile Icon Sets to Use in Your App</blockquote>
Source: <em><a href="http://www.sitepoint.com/11-free-mobile-icon-sets-use-app/">11 Free Mobile Icon Sets to Use in Your App</a></em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date>2015-06-07 05:50:15</wp:post_date>
		<wp:post_date_gmt>2015-06-07 05:50:15</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>11-free-mobile-icon-sets-to-use-in-your-app</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="weibo"><![CDATA[Weibo]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1434268183]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>11 Free Mobile Icon Sets to Use in Your App</title>
		<link>http://bochentheone.com/?p=309</link>
		<pubDate>Sun, 07 Jun 2015 05:52:21 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=309</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>Ada Ivanoff shows us 11 fantastic icon sets for use in your Android, iOS and Windows Apps, many of which are free.</blockquote>
Source: <em><a href="http://www.sitepoint.com/11-free-mobile-icon-sets-use-app/">11 Free Mobile Icon Sets to Use in Your App</a></em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date>2015-06-07 05:52:21</wp:post_date>
		<wp:post_date_gmt>2015-06-07 05:52:21</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>11-free-mobile-icon-sets-to-use-in-your-app-2</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="weibo"><![CDATA[Weibo]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[draft]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1434268187]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What is a Web Framework ? </title>
		<link>http://bochentheone.com/?p=311</link>
		<pubDate>Sun, 07 Jun 2015 05:57:45 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=311</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>
<p class="">A <b>web application framework</b> is a software framework that is designed to support the development of dynamic websites, web applications and<b>web</b><b> services</b>. The framework aims to alleviate the overhead associated with common activities performed in Web development.</p>
Source: <em><a href="http://stackoverflow.com/questions/4507506/what-is-a-web-framework-how-does-it-compare-with-lamp">terminology - What is a Web Framework ? </a></em>
<h5 class="heading-title-large">What are Frameworks? 22 Best Responsive CSS Frameworks for Web Design</h5>
source: <a href="http://www.awwwards.com/what-are-frameworks-22-best-responsive-css-frameworks-for-web-design.html">what are frameworks 22 best responsive css frameworks for web design</a></blockquote>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date>2015-06-07 05:57:45</wp:post_date>
		<wp:post_date_gmt>2015-06-07 05:57:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>what-is-a-web-framework</wp:post_name>
		<wp:status>trash</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<category domain="post_tag" nicename="web-framework"><![CDATA[web framework]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434552465;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:233;}i:1;a:1:{s:2:"id";i:349;}i:2;a:1:{s:2:"id";i:235;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a1fb11c2aae08043e7c2b9103c30328f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_10808182</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_status</wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_trash_meta_time</wp:meta_key>
			<wp:meta_value><![CDATA[1435032285]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>List vs Set in Java</title>
		<link>http://bochentheone.com/?p=421</link>
		<pubDate>Sun, 21 Jun 2015 08:08:58 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=421</guid>
		<description></description>
		<content:encoded><![CDATA[Both of them are used to store objects and provides convenient API to insert, remove and retrieve elements, along with to support iteration over collection.<!--more-->
<blockquote>1. Fundamental difference between List and Set in Java is allowing duplicate element. Lis is allowing duplicate while Set <strong>doesn't allow</strong><strong> duplicate</strong>. Set will replace the older value, any element in Set is unique.

2. List is an o<strong>rdered collection</strong> while Set is an <b>unordered collection</b>. List maintains insertion order of element. Set provides another alternative called SortedSet which can store Set element in specific sorting order.

3. Set uses <b>equals() </b>method to check uniqueness of element, while SortedSet uses <strong>compareTo()</strong> method.

4. Popular implementation of List interface in Java includes <strong>ArrayList, Vector</strong> and <strong>LinkedList</strong>. While popular implementation of Set interface includes <strong>HashSet, TreeSet </strong>and <strong>LinkedHashSet</strong>.

&nbsp;</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date>2015-06-21 08:08:58</wp:post_date>
		<wp:post_date_gmt>2015-06-21 08:08:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>list-vs-set-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="category" nicename="interviews"><![CDATA[Interviews]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="list"><![CDATA[list]]></category>
		<category domain="post_tag" nicename="set"><![CDATA[set]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1434967331;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:391;}i:1;a:1:{s:2:"id";i:349;}i:2;a:1:{s:2:"id";i:358;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Abstract and Interface in Java</title>
		<link>http://bochentheone.com/?p=426</link>
		<pubDate>Mon, 22 Jun 2015 05:37:01 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=426</guid>
		<description></description>
		<content:encoded><![CDATA[What is the difference between <strong>abstract</strong> class and <strong>interface</strong> in Java programming language ? and when to use interface and abstract class?

<!--more-->
<blockquote>1. Interface in Java can only contains declaration. Not any concrete methods inside interface. On the other hand, abstract class may contain both abstract and concrete methods, which make abstract class an ideal place to provide common or default functionality.

2. Java interface can extend multiple interface also Java class can implement multiple interface, which means interface can provide more Polymorphism support than class. By extending abstract class, a class can only participate in one Type hierarchy but by using interface it can be part of multiple type hierarchies.

3. In order to implement interface in Java, until your class is abstract, you need to provide implementation of all methods, which is very painful. On the other hand abstract class may help in this case by providing default implementation.
<h5>When to use interface and abstract class in Java</h5>
1) In Java particularly, decision between choosing Abstract class and interface may influence by the fact that multiple inheritance is not supported in Java. One class can only extend another class in Java. If you choose abstract class over interface than you lost your chance to extend another class, while at the same time you can implement multiple interfaces to show that you have multiple capability. One of the common example, in favor of interface over abstract class is <a href="http://javarevisited.blogspot.com/2012/01/difference-thread-vs-runnable-interface.html">Thread vs Runnable</a> case. If you want to execute a task and need run() method it's better to implement Runnable interface than extending Thread class.

2) Let's see another case where an abstract class suits better than interface. Since abstract class can include concrete methods, it’s great for maintenance point of view, particularly when your base class is evolving and keep changing. If you need a functionality across all your implementation e.g. a common method, than, you need to change every single implementation to include that change if  you have chosen interface to describe your base class. Abstract class comes handy in this case because you can just define new functionality in abstract super class and every sub class will automatically gets it. In short, abstract class are great in terms of evolving functionality. If you are using interface, you need to exercise extra care while defining contracts because its not easy to change them once published.

3) Interface in Java is great for defining Types. Programming for interfaces than implementation is also one of the useful <a href="http://javarevisited.blogspot.de/2012/03/10-object-oriented-design-principles.html">Object oriented design principle</a> which suggests benefit of using interface as argument to function, return type etc.

4) One more general rule of when to use abstract class and interface is to find out whether a certain class will form a IS-A hierarchy or CAN-DO-THIS hierarchy. If you know that you will be creating classes e.g. Circle, Square than it's better to create an abstract class Shape which can have area() and perimeter() as abstract method, rather than defining Shape as interface in Java. On the other hand if you are going to create classes which can do thinks like, can fly, you can use interface Flyable instead of abstract class.

5) Interface generally define capability e.g. Runnable can run(), Callable can call(), Displayable can display(). So if you need to define capability, consider using interface. Since a class can have multiple capabilities i.e. a class can be Runnable as well as Displayable at same time. As discussed in first point, Since <a href="http://javarevisited.blogspot.com/2011/07/why-multiple-inheritances-are-not.html">java does not allow multiple inheritance at class level</a>, only way to provide multiple capability is via interfaces.

6) Let's see another example of where to use Abstract class and Interface in Java, which is related to earlier point. Suppose you have lot of classes to model which are birds, which can fly, than creating a base abstract class as Bird would be appropriate  but if you have to model other things along with Birds, which can fly e.g. Airplanes, Balloons or Kites than it's better to create interface Flyable to represent flying functionality. In conclusion, if you need to provide a functionality which is used by same type of class than use Abstract class and if functionality can be used by completely unrelated classes than use interface.

7) Another interesting use of Abstract class and interface is defining contract using interface and providing skeletal using abstract class. java.util.List from Java collection framework is a good example of this pattern. List is declared as interface and extends Collection and Iterable interface and AbstractList is an abstract class which implements List. AbstractList provides skeletal implementation of List interface. Benefit of using this approach is that it minimize the effort to implement this interface by concrete class e.g. <a href="http://java67.blogspot.com/2012/12/difference-between-arraylist-vs-LinkedList-java.html">ArrayList or LinkedList</a>. If you don't use skeletal implementation e.g. abstract class and instead decide to implement List interface than not only you need to implement all List methods but also you might be duplicating common code. Abstract class in this case reduce effort to implement interface.

8) Interface also provide more decoupling than abstract class because interface doesn't contain any implementation detail, while abstract class may contain default implementation which may couple them with other class or resource.

9) Using interface also help while implementing <a href="http://javarevisited.blogspot.com/2012/12/inversion-of-control-dependency-injection-design-pattern-spring-example-tutorial.html">Dependency Injection design pattern</a> and makes testing easy. Many mock testing framework utilize this behavior.

Source: <a href="http://javarevisited.blogspot.com/2013/05/difference-between-abstract-class-vs-interface-java-when-prefer-over-design-oops.html#ixzz3dlZoPzus">Javarevisited</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>426</wp:post_id>
		<wp:post_date>2015-06-22 05:37:01</wp:post_date>
		<wp:post_date_gmt>2015-06-22 05:37:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>abstract-and-interface-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="abstract"><![CDATA[abstract]]></category>
		<category domain="post_tag" nicename="interface"><![CDATA[interface]]></category>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435029482;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:349;}i:1;a:1:{s:2:"id";i:391;}i:2;a:1:{s:2:"id";i:421;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Difference between Class and Object in Java</title>
		<link>http://bochentheone.com/?p=431</link>
		<pubDate>Tue, 23 Jun 2015 04:01:51 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=431</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Class</strong> is a blueprint to create different <strong>objects</strong> of same types. Class and object are related to each other because every Object must be type of any class. In the same time class itself is of no use until you create object. The former one is a design and later one is actual thing.<!--more-->
<blockquote>
1. Class is blueprint means you can create different object based on one class which varies in there property. e.g. if <em>Car </em>is a class then <em>Mercedes, BMW </em>or <em>Audi</em> are objects.

2. A class in java contains both state and behavior, state is represented by field in class, and behavior as method in java.

3. Object is also called instance in Java and every instance has different values of <em>instance variables.</em> Objects are most notably created using <em>new() </em>operator, and class have a <em>class </em>keyword to declare.

Source: <a href="http://javarevisited.blogspot.sg/2012/12/difference-between-class-and-object-in-oops-java.html">Javarevisited</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>431</wp:post_id>
		<wp:post_date>2015-06-23 04:01:51</wp:post_date>
		<wp:post_date_gmt>2015-06-23 04:01:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>difference-between-class-and-object-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435762428;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:426;}i:1;a:1:{s:2:"id";i:417;}i:2;a:1:{s:2:"id";i:102;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mac Terminal Cheat Sheet</title>
		<link>http://bochentheone.com/?p=436</link>
		<pubDate>Wed, 24 Jun 2015 03:59:20 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=436</guid>
		<description></description>
		<content:encoded><![CDATA[<h3 style="text-align: center;"><a href="http://bochentheone.com/wp-content/uploads/2015/06/download.jpeg"><img class="alignnone size-full wp-image-440" src="http://bochentheone.com/wp-content/uploads/2015/06/download.jpeg" alt="download" width="296" height="170" /></a></h3>
<!--more-->
<h3>CORE COMMANDS</h3>
<table style="height: 46px;" width="657">
<tbody>
<tr>
<th style="text-align: left;">Key/Command</th>
<th style="text-align: left;">Description</th>
</tr>
</tbody>
</table>
<table>
<tbody>
<tr>
<td>cd</td>
<td>Home directory</td>
</tr>
<tr>
<td>cd [folder]</td>
<td>Change directory</td>
</tr>
<tr>
<td>cd ~</td>
<td>Home directory, e.g. ‘cd ~/folder/’</td>
</tr>
<tr>
<td>cd /</td>
<td>Root of drive</td>
</tr>
<tr>
<td>ls</td>
<td>Short listing</td>
</tr>
<tr>
<td>ls -l</td>
<td>Long listing</td>
</tr>
<tr>
<td>ls -a</td>
<td>Listing incl. hidden files</td>
</tr>
<tr>
<td>ls -lh</td>
<td>Long listing with Human readable file sizes</td>
</tr>
<tr>
<td>ls -R</td>
<td>Entire content of folder recursively</td>
</tr>
<tr>
<td>sudo [command]</td>
<td>Run command with the security privileges of the superuser (Super User DO)</td>
</tr>
<tr>
<td>open [file]</td>
<td>Opens a file ( as if you double clicked it )</td>
</tr>
<tr>
<td>top</td>
<td>Displays active processes. Press q to quit</td>
</tr>
<tr>
<td>nano [file]</td>
<td>Opens the Terminal its editor</td>
</tr>
<tr>
<td>pico [file]</td>
<td>Opens the Terminal its editor</td>
</tr>
<tr>
<td>q</td>
<td>Exit</td>
</tr>
<tr>
<td>clear</td>
<td>Clear screen</td>
</tr>
</tbody>
</table>
<h3><a id="user-content-command-history" class="anchor" href="https://github.com/0nn0/terminal-mac-cheatsheet/wiki/Terminal-Cheatsheet-for-Mac-(-basics-)#command-history"></a>COMMAND HISTORY</h3>
<table>
<tbody>
<tr>
<td>history n</td>
<td>Shows the stuff typed – add a number to limit the last n items</td>
</tr>
<tr>
<td>ctrl-r</td>
<td>Interactively search through previously typed commands</td>
</tr>
<tr>
<td>![value]</td>
<td>Execute the last command typed that starts with ‘value’</td>
</tr>
<tr>
<td>!!</td>
<td>Execute the last command typed</td>
</tr>
</tbody>
</table>
<h3><a id="user-content-file-management" class="anchor" href="https://github.com/0nn0/terminal-mac-cheatsheet/wiki/Terminal-Cheatsheet-for-Mac-(-basics-)#file-management"></a>FILE MANAGEMENT</h3>
<table>
<tbody>
<tr>
<td>touch [file]</td>
<td>Create new file</td>
</tr>
<tr>
<td>pwd</td>
<td>Full path to working directory</td>
</tr>
<tr>
<td>..</td>
<td>Parent/enclosing directory, e.g.</td>
</tr>
<tr>
<td></td>
<td>‘ls -l ..’ = Long listing of parent directory</td>
</tr>
<tr>
<td></td>
<td>‘cd ../../’ = Move 2 levels up</td>
</tr>
<tr>
<td>.</td>
<td>Current folder</td>
</tr>
<tr>
<td>cat</td>
<td>Concatenate to screen</td>
</tr>
<tr>
<td>rm [file]</td>
<td>Remove a file, e.g. rm [file] [file]</td>
</tr>
<tr>
<td>rm -i [file]</td>
<td>Remove with confirmation</td>
</tr>
<tr>
<td>rm -r [dir]</td>
<td>Remove a directory and contents</td>
</tr>
<tr>
<td>rm -f [file]</td>
<td>Force removal without confirmation</td>
</tr>
<tr>
<td>rm -i [file]</td>
<td>Will display prompt before</td>
</tr>
<tr>
<td>cp [file] [newfile]</td>
<td>Copy file to file</td>
</tr>
<tr>
<td>cp [file] [dir]</td>
<td>Copy file to directory</td>
</tr>
<tr>
<td>mv [file] [new filename]</td>
<td>Move/Rename, e.g. mv -v [file] [dir]</td>
</tr>
</tbody>
</table>
<h3><a id="user-content-directory-management" class="anchor" href="https://github.com/0nn0/terminal-mac-cheatsheet/wiki/Terminal-Cheatsheet-for-Mac-(-basics-)#directory-management"></a>DIRECTORY MANAGEMENT</h3>
<table>
<tbody>
<tr>
<td>mkdir [dir]</td>
<td>Create new directory</td>
</tr>
<tr>
<td>mkdir -p [dir]/[dir]</td>
<td>Create nested directories</td>
</tr>
<tr>
<td>rmdir [dir]</td>
<td>Remove directory ( only operates on empty directories )</td>
</tr>
<tr>
<td>rm -R [dir]</td>
<td>Remove directory and contents</td>
</tr>
</tbody>
</table>
<h3><a id="user-content-pipes--allows-to-combine-multiple-commands-that-generate-output" class="anchor" href="https://github.com/0nn0/terminal-mac-cheatsheet/wiki/Terminal-Cheatsheet-for-Mac-(-basics-)#pipes--allows-to-combine-multiple-commands-that-generate-output"></a>PIPES – Allows to combine multiple commands that generate output</h3>
<table>
<tbody>
<tr>
<td>more</td>
<td>Output content delivered in screensize chunks</td>
</tr>
<tr>
<td>&gt; [file]</td>
<td>Push output to file, keep in mind it will get overwritten</td>
</tr>
<tr>
<td>&gt;&gt; [file]</td>
<td>Append output to existing file</td>
</tr>
<tr>
<td>&lt;</td>
<td>Tell command to read content from a fi</td>
</tr>
</tbody>
</table>
<h3><a id="user-content-help" class="anchor" href="https://github.com/0nn0/terminal-mac-cheatsheet/wiki/Terminal-Cheatsheet-for-Mac-(-basics-)#help"></a>HELP</h3>
<table>
<tbody>
<tr>
<td>[command] -h</td>
<td>Offers help</td>
</tr>
<tr>
<td>[command] —help</td>
<td>Offers help</td>
</tr>
<tr>
<td>[command] help</td>
<td>Offers help</td>
</tr>
<tr>
<td>reset</td>
<td>Resets the terminal display</td>
</tr>
<tr>
<td>man [command]</td>
<td>Show the help for ‘command’</td>
</tr>
<tr>
<td>whatis [command]</td>
<td>Gives a one-line description of ‘command’</td>
</tr>
</tbody>
</table>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>436</wp:post_id>
		<wp:post_date>2015-06-24 03:59:20</wp:post_date>
		<wp:post_date_gmt>2015-06-24 03:59:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>mac-terminal-cheat-sheet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="how-to"><![CDATA[How to]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435757757;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:382;}i:1;a:1:{s:2:"id";i:417;}i:2;a:1:{s:2:"id";i:426;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Does Java pass by value or pass by reference?</title>
		<link>http://bochentheone.com/?p=443</link>
		<pubDate>Wed, 24 Jun 2015 15:44:15 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=443</guid>
		<description></description>
		<content:encoded><![CDATA[Depending on whenever the method parameter expect a object or reference of that object is passed.

<!--more-->
<blockquote>
<pre></pre>
Primitives are passed as pass by value to method parameters, had Java pass by reference both <a href="http://javarevisited.blogspot.sg/2011/12/main-public-static-java-void-method-why.html">main method</a> and printNext() would have printed same value.

If you see <b>change made in method parameter is reflected globally, </b>that means one object is used in the both method. It's passed by object.

In reality if you pass object as method parameter in Java it pass "value of reference" or simple term object reference. In Java object can only be accessed by its reference as you can not get memory address where object is stored or more precisely there is no method to get value of object by passing memory address.

&nbsp;</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>443</wp:post_id>
		<wp:post_date>2015-06-24 15:44:15</wp:post_date>
		<wp:post_date_gmt>2015-06-24 15:44:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>does-java-pass-by-value-or-pass-by-reference</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ArrayList vs Vector in Java</title>
		<link>http://bochentheone.com/?p=447</link>
		<pubDate>Wed, 24 Jun 2015 16:20:00 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=447</guid>
		<description></description>
		<content:encoded><![CDATA[ArrayList and Vector is two most widely use Collection class, used to store object in ordered fashion. It is good to know about what the difference and when to use it.<!--more-->
<blockquote>
<h5>Common:</h5>
1. Both Vector and ArrayList are derived from AbstractList and implement List interface, it means both of them are <strong>ordered</strong> and allows <strong>duplicate</strong>.

2. Both are index based, you can use <em>get(index) </em>method to retrieve objects.
<h5>Difference:</h5>
1. Vector is <strong>synchronized</strong> and <strong>thread-safe</strong>, while ArrayList is neither synchronized nor thread-safe. It means if multiple threads try to access Vector same time, they can do that without compromising Vector's internal state.

2. Speed is different, because ArrayList is not synchronized, then it is faster than Vector.

3. Vector is not original from Java Collection Framework, it is a legacy class.
<h5>CONCLUSION:</h5>
Using ArrayList if you are using it in <strong>single </strong>threaded environment and use Vector if you need a thread-safe collection. ArrayList is anytime faster than Vector in case thread-safe is not a concern.

Source: <a href="http://java67.blogspot.sg/2012/09/arraylist-vs-vector-in-java-interview.html">Java67</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>447</wp:post_id>
		<wp:post_date>2015-06-24 16:20:00</wp:post_date>
		<wp:post_date_gmt>2015-06-24 16:20:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>arraylist-vs-vector-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="arraylist"><![CDATA[ArrayList]]></category>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<category domain="post_tag" nicename="vector"><![CDATA[Vector]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435371978;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:421;}i:1;a:1:{s:2:"id";i:426;}i:2;a:1:{s:2:"id";i:379;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Difference between Stack vs Heap in Java</title>
		<link>http://bochentheone.com/?p=450</link>
		<pubDate>Fri, 26 Jun 2015 02:55:19 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=450</guid>
		<description></description>
		<content:encoded><![CDATA[Stack and Heap are two separate areas of memory in same process. Stack is used to store primitive value and reference type to object but actual object is always created in Heap. One critical difference between heap and stack is, heap memory is shared by all threads but each thread has their own stack.<!--more-->
<blockquote>1) Main difference between heap and stack is that stack memory is used to store <a href="http://javarevisited.blogspot.com/2012/02/difference-between-instance-class-and.html">local variables</a> and function call, while heap memory is used to store objects in Java. No matter, where object is created in code e.g. as member variable, local variable or class variable,  they are always created inside heap space in Java.

2) Each <a href="http://javarevisited.blogspot.com/2011/02/how-to-implement-thread-in-java.html">Thread in Java</a> has there own stack which can be specified using -Xss JVM parameter, similarly you can also specify heap size of Java program using JVM option -Xms and -Xmx where -Xms is starting size of heap and -Xmx is maximum size of java heap. to learn more about JVM options see my post <a href="http://javarevisited.blogspot.com/2011/11/hotspot-jvm-options-java-examples.html">10 JVM option Java programmer should know</a>.

3) If there is no memory left in stack for storing function call or local variable, JVM will throw java.lang.StackOverFlowError, while if there is no more heap space for creating object, JVM will throw java.lang.OutOfMemoryError: Java Heap Space. Read more about how to deal with java.lang.OutOfMemoryError  in my post <a href="http://javarevisited.blogspot.com/2011/09/javalangoutofmemoryerror-permgen-space.html">2 ways to solve OutOfMemoryError in Java</a>.

4) If you are using <a href="http://javarevisited.blogspot.com/2012/12/recursion-in-java-with-example-programming.html">Recursion</a>, on which method calls itself, You can quickly fill up stack memory. Another difference between stack and heap is that size of stack memory is lot lesser than size of  heap memory in Java.

5) Variables stored in stacks are only visible to the owner Thread, while objects created in heap are visible to all thread. In other words stack memory is kind of private memory of Java Threads, while heap memory is shared among all threads.

Source: <a href="http://javarevisited.blogspot.com/2013/01/difference-between-stack-and-heap-java.html#ixzz3e8JSlp4h">Javarevisited</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>450</wp:post_id>
		<wp:post_date>2015-06-26 02:55:19</wp:post_date>
		<wp:post_date_gmt>2015-06-26 02:55:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>difference-between-stack-vs-heap-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435787407;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:417;}i:1;a:1:{s:2:"id";i:431;}i:2;a:1:{s:2:"id";i:358;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quick trick to find if a number is power of two without using arithmetic operator</title>
		<link>http://bochentheone.com/?p=454</link>
		<pubDate>Sat, 27 Jun 2015 02:24:37 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=454</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>return (x  &amp;  (x - 1)) == 0;</blockquote>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>454</wp:post_id>
		<wp:post_date>2015-06-27 02:24:37</wp:post_date>
		<wp:post_date_gmt>2015-06-27 02:24:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>quick-trick-to-find-if-a-number-is-power-of-two-without-using-arithmetic-operator</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e4%b8%aa%e4%ba%ba%e5%b0%8f%e8%ae%b0"><![CDATA[个人小记]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SOLID</title>
		<link>http://bochentheone.com/?p=458</link>
		<pubDate>Sat, 27 Jun 2015 02:47:52 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=458</guid>
		<description></description>
		<content:encoded><![CDATA[Five basic principles of Object-Oriented programing and design.

When these principles applied together, will create a system that is easy to maintain and extend over times. SOLID are the guidelines that can be applied while working on software to remove code smells by causing the programmer to refactor the software's source code until it is both legible and extensible.

<!--more-->
<h5>S - SRP - Single responsibility principle</h5>
a <a class="mw-redirect" title="Class (computer science)" href="https://en.wikipedia.org/wiki/Class_(computer_science)">class</a> should have only a single responsibility (i.e. only one potential change in the software's  specification should be able to affect the specification of the class)
<h5>0 - ocp - open/closed principle</h5>
“software entities … should be open for extension, but closed for modification.”
<h5>L - Lsp - Liskov substitution principle</h5>
“objects in a program should be replaceable with instances of their subtypes without altering the       correctness of that program.”
<h5>I - isp - interface segregation principle</h5>
“many client-specific interfaces are better than one general-purpose interface.”
<h5>D - dip - dependency inversion principle</h5>
one should “Depend upon Abstractions. Do not depend upon concretions.”]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>458</wp:post_id>
		<wp:post_date>2015-06-27 02:47:52</wp:post_date>
		<wp:post_date_gmt>2015-06-27 02:47:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>solid</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435675525;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:391;}i:1;a:1:{s:2:"id";i:426;}i:2;a:1:{s:2:"id";i:450;}}}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Set vs List vs Map in Java</title>
		<link>http://bochentheone.com/?p=465</link>
		<pubDate>Tue, 30 Jun 2015 03:10:30 +0000</pubDate>
		<dc:creator><![CDATA[bochentheone@hotmail.com]]></dc:creator>
		<guid isPermaLink="false">http://bochentheone.com/?p=465</guid>
		<description></description>
		<content:encoded><![CDATA[Interfaces, they are interfaces of java collection framework.

<i>List </i>provides ordered and indexed collection which can contains Duplicate.

<em>Set </em>provides an un-ordered collection of unique object, doesn't allow Duplicate.

<em>Map </em>provides a data structure based on key value pair and hashing. <!--more-->
<blockquote>
<h3><strong><u>When to use List, Set and Map in Java</u></strong></h3>
Based upon our understanding of <em>difference between Set, List and Map</em> we can now decide when to use List, Set or Map in Java.

1) If you need to access elements frequently by using index, than List is a way to go. Its implementation e.g.<a href="http://javarevisited.blogspot.com/2011/05/example-of-arraylist-in-java-tutorial.html">ArrayList</a> provides faster access if you know index.

2) If you want to store elements and want them to maintain an <strong>order</strong> on which they are inserted into collection then go for List again, as List is an ordered collection and maintain insertion order.

3) If you want to create collection of unique elements and <strong>don't want any duplicate</strong> than choose any Set implementation e.g. HashSet, LinkedHashSet or TreeSet. All Set implementation follow there general contract e.g. uniqueness but also add addition feature e.g. TreeSet is a SortedSet and elements stored on TreeSet can be sorted by using <a href="http://javarevisited.blogspot.com/2011/06/comparator-and-comparable-in-java.html">Comparator or Comparable in Java</a>.LinkedHashSet also maintains insertion order.

4) If you store data in form of key and value than Map is the way to go. You can choose from Hashtable,HashMap, TreeMap based upon your subsequent need. In order to choose between first two see<a href="http://javarevisited.blogspot.com/2011/09/difference-hashmap-vs-hashset-java.html">difference between HashSet and HashMap in Java</a>.

Source: <a href="http://java67.blogspot.com/2013/01/difference-between-set-list-and-map-in-java.html">Java67</a></blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>465</wp:post_id>
		<wp:post_date>2015-06-30 03:10:30</wp:post_date>
		<wp:post_date_gmt>2015-06-30 03:10:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>set-vs-list-vs-map-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="reading"><![CDATA[Reading]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jetpack_related_posts_cache</wp:meta_key>
			<wp:meta_value><![CDATA[a:1:{s:32:"8f6677c9d6b0f903e98ad32ec61f8deb";a:2:{s:7:"expires";i:1435908664;s:7:"payload";a:3:{i:0;a:1:{s:2:"id";i:421;}i:1;a:1:{s:2:"id";i:447;}i:2;a:1:{s:2:"id";i:426;}}}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_done_all</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
